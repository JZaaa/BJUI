/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/bjui.js":
/*!*********************!*\
  !*** ./src/bjui.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _js_jquery_cookie_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/jquery.cookie.js */ "./src/js/jquery.cookie.js");
/* harmony import */ var _js_bjui_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js/bjui-core.js */ "./src/js/bjui-core.js");
/* harmony import */ var _js_bjui_core_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_core_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _js_bjui_regional_zh_CN_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./js/bjui-regional.zh-CN.js */ "./src/js/bjui-regional.zh-CN.js");
/* harmony import */ var _js_bjui_regional_zh_CN_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_regional_zh_CN_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _js_bjui_frag_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./js/bjui-frag.js */ "./src/js/bjui-frag.js");
/* harmony import */ var _js_bjui_frag_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_frag_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _js_bjui_extends_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./js/bjui-extends.js */ "./src/js/bjui-extends.js");
/* harmony import */ var _js_bjui_extends_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_extends_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _js_bjui_modulefixed_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./js/bjui-modulefixed.js */ "./src/js/bjui-modulefixed.js");
/* harmony import */ var _js_bjui_modulefixed_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_modulefixed_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _js_bjui_basedrag_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./js/bjui-basedrag.js */ "./src/js/bjui-basedrag.js");
/* harmony import */ var _js_bjui_basedrag_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_basedrag_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _js_bjui_slidebar_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./js/bjui-slidebar.js */ "./src/js/bjui-slidebar.js");
/* harmony import */ var _js_bjui_slidebar_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_slidebar_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _js_bjui_contextmenu_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./js/bjui-contextmenu.js */ "./src/js/bjui-contextmenu.js");
/* harmony import */ var _js_bjui_contextmenu_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_contextmenu_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _js_bjui_navtab_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./js/bjui-navtab.js */ "./src/js/bjui-navtab.js");
/* harmony import */ var _js_bjui_navtab_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_navtab_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _js_bjui_dialog_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./js/bjui-dialog.js */ "./src/js/bjui-dialog.js");
/* harmony import */ var _js_bjui_dialog_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_dialog_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _js_bjui_taskbar_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./js/bjui-taskbar.js */ "./src/js/bjui-taskbar.js");
/* harmony import */ var _js_bjui_taskbar_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_taskbar_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _js_bjui_ajax_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./js/bjui-ajax.js */ "./src/js/bjui-ajax.js");
/* harmony import */ var _js_bjui_ajax_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_ajax_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _js_bjui_alertmsg_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./js/bjui-alertmsg.js */ "./src/js/bjui-alertmsg.js");
/* harmony import */ var _js_bjui_alertmsg_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_alertmsg_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _js_bjui_pagination_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./js/bjui-pagination.js */ "./src/js/bjui-pagination.js");
/* harmony import */ var _js_bjui_pagination_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_pagination_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var _js_bjui_util_date_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./js/bjui-util.date.js */ "./src/js/bjui-util.date.js");
/* harmony import */ var _js_bjui_util_date_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_util_date_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _js_bjui_datepicker_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./js/bjui-datepicker.js */ "./src/js/bjui-datepicker.js");
/* harmony import */ var _js_bjui_datepicker_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_datepicker_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var _js_bjui_ajaxtab_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./js/bjui-ajaxtab.js */ "./src/js/bjui-ajaxtab.js");
/* harmony import */ var _js_bjui_ajaxtab_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_ajaxtab_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var _js_bjui_tablefixed_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./js/bjui-tablefixed.js */ "./src/js/bjui-tablefixed.js");
/* harmony import */ var _js_bjui_tablefixed_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_tablefixed_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var _js_bjui_tabledit_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./js/bjui-tabledit.js */ "./src/js/bjui-tabledit.js");
/* harmony import */ var _js_bjui_tabledit_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_tabledit_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var _js_bjui_spinner_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./js/bjui-spinner.js */ "./src/js/bjui-spinner.js");
/* harmony import */ var _js_bjui_spinner_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_spinner_js__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var _js_bjui_lookup_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./js/bjui-lookup.js */ "./src/js/bjui-lookup.js");
/* harmony import */ var _js_bjui_lookup_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_lookup_js__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var _js_bjui_upload_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./js/bjui-upload.js */ "./src/js/bjui-upload.js");
/* harmony import */ var _js_bjui_upload_js__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_upload_js__WEBPACK_IMPORTED_MODULE_22__);
/* harmony import */ var _js_bjui_theme_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./js/bjui-theme.js */ "./src/js/bjui-theme.js");
/* harmony import */ var _js_bjui_theme_js__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_theme_js__WEBPACK_IMPORTED_MODULE_23__);
/* harmony import */ var _js_bjui_initui_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./js/bjui-initui.js */ "./src/js/bjui-initui.js");
/* harmony import */ var _js_bjui_initui_js__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_initui_js__WEBPACK_IMPORTED_MODULE_24__);
/* harmony import */ var _js_bjui_plugins_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./js/bjui-plugins.js */ "./src/js/bjui-plugins.js");
/* harmony import */ var _js_bjui_plugins_js__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(_js_bjui_plugins_js__WEBPACK_IMPORTED_MODULE_25__);



























/***/ }),

/***/ "./src/js/bjui-ajax.js":
/*!*****************************!*\
  !*** ./src/js/bjui-ajax.js ***!
  \*****************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-ajax.js  v1.2
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.ajax.js (author:ZhangHuihua@msn.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-ajax.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // BJUIAJAX GLOBAL ELEMENTS
  // ======================

  var autorefreshTimer; // BJUIAJAX CLASS DEFINITION
  // ======================

  var Bjuiajax = function Bjuiajax(element, options) {
    this.$element = $(element);
    this.options = options;
    this.tools = this.TOOLS();
  };

  Bjuiajax.DEFAULTS = {
    reload: true,
    loadingmask: true
  };
  Bjuiajax.NAVTAB = 'navtab';

  Bjuiajax.prototype.TOOLS = function () {
    var that = this;
    return {
      getPagerForm: function getPagerForm($parent, args) {
        var form = $parent.isTag('form') ? $parent[0] : $parent.find('#pagerForm:first')[0];
        var pageInfo = $.extend({}, BJUI.pageInfo);

        if ($parent.data('bjui.clientPaging')) {
          args = $.extend({}, $parent.data('bjui.clientPaging'), args);
          $parent.data('bjui.clientPaging', args);
        }

        if (form) {
          for (var key in pageInfo) {
            if (pageInfo.hasOwnProperty(key)) {
              var val = '';

              if (args && args[key]) {
                val = args[key];
              }

              if (!form[pageInfo[key]]) {
                $('<input type="hidden" name="' + pageInfo[key] + '" value="' + val + '">').appendTo($(form));
              } else if (val) {
                form[pageInfo[key]].value = val;
              }
            }
          }
        }

        return form;
      },
      getTarget: function getTarget() {
        if (that.$element.closest('.navtab-panel').length) return Bjuiajax.NAVTAB;else return 'dialog';
      }
    };
  };

  Bjuiajax.prototype.ajaxForm = function (options) {
    var that = this;
    var $form = this.$element;
    var callback = options && options.callback;
    var enctype = $form.attr('enctype');
    options = $.extend({}, that.options, _typeof(options) === 'object' && options);
    if (callback) callback = callback.toFunc();

    var successFn = function successFn(data, textStatus, jqXHR) {
      callback ? callback.apply(that, [data, $form]) : $.proxy(that.ajaxCallback(data), that);
    };

    var _submitFn = function _submitFn() {
      var op = {
        loadingmask: options.loadingmask,
        type: $form.attr('method'),
        url: $form.attr('action'),
        callback: successFn,
        error: $.proxy(that.ajaxError, that)
      };

      if (enctype && enctype === 'multipart/form-data') {
        if (window.FormData) {
          $.extend(op, {
            data: new FormData($form[0]),
            contentType: false,
            processData: false
          });
        } else {
          $.extend(op, {
            data: $form.serializeArray(),
            files: $form.find(':file'),
            iframe: true,
            processData: false
          });
        }
      } else {
        var _extra = $form.data('extra');

        var extra = undefined;

        if (_extra) {
          if (typeof _extra === 'string') {
            _extra = _extra.toObj();
          }

          if (_typeof(_extra) === 'object') {
            op.contentType = 'application/json';
            extra = JSON.stringify($.extend(_extra, $form.serializeJson()));
          }
        }

        $.extend(op, {
          data: extra ? extra : $form.serializeArray()
        });
      }

      $form.doAjax(op);
    };

    if (options.confirmMsg) {
      $form.alertmsg('confirm', options.confirmMsg, {
        okCall: _submitFn
      });
    } else {
      _submitFn();
    }
  };

  Bjuiajax.prototype.ajaxDone = function (json) {
    var $element = this.$element;

    if (json[BJUI.keys.statusCode] === BJUI.statusCode.error) {
      if (json[BJUI.keys.message]) $element.alertmsg('error', json[BJUI.keys.message]);
    } else if (json[BJUI.keys.statusCode] === BJUI.statusCode.timeout) {
      $element.alertmsg('info', json[BJUI.keys.message] || FRAG.sessionTimout);
      BJUI.loadLogin();
    } else {
      if (json[BJUI.keys.message]) $element.alertmsg('correct', json[BJUI.keys.message]);
    }
  };

  Bjuiajax.prototype.ajaxError = function (xhr, ajaxOptions, thrownError) {
    BJUI.removeProgress();
    var msg = xhr.responseText.trim();

    if (msg.startsWith('{')) {
      this.ajaxDone(msg.toObj());
    } else {
      this.$element.alertmsg('error', '<div>Http status: ' + xhr.status + ' ' + xhr.statusText + '</div>' + '<div>ajaxOptions: ' + ajaxOptions + ' </div>' + '<div>thrownError: ' + thrownError + ' </div>' + '<div>' + msg + '</div>');
    }
  };

  Bjuiajax.prototype.ajaxCallback = function (json) {
    var that = this;
    var $element = that.$element;
    var $target = $element.closest('.bjui-layout');
    that.ajaxDone(json);

    if (json[BJUI.keys.statusCode] === BJUI.statusCode.ok) {
      if ($target && $target.length) {
        that.divCallback(json, $target);
      } else {
        if (that.tools.getTarget() === Bjuiajax.NAVTAB) {
          that.navtabCallback(json);
        } else {
          that.dialogCallback(json);
        }
      }
    }
  };

  Bjuiajax.prototype.divCallback = function (json, $target) {
    var that = this;

    if (json.tabid) {
      setTimeout(function () {
        that.$element.navtab('reloadFlag', json.tabid);
      }, 100);
    }

    if (json.dialogid) {
      setTimeout(function () {
        that.$element.dialog('refresh', json.dialogid);
      }, 100);
    }

    if (json.divid) {
      setTimeout(function () {
        that.$element.bjuiajax('refreshDiv', json.divid);
      }, 100);
    }

    if (that.options.reload) {
      var form = that.tools.getPagerForm($target);
      var url = null;
      var type = null;

      if (form) {
        url = form.attr('action');
        type = form.attr('method') || 'GET';
      } else {
        url = $target.data('url');
        type = $target.data('type') || 'GET';
      }

      if (url) $target.ajaxUrl({
        url: url,
        type: type
      });
    }

    if (that.options.reloadNavtab) {
      setTimeout(function () {
        that.$element.navtab('refresh');
      }, 100);
    }

    if (json.forward) {
      var _forward = function _forward() {
        $target.ajaxUrl({
          url: json.forward
        });
      };

      if (json.forwardConfirm) {
        that.$element.alertmsg('confirm', json.forwardConfirm, {
          okCall: function okCall() {
            _forward();
          }
        });
      } else {
        _forward();
      }
    }
  };

  Bjuiajax.prototype.navtabCallback = function (json) {
    var that = this;

    if (json.closeCurrent && !json.forward) {
      that.$element.navtab('closeCurrentTab');
    }

    if (json.tabid !== false) {
      if ($.trim(json.tabid) === '' && json.statusCode === BJUI.statusCode.ok) {
        setTimeout(function () {
          that.$element.navtab('refresh');
        }, 100);
      } else if (json.tabid) {
        setTimeout(function () {
          that.$element.navtab('reloadFlag', json.tabid);
        }, 100);
      } else if (that.options.reload) {
        setTimeout(function () {
          that.$element.navtab('refresh');
        }, 100);
      }
    }

    if (json.dialogid) {
      setTimeout(function () {
        that.$element.dialog('refresh', json.dialogid);
      }, 100);
    }

    if (json.divid) {
      setTimeout(function () {
        that.$element.bjuiajax('refreshDiv', json.divid);
      }, 100);
    }

    if (json.datagrid) {
      setTimeout(function () {
        $.each(json.datagrid.join(','), function (i, n) {
          $('#' + n.trim()).datagrid('refresh');
        });
      }, 100);
    }

    if (json.forward) {
      var _forward = function _forward() {
        that.$element.navtab('reload', {
          url: json.forward
        });
      };

      if (json.forwardConfirm) {
        that.$element.alertmsg('confirm', json.forwardConfirm, {
          okCall: function okCall() {
            _forward();
          },
          cancelCall: function cancelCall() {
            if (json.closeCurrent) {
              that.$element.navtab('closeCurrentTab');
            }
          }
        });
      } else {
        _forward();
      }
    }
  };

  Bjuiajax.prototype.dialogCallback = function (json) {
    var that = this; // 当 tabid 为空时, 200 statusCode会自动刷新当前navtab, 设置为false时将不刷新

    if (json.tabid !== false) {
      if ($.trim(json.tabid) === '' && json.statusCode === BJUI.statusCode.ok) {
        setTimeout(function () {
          that.$element.navtab('refresh');
        }, 100);
      } else if (json.tabid) {
        setTimeout(function () {
          that.$element.navtab('reloadFlag', json.tabid);
        }, 100);
      }
    }

    if (json.dialogid) {
      setTimeout(function () {
        that.$element.dialog('refresh', json.dialogid);
      }, 100);
    }

    if (json.divid) {
      setTimeout(function () {
        that.$element.bjuiajax('refreshDiv', json.divid);
      }, 100);
    }

    if (json.closeCurrent && !json.forward) {
      that.$element.dialog('closeCurrent');
    } else if (that.options.reload) {
      setTimeout(function () {
        that.$element.dialog('refresh');
      }, 100);
    }

    if (that.options.reloadNavtab) {
      setTimeout(function () {
        that.$element.navtab('refresh');
      }, 100);
    }

    if (json.forward) {
      var _forward = function _forward() {
        that.$element.dialog('reload', {
          url: json.forward
        });
      };

      if (json.forwardConfirm) {
        that.$element.alertmsg('confirm', json.forwardConfirm, {
          okCall: function okCall() {
            _forward();
          }
        });
      } else {
        _forward();
      }
    }
  };

  Bjuiajax.prototype.pageCallback = function (options, target) {
    var that = this;
    var op = $.extend({}, Bjuiajax.DEFAULTS, options);
    var $target = target || null;
    var form = null;

    if ($target && $target.length) {
      form = that.tools.getPagerForm($target, op);

      if (form) {
        $.extend(op, $(form).data());
        that.reloadDiv($target, {
          type: $(form).attr('method') || 'POST',
          url: $(form).attr('action'),
          data: $(form).serializeArray(),
          loadingmask: op.loadingmask
        });
      }
    } else {
      if (that.tools.getTarget() === Bjuiajax.NAVTAB) {
        $target = $.CurrentNavtab;
        form = that.tools.getPagerForm($target, op);
        if (form) $.extend(op, $(form).data());
        that.$element.navtab('reloadForm', false, op);
      } else {
        $target = $.CurrentDialog;
        form = that.tools.getPagerForm($target, op);
        if (form) $.extend(op, $(form).data());
        that.$element.dialog('reloadForm', false, op);
      }
    }
  };

  Bjuiajax.prototype.doSearch = function (options) {
    var that = this;
    var $element = that.$element;
    var op = {
      pageCurrent: 1
    };
    var $target = $element.closest('.bjui-layout');
    var isValid = options.isValid;
    options = $.extend({}, Bjuiajax.DEFAULTS, _typeof(options) === 'object' && options);
    if (!options.url) options.url = $element.attr('action');

    if (!options.url) {
      BJUI.debug('Error trying to submit form action: action url is undefined!');
      return;
    } else {
      options.url = decodeURI(options.url).replacePlh($element.closest('.unitBox'));

      if (!options.url.isFinishedTm()) {
        $element.alertmsg('error', options.warn || FRAG.alertPlhMsg.replace('#plhmsg#', BJUI.regional.plhmsg));
        BJUI.debug('The submit form action is incorrect: ' + options.url);
        return;
      }

      options.url = encodeURI(options.url);
    }

    var search = function search() {
      if ($target && $target.length) {
        that.tools.getPagerForm($target, op);
        var data = $element.serializeJson();
        var _data = {};

        if (options.clearQuery) {
          var pageInfo = BJUI.pageInfo;

          for (var key in pageInfo) {
            if (pageInfo.hasOwnProperty(key)) {
              _data[pageInfo[key]] = data[pageInfo[key]];
            }
          }

          data = _data;
        }

        that.reloadDiv($target, {
          type: $element.attr('method') || 'POST',
          url: options.url,
          data: data,
          loadingmask: options.loadingmask
        });
      } else {
        if (that.tools.getTarget() === Bjuiajax.NAVTAB) {
          $target = $.CurrentNavtab;
          that.tools.getPagerForm($target, op);
          $element.navtab('reloadForm', options.clearQuery, options);
        } else {
          $target = $.CurrentDialog;
          that.tools.getPagerForm($target, op);
          $element.dialog('reloadForm', options.clearQuery, options);
        }
      }
    };

    if (!isValid) {
      if ($.validator) {
        $element.isValid(function (v) {
          if (v) search();
        });
      } else {
        search();
      }
    } else {
      search();
    }
  };

  Bjuiajax.prototype.doLoad = function (options) {
    var that = this;
    var $element = that.$element;
    var $target = options.target ? $(options.target) : null;
    options = $.extend({}, Bjuiajax.DEFAULTS, _typeof(options) === 'object' && options);

    if (!options.url) {
      BJUI.debug('Error trying to open a ajax link: The url is undefined!');
      return;
    } else {
      options.url = decodeURI(options.url).replacePlh($element.closest('.unitBox'));

      if (!options.url.isFinishedTm()) {
        $element.alertmsg('error', options.warn || FRAG.alertPlhMsg.replace('#plhmsg#', BJUI.regional.plhmsg));
        BJUI.debug('The ajax link incorrect: ' + options.url);
        return;
      }

      options.url = encodeURI(options.url);
    }

    if (!$target || !$target.length) {
      BJUI.debug('Not set loaded \'ajax\' content container, like [data-target].');
      return;
    }

    if ($target && $target.length) {
      $target.removeData('bjui.clientPaging');
      that.reloadDiv($target, options);
    }
  };

  Bjuiajax.prototype.refreshLayout = function (options) {
    var that = this;
    var $target = options.target ? $(options.target) : null;
    options = $.extend({}, Bjuiajax.DEFAULTS, _typeof(options) === 'object' && options);

    if (!$target || !$target.length) {
      if (autorefreshTimer) clearInterval(autorefreshTimer);
      BJUI.debug('Not set loaded \'ajax\' content container, like [data-target].');
      return;
    }

    if ($target && $target.length) {
      $target.removeData('bjui.clientPaging');
      that.reloadDiv($target, $.extend({}, $target.data('options') || {}, options));
    }
  };

  Bjuiajax.prototype.reloadDiv = function ($target, options) {
    var arefre = options.autorefresh && (isNaN(String(options.autorefresh)) ? 15 : options.autorefresh);
    $target.addClass('bjui-layout').data('options', options).ajaxUrl({
      type: options.type,
      url: options.url,
      data: options.data,
      loadingmask: options.loadingmask,
      callback: function callback(html) {
        if (BJUI.ui.clientPaging && $target.data('bjui.clientPaging')) {
          $target.pagination('setPagingAndOrderby', $target);
        }

        if (options.callback) {
          options.callback.apply(this, [$target]);
        }

        if (autorefreshTimer) {
          clearInterval(autorefreshTimer);
        }

        if (arefre) {
          autorefreshTimer = setInterval(function () {
            $target.bjuiajax('refreshLayout', options);
          }, arefre * 1000);
        }
      }
    });
  };

  Bjuiajax.prototype.refreshDiv = function (divid) {
    if (divid && typeof divid === 'string') {
      var arr = divid.split(',');

      for (var i = 0; i < arr.length; i++) {
        this.refreshLayout({
          target: '#' + arr[i]
        });
      }
    }
  };

  Bjuiajax.prototype.doAjax = function (options) {
    var that = this;
    var $element = that.$element;
    options = $.extend({}, Bjuiajax.DEFAULTS, _typeof(options) === 'object' && options);

    if (!options.url) {
      BJUI.debug('Error trying to open a ajax link: url is undefined!');
      return;
    } else {
      options.url = decodeURI(options.url).replacePlh($element.closest('.unitBox'));

      if (!options.url.isFinishedTm()) {
        $element.alertmsg('error', options.warn || FRAG.alertPlhMsg.replace('#plhmsg#', BJUI.regional.plhmsg));
        BJUI.debug('The ajax url is incorrect: ' + options.url);
        return;
      }

      options.url = encodeURI(options.url);
    }

    if (options.data) {
      options.data = _typeof(options.data) === 'object' ? options.data : options.data.toObj();
    }

    var callback = options.callback && options.callback.toFunc();

    var todo = function todo() {
      $element.doAjax({
        type: options.type,
        url: options.url,
        data: options.data,
        callback: callback || $.proxy(function (data) {
          that.ajaxCallback(data);
        }, that)
      });
    };

    if (options.confirmMsg) {
      $element.alertmsg('confirm', options.confirmMsg, {
        okCall: function okCall() {
          todo();
        }
      });
    } else {
      todo();
    }
  };

  Bjuiajax.prototype.doExport = function (options) {
    var that = this;
    var $element = that.$element;
    var $target = options.target ? $(options.target) : null;
    var form;

    if (!options.url) {
      BJUI.debug('Error trying to open a ajax link: url is undefined!');
      return;
    } else {
      options.url = decodeURI(options.url).replacePlh($element.closest('.unitBox'));

      if (!options.url.isFinishedTm()) {
        $element.alertmsg('error', options.warn || FRAG.alertPlhMsg.replace('#plhmsg#', BJUI.regional.plhmsg));
        BJUI.debug('The ajax url is incorrect: ' + options.url);
        return;
      }
    }

    var todo = function todo() {
      if (!$target || !$target.length) {
        if (that.tools.getTarget() === Bjuiajax.NAVTAB) {
          $target = $.CurrentNavtab;
        } else {
          $target = $.CurrentDialog;
        }
      }

      if (options.data) {
        options.data = _typeof(options.data) === 'object' ? options.data : options.data.toObj();
      } else {
        options.data = {};
      }

      form = that.tools.getPagerForm($target);

      if (form) {
        options.data = $.extend(options.data, $(form).serializeJson());
      }

      $.fileDownload(options.url, {
        httpMethod: options.type,
        data: options.data,
        cookiePath: '/',
        failCallback: function failCallback(responseHtml, url) {
          if (responseHtml.trim().startsWith('{')) responseHtml = responseHtml.toObj();
          that.ajaxDone(responseHtml);
        }
      });
    };

    if (options.confirmMsg) {
      $element.alertmsg('confirm', options.confirmMsg, {
        okCall: function okCall() {
          todo();
        }
      });
    } else {
      todo();
    }
  };

  Bjuiajax.prototype.doExportChecked = function (options) {
    var that = this;
    var $element = that.$element;
    var $target = options.target ? $(options.target) : null;

    if (!options.url) {
      BJUI.debug('Error trying to open a export link: url is undefined!');
      return;
    } else {
      options.url = decodeURI(options.url).replacePlh($element.closest('.unitBox'));

      if (!options.url.isFinishedTm()) {
        $element.alertmsg('error', options.warn || FRAG.alertPlhMsg.replace('#plhmsg#', BJUI.regional.plhmsg));
        BJUI.debug('The ajax url is incorrect: ' + options.url);
        return;
      }
    }

    var todo = function todo() {
      if (!options.group) {
        that.$element.alertmsg('error', options.warn || FRAG.alertNoCheckGroup.replace('#nocheckgroup#', BJUI.regional.nocheckgroup));
        return;
      }

      if (!$target || !$target.length) {
        if (that.tools.getTarget() === Bjuiajax.NAVTAB) {
          $target = $.CurrentNavtab;
        } else {
          $target = $.CurrentDialog;
        }
      }

      var ids = [];
      var $checks = $target.find(':checkbox[name=' + options.group + ']:checked');

      if ($checks.length === 0) {
        that.$element.alertmsg('error', FRAG.alertNotChecked.replace('#notchecked#', BJUI.regional.notchecked));
        return;
      }

      $checks.each(function () {
        ids.push($(this).val());
      });

      if (options.data) {
        options.data = _typeof(options.data) === 'object' ? options.data : options.data.toObj();
      } else {
        options.data = {};
      }

      options.data[options.idname ? options.idname : 'ids'] = ids.join(',');
      $.fileDownload(options.url, {
        httpMethod: options.type,
        data: options.data,
        cookiePath: '/',
        failCallback: function failCallback(responseHtml, url) {
          if (responseHtml.trim().startsWith('{')) responseHtml = responseHtml.toObj();
          that.ajaxDone(responseHtml);
        }
      });
    };

    if (options.confirmMsg) {
      $element.alertmsg('confirm', options.confirmMsg, {
        okCall: function okCall() {
          todo();
        }
      });
    } else {
      todo();
    }
  };

  Bjuiajax.prototype.doAjaxChecked = function (options) {
    var that = this;
    var $element = that.$element;
    var $target = options.target ? $(options.target) : null;
    options = $.extend({}, Bjuiajax.DEFAULTS, _typeof(options) === 'object' && options);

    if (!options.url) {
      BJUI.debug('Error trying to open a del link: url is undefined!');
      return;
    } else {
      options.url = decodeURI(options.url).replacePlh($element.closest('.unitBox'));

      if (!options.url.isFinishedTm()) {
        $element.alertmsg('error', options.warn || FRAG.alertPlhMsg.replace('#plhmsg#', BJUI.regional.plhmsg));
        BJUI.debug('The ajax url is incorrect: ' + options.url);
        return;
      }
    }

    var todo = function todo() {
      if (!options.group) {
        $element.alertmsg('error', options.warn || FRAG.alertNoCheckGroup.replace('#nocheckgroup#', BJUI.regional.nocheckgroup));
        return;
      }

      if (!$target || !$target.length) {
        if (that.tools.getTarget() === Bjuiajax.NAVTAB) {
          $target = $.CurrentNavtab;
        } else {
          $target = $.CurrentDialog;
        }
      }

      var ids = [];
      var $checks = $target.find(':checkbox[name=' + options.group + ']:checked');
      var callback = options.callback && options.callback.toFunc();

      if ($checks.length === 0) {
        $element.alertmsg('error', FRAG.alertNotChecked.replace('#notchecked#', BJUI.regional.notchecked));
        return;
      }

      $checks.each(function () {
        ids.push($(this).val());
      });

      if (options.data) {
        options.data = _typeof(options.data) === 'object' ? options.data : options.data.toObj();
      } else {
        options.data = {};
      }

      options.data[options.idname ? options.idname : 'ids'] = ids.join(',');
      $element.doAjax({
        type: options.type,
        url: options.url,
        data: options.data,
        callback: callback || $.proxy(function (data) {
          that.ajaxCallback(data);
        }, that)
      });
    };

    if (options.confirmMsg) {
      $element.alertmsg('confirm', options.confirmMsg, {
        okCall: function okCall() {
          todo();
        }
      });
    } else {
      todo();
    }
  }; // BJUIAJAX PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, Bjuiajax.DEFAULTS, $this.data(), _typeof(option) === 'object' && option);
      var data = $this.data('bjui.bjuiajax');
      if (!data) $this.data('bjui.bjuiajax', data = new Bjuiajax(this, options));

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      }
    });
  }

  var old = $.fn.bjuiajax;
  $.fn.bjuiajax = Plugin;
  $.fn.bjuiajax.Constructor = Bjuiajax; // BJUIAJAX NO CONFLICT
  // =================

  $.fn.bjuiajax.noConflict = function () {
    $.fn.bjuiajax = old;
    return this;
  }; // BJUIAJAX DATA-API
  // ==============


  $(document).on('submit.bjui.bjuiajax.data-api', 'form[data-toggle="ajaxform"]', function (e) {
    var $this = $(this);
    var options = $this.data();
    Plugin.call($this, 'ajaxForm', options);
    e.preventDefault();
  });
  /* doSearch */

  $(function () {
    if ($.validator) {
      $(document).on(BJUI.eventType.initUI, function (e) {
        $(e.target).find('form[data-toggle="ajaxsearch"]').each(function () {
          var $form = $(this);
          var options = $form.data();
          options.isValid = true;
          $form.validator({
            valid: function valid(form) {
              Plugin.call($form, 'doSearch', options);
            }
          });
        });
      });
    } else {
      $(document).on('submit.bjui.bjuiajax.data-api', 'form[data-toggle="ajaxsearch"]', function (e) {
        var $this = $(this);
        var options = $this.data();
        Plugin.call($this, 'doSearch', options);
        e.preventDefault();
      });
    }
  });
  $(document).on('click.bjui.bjuiajax.data-api', '[data-toggle="reloadsearch"]', function (e) {
    var $this = $(this);
    var options;
    var $form = $this.closest('form');
    if (!$form || !$form.length) return;
    options = $form.data();
    options.clearQuery = $this.data('clearQuery') || true;
    Plugin.call($form, 'doSearch', options);
    e.preventDefault();
  });
  $(document).on('click.bjui.bjuiajax.data-api', '[data-toggle="ajaxload"]', function (e) {
    var $this = $(this);
    var options = $this.data();
    if (!options.url) options.url = $this.attr('href');
    Plugin.call($this, 'doLoad', options);
    e.preventDefault();
  });
  $(document).on(BJUI.eventType.initUI, function (e) {
    var $box = $(e.target).find('[data-toggle="autoajaxload"]');
    $box.each(function () {
      var $element = $(this);
      var options = $element.data();
      options.target = this;
      Plugin.call($element, 'doLoad', options);
    });
  });
  $(document).on('click.bjui.bjuiajax.data-api', '[data-toggle="refreshlayout"]', function (e) {
    var $this = $(this);
    var options = $this.data();
    Plugin.call($this, 'refreshLayout', options);
  });
  $(document).on('click.bjui.bjuiajax.data-api', '[data-toggle="doajax"]', function (e) {
    var $this = $(this);
    var options = $this.data();
    if (!options.url) options.url = $this.attr('href');
    Plugin.call($this, 'doAjax', options);
    e.preventDefault();
  });
  $(document).on('click.bjui.bjuiajax.data-api', '[data-toggle="doexport"]', function (e) {
    var $this = $(this);
    var options = $this.data();
    if (!options.url) options.url = $this.attr('href');
    Plugin.call($this, 'doExport', options);
    e.preventDefault();
  });
  $(document).on('click.bjui.bjuiajax.data-api', '[data-toggle="doexportchecked"]', function (e) {
    var $this = $(this);
    var options = $this.data();
    if (!options.url) options.url = $this.attr('href');
    Plugin.call($this, 'doExportChecked', options);
    e.preventDefault();
  });
  $(document).on('click.bjui.bjuiajax.data-api', '[data-toggle="doajaxchecked"]', function (e) {
    var $this = $(this);
    var options = $this.data();
    if (!options.url) options.url = $this.attr('href');
    Plugin.call($this, 'doAjaxChecked', options);
    e.preventDefault();
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-ajaxtab.js":
/*!********************************!*\
  !*** ./src/js/bjui-ajaxtab.js ***!
  \********************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-ajaxtab.js  v1.2
 * @author K'naan (xknaan@163.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-ajaxtab.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // AJAXTAB CLASS DEFINITION
  // ======================

  var Ajaxtab = function Ajaxtab(element, options) {
    this.$element = $(element);
    this.options = options;
  };

  Ajaxtab.DEFAULTS = {
    url: undefined,
    target: undefined,
    reload: false
  };

  Ajaxtab.prototype.init = function () {
    var options = this.options;

    if (!options.url) {
      BJUI.debug('Ajaxtab Plugin: Error trying to open a tab, url is undefined!');
      return;
    } else {
      options.url = decodeURI(options.url).replacePlh(this.$element.closest('.unitBox'));

      if (!options.url.isFinishedTm()) {
        this.$element.alertmsg('error', options.warn || FRAG.alertPlhMsg.replace('#plhmsg#', BJUI.regional.plhmsg));
        BJUI.debug('Ajaxtab Plugin: The new ajaxtab\'s url is incorrect, url: ' + options.url);
        return;
      }

      options.url = encodeURI(options.url);
    }

    if (!options.target) {
      BJUI.debug('Ajaxtab Plugin: Attribute \'target\' is not defined!');
      return;
    }

    if (options.reload) {
      this.load();
    } else {
      var reload = this.$element.data('bjui.ajaxtab.reload');
      if (!reload) this.load();else this.$element.tab('show');
    }
  };

  Ajaxtab.prototype.load = function () {
    var $element = this.$element;
    var options = this.options;
    $(options.target).ajaxUrl({
      url: options.url,
      data: {},
      callback: function callback() {
        $element.data('bjui.ajaxtab.reload', true).tab('show');
      }
    });
  }; // AJAXTAB PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, Ajaxtab.DEFAULTS, $this.data(), _typeof(option) === 'object' && option);
      var data = $this.data('bjui.ajaxtab');
      if (!data) $this.data('bjui.ajaxtab', data = new Ajaxtab(this, options));

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      } else {
        data.init();
      }
    });
  }

  var old = $.fn.ajaxtab;
  $.fn.ajaxtab = Plugin;
  $.fn.ajaxtab.Constructor = Ajaxtab; // AJAXTAB NO CONFLICT
  // =================

  $.fn.ajaxtab.noConflict = function () {
    $.fn.ajaxtab = old;
    return this;
  }; // AJAXTAB DATA-API
  // ==============


  $(document).on('click.bjui.ajaxtab.data-api', '[data-toggle="ajaxtab"]', function (e) {
    var $this = $(this);
    var options = $this.data();
    if (!options.url) options.url = $this.attr('href');
    Plugin.call($this, options);
    e.preventDefault();
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-alertmsg.js":
/*!*********************************!*\
  !*** ./src/js/bjui-alertmsg.js ***!
  \*********************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-alertmsg.js  v1.2
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.alertMsg.js (author:ZhangHuihua@msn.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-alertmsg.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // ALERTMSG GLOBAL ELEMENTS
  // ======================

  var $box, $alertbg, timer;
  $(function () {
    var INIT_ALERTMSG = function INIT_ALERTMSG() {
      $box = $(FRAG.alertBoxFrag).hide().html('');
      $alertbg = $(FRAG.alertBackground).hide().html('');
      $('body').append('<!-- alert msg box -->').append($box).append('<!-- alert msg box mask bg -->').append($alertbg);
    };

    INIT_ALERTMSG();
  }); // ALERTMSG CLASS DEFINITION
  // ======================

  var Alertmsg = function Alertmsg(element, options) {
    this.$element = $(element);
    this.options = options;
    this.tools = this.TOOLS();
    this.clearTime = null;
  };

  Alertmsg.DEFAULTS = {
    displayPosition: 'topcenter',
    // Optional 'topleft, topcenter, topright, middleleft, middlecenter, middleright, bottomleft, bottomcenter, bottomright'
    displayMode: 'slide',
    // Optional 'none, fade, slide'
    autoClose: null,
    alertTimeout: 3000,
    mask: null,
    types: {
      error: 'error',
      info: 'info',
      warn: 'warn',
      correct: 'correct',
      confirm: 'confirm'
    },
    fas: {
      error: 'fa-times-circle',
      info: 'fa-info-circle',
      warn: 'fa-exclamation-circle',
      correct: 'fa-check-circle',
      confirm: 'fa-question-circle'
    }
  };

  Alertmsg.prototype.TOOLS = function () {
    var that = this;
    var options = that.options;
    return {
      getTitle: function getTitle(key) {
        return options.title || BJUI.regional.alertmsg.title[key];
      },
      keydownOk: function keydownOk(event) {
        if (event.which === BJUI.keyCode.ENTER) {
          event.data.target.trigger('click');
          return false;
        }

        return true;
      },
      keydownEsc: function keydownEsc(event) {
        if (event.which === BJUI.keyCode.ESC) event.data.target.trigger('click');
      },
      openPosition: function openPosition() {
        var position = BJUI.alertMsg.displayPosition;
        var mode = BJUI.alertMsg.displayMode;
        var width = 460;
        var height = $box.outerHeight();
        var startCss = {};
        var endCss = {};

        if (position) {
          if (options.displayPosition && options.displayPosition !== 'topcenter') {
            position = options.displayPosition;
          }
        } else {
          position = options.displayPosition;
        }

        if (mode) {
          if (options.displayMode && options.displayMode !== 'silde') {
            mode = options.displayMode;
          }
        } else {
          mode = options.displayMode;
        }

        switch (position) {
          case 'topleft':
            startCss = {
              top: 0 - height,
              left: 0,
              'margin-left': 0
            };
            endCss = {
              top: 0
            };
            break;

          case 'topcenter':
            startCss = {
              top: 0 - height
            };
            endCss = {
              top: 0
            };
            break;

          case 'topright':
            startCss = {
              top: 0 - height,
              left: 'auto',
              right: 0,
              'margin-left': 0
            };
            endCss = {
              top: 0
            };
            break;

          case 'middleleft':
            startCss = {
              top: '50%',
              left: 0 - width,
              'margin-left': 0,
              'margin-top': 0 - height / 2
            };
            endCss = {
              left: 0
            };
            break;

          case 'middlecenter':
            startCss = {
              top: '0',
              'margin-top': 0 - height / 2
            };
            endCss = {
              top: '50%'
            };
            break;

          case 'middleright':
            startCss = {
              top: '50%',
              left: 'auto',
              right: 0 - width,
              'margin-top': 0 - height / 2
            };
            endCss = {
              right: 0
            };
            break;

          case 'bottomleft':
            startCss = {
              top: 'auto',
              left: 0,
              bottom: 0 - height,
              'margin-left': 0
            };
            endCss = {
              bottom: 0
            };
            break;

          case 'bottomcenter':
            startCss = {
              top: 'auto',
              bottom: 0 - height
            };
            endCss = {
              bottom: 0
            };
            break;

          case 'bottomright':
            startCss = {
              top: 'auto',
              left: 'auto',
              right: 0,
              bottom: 0 - height,
              'margin-left': 0
            };
            endCss = {
              bottom: 0
            };
            break;
        }

        if (mode === 'slide') {
          $box.css(startCss).show().animate(endCss, 500);
        } else if (mode === 'fade') {
          startCss.opacity = 0.1;
          $box.css(startCss).css(endCss).show().animate({
            opacity: 1
          }, 500);
        } else {
          $box.css(startCss).css(endCss).show();
        }
      },
      closePosition: function closePosition() {
        var position = BJUI.alertMsg.displayPosition;
        var mode = BJUI.alertMsg.displayMode;
        var width = 460;
        var height = $box.outerHeight();
        var endCss = {};

        if (position) {
          if (options.displayPosition && options.displayPosition !== 'topcenter') {
            position = options.displayPosition;
          }
        } else {
          position = options.displayPosition;
        }

        if (mode) {
          if (options.displayMode && options.displayMode !== 'silde') {
            mode = options.displayMode;
          }
        } else {
          mode = options.displayMode;
        }

        switch (position) {
          case 'topleft':
            endCss = {
              top: 0 - height
            };
            break;

          case 'topcenter':
            endCss = {
              top: 0 - height
            };
            break;

          case 'topright':
            endCss = {
              top: 0 - height
            };
            break;

          case 'middleleft':
            endCss = {
              left: 0 - width
            };
            break;

          case 'middlecenter':
            endCss = {
              top: 0 - height
            };
            break;

          case 'middleright':
            endCss = {
              right: 0 - width
            };
            break;

          case 'bottomleft':
            endCss = {
              bottom: 0 - height
            };
            break;

          case 'bottomcenter':
            endCss = {
              bottom: 0 - height
            };
            break;

          case 'bottomright':
            endCss = {
              bottom: 0 - height
            };
            break;
        }

        if (mode === 'slide') {
          $box.animate(endCss, 500, function () {
            $alertbg.hide();
            $(this).hide().empty();
          });
        } else if (mode === 'fade') {
          $box.animate({
            opacity: 0
          }, 500, function () {
            $alertbg.hide();
            $(this).hide().empty();
          });
        } else {
          $box.hide().remove();
          $alertbg.hide();
        }
      },
      open: function open(type, msg, buttons) {
        var tools = this;
        var btnsHtml = '';
        var $newbox;
        var $btns;
        var alertTimeout = BJUI.alertMsg.alertTimeout;

        if (buttons) {
          for (var i = 0; i < buttons.length; i++) {
            var sRel = buttons[i].call ? 'callback' : '';
            var sCls = buttons[i].cls ? buttons[i].cls : 'default';
            var sIco = buttons[i].cls && buttons[i].cls === 'green' ? 'check' : 'close';
            btnsHtml += FRAG.alertBtnFrag.replace('#btnMsg#', '<i class="fa fa-' + sIco + '"></i> ' + buttons[i].name).replace('#callback#', sRel).replace('#class#', sCls);
          }
        }

        $newbox = $(FRAG.alertBoxFrag.replace('#type#', type).replace('#fa#', options.fas[type]).replace('#title#', this.getTitle(type)).replace('#message#', msg).replace('#btnFragment#', btnsHtml)).hide().appendTo('body');
        if ($box && $box.length) $box.remove();
        $box = $newbox;
        tools.openPosition();

        if (timer) {
          clearTimeout(timer);
          timer = null;
        }

        if (options.mask == null) {
          if (!(options.types.info === type || options.types.correct === type)) {
            $alertbg.show();
          }
        }

        if (options.autoClose == null) {
          if (options.types.info === type || options.types.correct === type) {
            if (alertTimeout) {
              if (options.alertTimeout && options.alertTimeout !== 3000) {
                alertTimeout = options.alertTimeout;
              }
            } else {
              alertTimeout = options.alertTimeout;
            }

            timer = setTimeout(function () {
              tools.close();
            }, alertTimeout);
          }
        }

        $btns = $box.find('.btn');
        $btns.each(function (i) {
          $(this).on('click', $.proxy(function () {
            that.tools.close();
            var call = buttons[i].call;
            if (typeof call === 'string') call = call.toFunc();
            if (typeof call === 'function') call.call();
          }, that));

          if (buttons[i].keyCode === BJUI.keyCode.ENTER) {
            $(document).on('keydown.bjui.alertmsg.ok', {
              target: $btns.eq(i)
            }, tools.keydownOk);
          }

          if (buttons[i].keyCode === BJUI.keyCode.ESC) {
            $(document).on('keydown.bjui.alertmsg.esc', {
              target: $btns.eq(i)
            }, tools.keydownEsc);
          }
        });
      },
      alert: function alert(type, msg, btnoptions) {
        $.extend(options, _typeof(btnoptions) === 'object' && btnoptions);
        var op = $.extend({}, {
          okName: BJUI.regional.alertmsg.btnMsg.ok,
          okCall: null
        }, options);
        var buttons = [{
          name: op.okName,
          call: op.okCall,
          cls: 'default',
          keyCode: BJUI.keyCode.ENTER
        }];
        this.open(type, msg, buttons);
      },
      close: function close() {
        $(document).off('keydown.bjui.alertmsg.ok').off('keydown.bjui.alertmsg.esc');
        this.closePosition();
      }
    };
  };

  Alertmsg.prototype.error = function (msg, btnoptions) {
    this.tools.alert(this.options.types.error, msg, btnoptions);
  };

  Alertmsg.prototype.info = function (msg, btnoptions) {
    this.tools.alert(this.options.types.info, msg, btnoptions);
  };

  Alertmsg.prototype.warn = function (msg, btnoptions) {
    this.tools.alert(this.options.types.warn, msg, btnoptions);
  };

  Alertmsg.prototype.ok = function (msg, btnoptions) {
    this.tools.alert(this.options.types.correct, msg, btnoptions);
  };

  Alertmsg.prototype.correct = function (msg, btnoptions) {
    this.tools.alert(this.options.types.correct, msg, btnoptions);
  };

  Alertmsg.prototype.confirm = function (msg, btnoptions) {
    $.extend(this.options, _typeof(btnoptions) === 'object' && btnoptions);
    var op = $.extend({}, {
      okName: BJUI.regional.alertmsg.btnMsg.ok,
      okCall: null,
      cancelName: BJUI.regional.alertmsg.btnMsg.cancel,
      cancelCall: null
    }, this.options);
    var buttons = [{
      name: op.okName,
      call: op.okCall,
      cls: 'green',
      keyCode: BJUI.keyCode.ENTER
    }, {
      name: op.cancelName,
      call: op.cancelCall,
      cls: 'red',
      keyCode: BJUI.keyCode.ESC
    }];
    this.tools.open(this.options.types.confirm, msg, buttons);
  }; // ALERTMSG PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, Alertmsg.DEFAULTS, $this.data(), _typeof(option) === 'object' && option);
      var data = new Alertmsg(this, options);

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      }
    });
  }

  var old = $.fn.alertmsg;
  $.fn.alertmsg = Plugin;
  $.fn.alertmsg.Constructor = Alertmsg; // ALERTMSG NO CONFLICT
  // =================

  $.fn.alertmsg.noConflict = function () {
    $.fn.alertmsg = old;
    return this;
  }; // NAVTAB DATA-API
  // ==============


  $(document).on('click.bjui.alertmsg.data-api', '[data-toggle="alertmsg"]', function (e) {
    var $this = $(this);
    var data = $this.data();
    var options = data.options;
    var type;

    if (options) {
      if (typeof options === 'string') options = options.toObj();

      if (_typeof(options) === 'object') {
        $.extend(data, options);
      }
    }

    type = data.type;
    if (!type) return false;
    Plugin.call($this, type, data.msg || type, data);
    e.preventDefault();
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-basedrag.js":
/*!*********************************!*\
  !*** ./src/js/bjui-basedrag.js ***!
  \*********************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-basedrag.js  v1.2
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.drag.js (author:Roger Wu)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-basedrag.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // BASEDRAG CLASS DEFINITION
  // ======================

  var Basedrag = function Basedrag(element, options) {
    this.$element = $(element);
    this.options = options;
  };

  Basedrag.prototype.init = function () {
    var that = this;
    this.options.$obj = this.$element;
    if (this.options.obj) this.options.$obj = this.options.obj;

    if (this.options.event) {
      this.start(this.options.event);
    } else {
      this.$element.find(this.options.selector).bind('mousedown', function (e) {
        that.start.apply(that, [e]);
      });
    }
  };

  Basedrag.prototype.start = function (e) {
    document.onselectstart = function (e) {
      return false;
    }; // 禁止选择


    var that = this;
    this.options.oleft = parseInt(this.$element.css('left')) || 0;
    this.options.otop = parseInt(this.$element.css('top')) || 0;
    $(document).bind('mouseup.bjui.basedrag', function (e) {
      that.stop.apply(that, [e]);
    }).bind('mousemove.bjui.basedrag', function (e) {
      that.drag.apply(that, [e]);
    });
  };

  Basedrag.prototype.drag = function (e) {
    if (!e) e = window.event;
    var options = this.options;
    var left = options.oleft + (e.pageX || e.clientX) - options.event.pageX;
    var top = options.otop + (e.pageY || e.clientY) - options.event.pageY;
    if (top < 1) top = 0;

    if (options.move === 'horizontal') {
      if (options.minW && left >= parseInt(this.options.$obj.css('left')) + options.minW && options.maxW && left <= parseInt(this.options.$obj.css('left')) + options.maxW) {
        this.$element.css('left', left);
      } else if (options.scop) {
        if (options.relObj) {
          if (left - parseInt(options.relObj.css('left')) > options.cellMinW) {
            this.$element.css('left', left);
          } else {
            this.$element.css('left', left);
          }
        }
      }
    } else if (options.move === 'vertical') {
      this.$element.css('top', top);
    } else {
      var $selector = options.selector ? this.options.$obj.find(options.selector) : this.options.$obj;

      if (left >= -$selector.outerWidth() * 2 / 3 && top >= 0 && left + $selector.outerWidth() / 3 < $(window).width() && top + $selector.outerHeight() < $(window).height()) {
        this.$element.css({
          left: left,
          top: top
        });
      }
    }

    if (options.drag) {
      options.drag.apply(this.$element, [this.$element, e]);
    }

    return this.preventEvent(e);
  };

  Basedrag.prototype.stop = function (e) {
    $(document).unbind('mousemove.bjui.basedrag').unbind('mouseup.bjui.basedrag');

    if (this.options.stop) {
      this.options.stop.apply(this.$element, [this.$element, e]);
    }

    if (this.options.event) {
      this.destroy();
    }

    document.onselectstart = function (e) {
      return true;
    }; // 启用选择


    return this.preventEvent(e);
  };

  Basedrag.prototype.preventEvent = function (e) {
    if (e.stopPropagation) e.stopPropagation();
    if (e.preventDefault) e.preventDefault();
    return false;
  };

  Basedrag.prototype.destroy = function () {
    this.$element.removeData('bjui.basedrag');
    if (!this.options.nounbind) this.$element.unbind('mousedown');
  }; // BASEDRAG PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, $this.data(), _typeof(option) === 'object' && option);
      var data = $this.data('bjui.basedrag');
      if (!data) $this.data('bjui.basedrag', data = new Basedrag(this, options));

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      } else {
        data.init();
      }
    });
  }

  var old = $.fn.basedrag;
  $.fn.basedrag = Plugin;
  $.fn.basedrag.Constructor = Basedrag; // BASEDRAG NO CONFLICT
  // =================

  $.fn.basedrag.noConflict = function () {
    $.fn.basedrag = old;
    return this;
  };
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-contextmenu.js":
/*!************************************!*\
  !*** ./src/js/bjui-contextmenu.js ***!
  \************************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-contextmenu.js  v1.2
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.contextmenu.js (author:ZhangHuihua@msn.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-contextmenu.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // CONTEXTMENU GLOBAL ELEMENTS
  // ======================

  var $menu, $shadow, hash;
  $(function () {
    var INIT_CONTEXTMENU = function INIT_CONTEXTMENU() {
      $menu = $('<div id="bjui-contextmenu"></div>').hide();
      $shadow = $('<div id="bjui-contextmenuShadow"></div>').hide();
      hash = [];
      $('body').append('<!-- contextmenu -->').append($menu).append($shadow);
    };

    INIT_CONTEXTMENU();
  }); // CONTEXTMENU CLASS DEFINITION
  // ======================

  var Contextmenu = function Contextmenu(element, options) {
    this.$element = $(element);
    this.options = options;
  };

  Contextmenu.DEFAULTS = {
    id: undefined,
    shadow: true,
    bindings: {},
    ctrSub: null
  };

  Contextmenu.prototype.init = function () {
    var that = this;
    var op = this.options;
    if (!op.id) return;
    hash.push({
      id: op.id,
      shadow: op.shadow,
      bindings: op.bindings || {},
      ctrSub: op.ctrSub
    });
    var index = hash.length - 1;
    this.$element.on('contextmenu', function (e) {
      that.display(index, this, e, op);
      return false;
    });
  };

  Contextmenu.prototype.display = function (index, trigger, e, options) {
    var that = this;
    var cur = hash[index];
    var cp = BJUI.regional[cur.id];
    var content = FRAG[cur.id];
    $.each(cp, function (i, n) {
      content = content.replace('#' + i + '#', cp[i]);
    }); // Send the content to the menu

    $menu.html(content);
    $.each(cur.bindings, function (id, func) {
      $('[rel="' + id + '"]', $menu).on('click', function (e) {
        that.hide();
        func($(trigger), $('#bjui-' + cur.id));
      });
    });
    var posX = e.pageX;
    var posY = e.pageY;
    if ($(window).width() < posX + $menu.width()) posX -= $menu.width();
    if ($(window).height() < posY + $menu.height()) posY -= $menu.height();
    $menu.css({
      'left': posX,
      'top': posY
    }).show();

    if (cur.shadow) {
      $shadow.css({
        width: $menu.width(),
        height: $menu.height(),
        left: posX + 3,
        top: posY + 3
      }).show();
    }

    $(document).one('click', that.hide);

    if ($.isFunction(cur.ctrSub)) {
      cur.ctrSub($(trigger), $('#bjui-' + cur.id));
    }
  };

  Contextmenu.prototype.hide = function () {
    $menu.hide();
    $shadow.hide();
  };
  /* Custom contextmenu */


  Contextmenu.prototype.show = function (options) {
    var that = this;

    if (options.items && options.items.length) {
      that.$element.on('contextmenu', function (e) {
        var isShow = true;
        /* exclude*/

        if (options.exclude) {
          that.$element.find(options.exclude).each(function () {
            if (this === e.target || $(this).find(e.target).length) {
              isShow = false;
              return null;
            }
          });
        }

        if (!isShow) {
          e.stopPropagation();
          return !isShow;
        } else {
          that.custom(options.items, e);
        }

        return false;
      });
    }
  };

  Contextmenu.prototype.custom = function (items, e) {
    $menu.empty().html('<ul></ul>');
    var that = this;
    var options = that.options;
    var $ul = $menu.find('> ul');
    var $li;
    $.each(items, function (i, n) {
      var icon = '';
      if (n.icon) icon = '<i class="fa fa-' + n.icon + '"></i>';

      if (n.title === 'diver') {
        $li = $('<li class="diver"></li>');
      } else {
        $li = $('<li><span class="icon">' + icon + '</span><span class="title">' + n.title + '</span></li>');
        if (n.func && typeof n.func === 'string') n.func = n.func.toFunc();

        if (n.func) {
          $li.on('click', function (evt) {
            that.hide();
            n.func(that.$element, $li);
          });
        }
      }

      $li.appendTo($ul);
    });
    var posX = e.pageX;
    var posY = e.pageY;
    if ($(window).width() < posX + $menu.width()) posX -= $menu.width();
    if ($(window).height() < posY + $menu.height()) posY -= $menu.height();
    $menu.css({
      'left': posX,
      'top': posY
    }).show();

    if (options.shadow) {
      $shadow.css({
        width: $menu.width(),
        height: $menu.height(),
        left: posX + 3,
        top: posY + 3
      }).show();
    }

    $(document).one('click', that.hide);
  }; // CONTEXTMENU PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, Contextmenu.DEFAULTS, $this.data(), _typeof(option) === 'object' && option);
      var data = $this.data('bjui.contextmenu');
      if (!data) $this.data('bjui.contextmenu', data = new Contextmenu(this, options));

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      } else {
        data.init();
      }
    });
  }

  var old = $.fn.contextmenu;
  $.fn.contextmenu = Plugin;
  $.fn.contextmenu.Constructor = Contextmenu; // CONTEXTMENU NO CONFLICT
  // =================

  $.fn.contextmenu.noConflict = function () {
    $.fn.contextmenu = old;
    return this;
  };
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-core.js":
/*!*****************************!*\
  !*** ./src/js/bjui-core.js ***!
  \*****************************/
/***/ (() => {

/*!
 * B-JUI  v2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-core.js  v2
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.core.js (author:ZhangHuihua@msn.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-core.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict';

  var BJUI = {
    version: '2.0.0',
    JSPATH: 'BJUI/',
    PLUGINPATH: 'BJUI/plugins/',
    IS_DEBUG: false,
    date: true,
    KeyPressed: {
      // key press state
      ctrl: false,
      shift: false
    },
    theme: 'blue',
    dialog: {
      mask: false,
      width: 500,
      height: 300
    },
    // 编辑器统一配置
    KindEditor: {
      uploadJson: undefined,
      fileManagerJson: undefined
    },
    keyCode: {
      ENTER: 13,
      ESC: 27,
      END: 35,
      HOME: 36,
      SHIFT: 16,
      CTRL: 17,
      TAB: 9,
      LEFT: 37,
      RIGHT: 39,
      UP: 38,
      DOWN: 40,
      DELETE: 46,
      BACKSPACE: 8
    },
    eventType: {
      initUI: 'bjui.initUI',
      // When document load completed or ajax load completed, B-JUI && Plugins init
      beforeInitUI: 'bjui.beforeInitUI',
      // If your DOM do not init [add to DOM attribute 'data-noinit="true"']
      afterInitUI: 'bjui.afterInitUI',
      //
      ajaxStatus: 'bjui.ajaxStatus',
      // When performing ajax request, display or hidden progress bar
      resizeGrid: 'bjui.resizeGrid',
      // When the window or dialog resize completed
      beforeAjaxLoad: 'bjui.beforeAjaxLoad',
      // When perform '$.fn.ajaxUrl', to do something...
      beforeLoadNavtab: 'bjui.beforeLoadNavtab',
      beforeLoadDialog: 'bjui.beforeLoadDialog',
      afterLoadNavtab: 'bjui.afterLoadNavtab',
      afterLoadDialog: 'bjui.afterLoadDialog',
      beforeCloseNavtab: 'bjui.beforeCloseNavtab',
      beforeCloseDialog: 'bjui.beforeCloseDialog',
      afterCloseNavtab: 'bjui.afterCloseNavtab',
      afterCloseDialog: 'bjui.afterCloseDialog'
    },
    pageInfo: {
      total: 'total',
      pageCurrent: 'pageCurrent',
      pageSize: 'pageSize',
      orderField: 'orderField',
      orderDirection: 'orderDirection'
    },
    alertMsg: {
      displayPosition: 'topcenter',
      displayMode: 'slide',
      alertTimeout: 3000
    },
    // 信息提示的显示位置，显隐方式，及[info/correct]方式时自动关闭延时
    ajaxTimeout: 50000,
    statusCode: {
      ok: 200,
      error: 300,
      timeout: 301
    },
    keys: {
      statusCode: 'statusCode',
      message: 'message'
    },
    ui: {
      windowWidth: 0,
      showSlidebar: true,
      // 左侧导航栏锁定/隐藏
      clientPaging: true,
      // 是否在客户端响应分页及排序参数
      overwriteHomeTab: false // 当打开一个未定义id的navtab时，是否可以覆盖主navtab(我的主页)

    },
    debug: function debug(msg) {
      if (this.IS_DEBUG) {
        if (typeof console !== 'undefined') console.log(msg);else alert(msg);
      }
    },
    loginInfo: {
      url: 'login.html',
      title: 'Login',
      width: 420,
      height: 260,
      mask: true
    },
    loadLogin: function loadLogin() {
      var login = this.loginInfo;
      $('body').dialog({
        id: 'bjui-login',
        url: login.url,
        title: login.title,
        width: login.width,
        height: login.height,
        mask: login.mask
      });
    },

    /**
     * 初始化
     * 可配置项:
     *  [object]  pageInfo, statusCode, alertMsg, loginInfo, ui, dialog
     *  [string] JSPATH, PLUGINPATH, ajaxTimeout, debug, theme
     * @param options
     */
    init: function init(options) {
      var op = $.extend({}, options);
      $.extend(BJUI.statusCode, op.statusCode);
      $.extend(BJUI.pageInfo, op.pageInfo);
      $.extend(BJUI.alertMsg, op.alertMsg);
      $.extend(BJUI.loginInfo, op.loginInfo);
      $.extend(BJUI.KindEditor, op.KindEditor);
      $.extend(BJUI.ui, op.ui);
      $.extend(BJUI.dialog, op.dialog);
      if (op.JSPATH) this.JSPATH = op.JSPATH;
      if (op.PLUGINPATH) this.PLUGINPATH = op.PLUGINPATH;
      if (op.ajaxTimeout) this.ajaxTimeout = op.ajaxTimeout;
      this.date = op.date === undefined ? this.date : op.date;
      this.IS_DEBUG = op.debug || false;
      this.theme = $.cookie('bjui_theme') || op.theme;
      this.initEnv();
      if (this.date) this.initDate();
      $(this).theme('setTheme', this.theme);
    },
    initEnv: function initEnv() {
      $(window).resize(function () {
        var ww = $(this).width();

        if (BJUI.ui.windowWidth) {
          if (BJUI.ui.windowWidth > 600 && BJUI.ui.windowWidth < ww) {
            ww = BJUI.ui.windowWidth;
          }
        }

        BJUI.initLayout(ww);
        setTimeout(function () {
          $(this).trigger(BJUI.eventType.resizeGrid);
        }, 30);
      });
      setTimeout(function () {
        var ww = $(window).width();

        if (BJUI.ui.windowWidth) {
          if (BJUI.ui.windowWidth > 600 && BJUI.ui.windowWidth < ww) {
            ww = BJUI.ui.windowWidth;
          }
        }

        BJUI.initLayout(ww);
        $(document).initui();
      }, 10);
    },
    initLayout: function initLayout(ww) {
      var $header = $('#bjui-header');
      var $navtab = $('#bjui-navtab');
      var iContentW = ww - (BJUI.ui.showSlidebar ? $('#bjui-sidebar').width() + 6 : 6);
      var iContentH = $(window).height() - $header.height() - $('#bjui-footer').outerHeight();
      var navtabH = $navtab.find('.tabsPageHeader').height();
      if (BJUI.ui.windowWidth) $('#bjui-window').width(ww);
      BJUI.windowWidth = ww;
      $('#bjui-container').height(iContentH);
      $navtab.width(iContentW);
      $('#bjui-leftside, #bjui-sidebar, #bjui-sidebar-s, #bjui-splitBar, #bjui-splitBarProxy').css({
        height: '100%'
      });
      $('#bjui-navtab .tabsPageContent').height(iContentH - navtabH);
      /* fixed pageFooter */

      setTimeout(function () {
        $('#bjui-navtab > .tabsPageContent > .navtabPage').resizePageH().find('.bjui-layout').resizePageH();
      }, 10);
      /* header navbar */

      var navbarWidth = $('body').data('bjui.navbar.width');
      var $toggle = $header.find('.bjui-navbar-toggle');
      var $logo = $header.find('.bjui-navbar-logo');
      var $navbar = $('#bjui-navbar-collapse');
      var $nav = $navbar.find('.bjui-navbar-right');

      if (!navbarWidth) {
        navbarWidth = {
          logoW: $logo.outerWidth(),
          navW: $nav.outerWidth()
        };
        $('body').data('bjui.navbar.width', navbarWidth);
      }

      if (navbarWidth) {
        if (ww - navbarWidth.logoW < navbarWidth.navW) {
          $toggle.show();
          $navbar.addClass('collapse menu');
        } else {
          $toggle.hide();
          $navbar.removeClass('collapse menu in');
        }
      }
      /* horizontal navbar */


      var $hnavbox = $('#bjui-hnav-navbar-box');
      var $hnavbar = $hnavbox.find('> #bjui-hnav-navbar');
      var $hmoreL = $hnavbox.prev();
      var $hmoreR = $hnavbox.next();
      var hboxWidth = $hnavbox.width();
      var liW = 0;
      $hnavbar.find('> li').each(function (i) {
        var $li = $(this);
        liW += $li.outerWidth();

        if (liW > hboxWidth) {
          $hmoreR.show();
          $hnavbox.data('hnav.move', true).data('hnav.liw', liW);
        } else {
          $hmoreL.hide();
          $hmoreR.hide();
          $hnavbox.removeData('hnav.move');
        }
      });
    },
    regional: {},
    setRegional: function setRegional(key, value) {
      BJUI.regional[key] = value;
    },
    getRegional: function getRegional(key) {
      if (String(key).indexOf('.') >= 0) {
        var msg;
        var arr = String(key).split('.');

        for (var i = 0; i < arr.length; i++) {
          if (!msg) msg = BJUI.regional[arr[i]];else msg = msg[arr[i]];
        }

        return msg;
      } else {
        return BJUI.regional[key];
      }
    },
    doRegional: function doRegional(frag, regional) {
      $.each(regional, function (k, v) {
        frag = frag.replaceAll('#' + k + '#', v);
      });
      return frag;
    },
    initDate: function initDate() {
      // 时钟
      var today = new Date();
      $('#bjui-date').html(today.formatDate('yyyy/MM/dd'));
      setInterval(function () {
        today = new Date(today.setSeconds(today.getSeconds() + 1));
        $('#bjui-clock').html(today.formatDate('HH:mm:ss'));
      }, 1000);
    },
    // 清除遮罩层
    removeProgress: function removeProgress() {
      var $box = $(document);
      $box.find('.bjui-maskProgress').find('.progress').stop().animate({
        width: '100%'
      }, 'fast', function () {
        $box.find('.bjui-ajax-mask').fadeOut('normal', function () {
          $(this).remove();
        });
      });
    }
  };
  window.BJUI = BJUI;
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-datepicker.js":
/*!***********************************!*\
  !*** ./src/js/bjui-datepicker.js ***!
  \***********************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-datepicker.js  v1.2
 * reference: util.date.js
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.datepicker.js (author:ZhangHuihua@msn.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-datepicker.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // DATEPICKER GLOBAL ELEMENTS
  // ======================

  var $box, $main, $prev, $next, $year, $month, $time, $timeinps, $spinner, $hh, $mm, $ss, $tm, $close, $days, $dayNames, $clearBtn, $okBtn;
  $(function () {
    var INIT_DATEPICKER = function INIT_DATEPICKER() {
      var cp = BJUI.regional.datepicker;
      var calendar = FRAG.calendarFrag.replace('#close#', cp.close).replace('#prev#', cp.prev).replace('#next#', cp.next).replace('#clear#', cp.clear).replace('#ok#', cp.ok);
      $box = $(calendar).hide();
      $('body').append('<!-- datepicker -->').append($box);
      $main = $box.find('> .main');
      $prev = $box.find('a.prev');
      $next = $box.find('a.next');
      $year = $box.find('select[name=year]');
      $month = $box.find('select[name=month]');
      $time = $box.find('.time');
      $timeinps = $time.find(':text');
      $spinner = $time.find('ul > li');
      $hh = $time.find('.hh');
      $mm = $time.find('.mm');
      $ss = $time.find('.ss');
      $tm = $main.find('> .tm');
      $close = $box.find('.close');
      $days = $main.find('> .body > .days');
      $dayNames = $main.find('> .body > .dayNames');
      $clearBtn = $box.find('.clearBtn');
      $okBtn = $box.find('.okBtn'); // regional

      var dayNames = '';
      var dr = BJUI.regional.datepicker;
      $.each(dr.dayNames, function (i, v) {
        dayNames += '<dt>' + v + '</dt>';
      });
      $dayNames.html(dayNames);
      $.each(dr.monthNames, function (i, v) {
        var m = i + 1;
        $month.append('<option value="' + m + '">' + v + '</option>');
      });
      $box.on('selectstart', function () {
        return false;
      });
    };

    INIT_DATEPICKER();
  }); // DATEPICKER CLASS DEFINITION
  // ======================

  var Datepicker = function Datepicker(element, options) {
    this.$element = $(element);
    this.options = options;
    this.tools = this.TOOLS();
    this.$dateBtn = null; // 动态minDate、maxDate

    var now = new Date();
    this.options.minDate = now.formatDateTm(this.options.minDate);
    this.options.maxDate = now.formatDateTm(this.options.maxDate); // events

    this.events = {
      focus_time: 'focus.bjui.datepicker.time',
      click_prev: 'click.bjui.datepicker.prev',
      click_next: 'click.bjui.datepicker.next',
      click_ok: 'click.bjui.datepicker.ok',
      click_days: 'click.bjui.datepicker.days',
      click_clear: 'click.bjui.datepicker.clear',
      click_close: 'click.bjui.datepicker.close',
      click_tm: 'click.bjui.datepicker.tm',
      click_spinner: 'click.bjui.datepicker.spinner',
      mousedown_sp: 'mousedown.bjui.datepicker.spinner',
      mouseup_sp: 'mouseup.bjui.datepicker.spinner',
      change_ym: 'change.bjui.datepicker.ym',
      click_time: 'click.bjui.datepicker.time',
      keydown_time: 'keydown.bjui.datepicker.time',
      keyup_time: 'keyup.bjui.datepicker.time'
    };
  };

  Datepicker.DEFAULTS = {
    pattern: 'yyyy-MM-dd',
    minDate: '1900-01-01',
    maxDate: '2099-12-31',
    mmStep: 1,
    ssStep: 1
  };
  Datepicker.EVENTS = {
    afterChange: 'afterchange.bjui.datepicker'
  };

  Datepicker.prototype.TOOLS = function () {
    var that = this;
    var tools = {
      changeTmMenu: function changeTmMenu(sltClass) {
        $tm.removeClass('hh').removeClass('mm').removeClass('ss');

        if (sltClass) {
          $tm.addClass(sltClass);
          $timeinps.removeClass('slt').filter('.' + sltClass).addClass('slt');
        }
      },
      clickTmMenu: function clickTmMenu($input, type) {
        $tm.find('> ul').hide().filter('.' + type).show().find('> li').off(that.events.click_tm).on(that.events.click_tm, function () {
          var $li = $(this);
          var val = parseInt($li.text()) < 10 ? '0' + $li.text() : $li.text();
          $input.val(val);
        });
      },
      keydownInt: function keydownInt(e) {
        if (!(e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode === BJUI.keyCode.DELETE || e.keyCode === BJUI.keyCode.BACKSPACE)) {
          return false;
        }
      },
      changeTm: function changeTm($input, $btn) {
        var ivalue = parseInt($input.val());
        var istart = parseInt($input.data('start')) || 0;
        var iend = parseInt($input.data('end'));
        var istep = parseInt($input.data('step') || 1);
        var type = $btn ? $btn.data('add') ? $btn.data('add') : -1 : 0;
        var newVal = ivalue;

        if (type === 1) {
          if (ivalue <= iend - istep) {
            newVal = ivalue + istep;
          }
        } else if (type === -1) {
          if (ivalue >= istart + istep) {
            newVal = ivalue - istep;
          }
        } else if (ivalue > iend) {
          newVal = iend;
        } else if (ivalue < istart) {
          newVal = istart;
        }

        if (newVal < 10) newVal = '0' + newVal;
        $input.val(newVal);
      },
      closeCalendar: function closeCalendar(flag) {
        tools.changeTmMenu();

        if (flag) {
          $(document).off(that.events.click_close);
          $box.hide();
        }
      },
      get: function get(name) {
        return that.options[name];
      },
      getDays: function getDays(y, m) {
        return m === 2 ? y % 4 || !(y % 100) && y % 400 ? 28 : 29 : /4|6|9|11/.test(m) ? 30 : 31;
      },
      minMaxDate: function minMaxDate(sDate) {
        var _count = sDate.split('-').length - 1;

        var _format = 'y-M-d';
        if (_count === 1) _format = 'y-M';else if (_count === 0) _format = 'y';
        return sDate.parseDate(_format);
      },
      getMinDate: function getMinDate() {
        return this.minMaxDate(that.options.minDate);
      },
      getMaxDate: function getMaxDate() {
        var _sDate = that.options.maxDate;

        var _count = _sDate.split('-').length - 1;

        var _date = this.minMaxDate(_sDate);

        if (_count < 2) {
          // format:y-M、y
          var _day = this.getDays(_date.getFullYear(), _date.getMonth() + 1);

          _date.setDate(_day);

          if (_count === 0) {
            // format:y
            _date.setMonth(11);
          }
        }

        return _date;
      },
      getDateWrap: function getDateWrap(date) {
        if (!date) date = this.parseDate(that.sDate) || new Date();
        var y = date.getFullYear();
        var m = date.getMonth() + 1;
        var days = this.getDays(y, m);
        return {
          year: y,
          month: m,
          day: date.getDate(),
          hour: date.getHours(),
          minute: date.getMinutes(),
          second: date.getSeconds(),
          days: days,
          date: date
        };
      },
      changeDate: function changeDate(y, m, d) {
        var date = new Date(y, m - 1, d || 1);
        that.sDate = this.formatDate(date);
        return date;
      },
      changeDateTime: function changeDateTime(y, M, d, H, m, s) {
        var date = new Date(y, M - 1, d, H, m, s);
        that.sDate = this.formatDate(date);
        return date;
      },
      changeDay: function changeDay(day, chMonth) {
        if (!chMonth) chMonth = 0;
        var dw = this.getDateWrap();
        return this.changeDate(dw.year, dw.month + parseInt(chMonth), day);
      },
      changeMonth: function changeMonth(type) {
        var yearIndex = $year.get(0).selectedIndex;
        var maxYear = $year.find('option').length;
        var month = $month.val() * 1 + type;

        if (month === 0) {
          if (yearIndex === 0) {
            month = 1;
          } else {
            month = 12;
            yearIndex--;
            $year.get(0).selectedIndex = yearIndex;
          }
        } else if (month === 13) {
          if (yearIndex === maxYear - 1) {
            month = 12;
          } else {
            month = 1;
            yearIndex++;
            $year.get(0).selectedIndex = yearIndex;
          }
        }

        $month.val(month).change();
      },
      parseDate: function parseDate(sDate) {
        if (!sDate) return null;
        return sDate.parseDate(that.options.pattern);
      },
      formatDate: function formatDate(date) {
        return date.formatDate(that.options.pattern);
      },
      hasHour: function hasHour() {
        return that.options.pattern.indexOf('H') !== -1;
      },
      hasMinute: function hasMinute() {
        return that.options.pattern.indexOf('m') !== -1;
      },
      hasSecond: function hasSecond() {
        return that.options.pattern.indexOf('s') !== -1;
      },
      hasTime: function hasTime() {
        return this.hasHour() || this.hasMinute() || this.hasSecond();
      },
      hasDate: function hasDate() {
        var _dateKeys = ['y', 'M', 'd', 'E'];

        for (var i = 0; i < _dateKeys.length; i++) {
          if (that.options.pattern.indexOf(_dateKeys[i]) !== -1) return true;
        }

        return false;
      },
      afterChange: function afterChange(date) {
        that.$element.trigger(Datepicker.EVENTS.afterChange, {
          value: date
        });
      }
    };
    return tools;
  };

  Datepicker.prototype.addBtn = function () {
    var that = this;
    var $element = that.$element;

    if (!this.$dateBtn && !this.options.addbtn && !$element.parent().hasClass('wrap_bjui_btn_box')) {
      this.$dateBtn = $(FRAG.dateBtn);
      this.$element.css({
        'paddingRight': '15px'
      }).wrap('<span class="wrap_bjui_btn_box"></span>');
      var $box = this.$element.parent();
      var height = this.$element.addClass('form-control').innerHeight();
      $box.css({
        'position': 'relative',
        'display': 'inline-block'
      });
      this.$dateBtn.css({
        'height': height,
        'lineHeight': height + 'px'
      }).appendTo($box);
      this.$dateBtn.on('selectstart', function () {
        return false;
      });
    }
  };

  Datepicker.prototype.init = function () {
    if (this.$element.val()) this.sDate = this.$element.val().trim();
    var that = this;
    var tools = this.tools;
    var dw = tools.getDateWrap();
    var minDate = tools.getMinDate();
    var maxDate = tools.getMaxDate();
    var yearstart = minDate.getFullYear();
    var yearend = maxDate.getFullYear();
    $year.empty();

    for (var y = yearstart; y <= yearend; y++) {
      $year.append('<option value="' + y + '"' + (dw.year === y ? ' selected' : '') + '>' + y + '</option>');
    }

    $month.val(dw.month);
    $year.add($month).off(this.events.change_ym).on(this.events.change_ym, function () {
      var $day;
      var date;

      if (tools.hasTime()) {
        $day = $days.find('.slt');
        date = tools.changeDateTime($year.val(), $month.val(), $day.data('day'), dw.hour, dw.minute, dw.second);
        that.create(tools.getDateWrap(date), minDate, maxDate);
      } else {
        $day = $days.find('.slt');
        date = tools.changeDate($year.val(), $month.val(), $day.data('day'));
        that.create(tools.getDateWrap(date), minDate, maxDate);
      }
    });
    $prev.off(this.events.click_prev).on(this.events.click_prev, function () {
      that.tools.changeMonth(-1);
    });
    $next.off(this.events.click_prev).on(this.events.click_prev, function () {
      that.tools.changeMonth(1);
    });
    $clearBtn.off(this.events.click_clear).on(this.events.click_clear, function () {
      that.$element.val('');
      tools.closeCalendar(true);
    });
    $okBtn.off(this.events.click_ok).on(this.events.click_ok, function () {
      var $dd = $days.find('dd.slt');
      if ($dd.hasClass('disabled')) return false;
      var date = tools.changeDay($dd.data('day'), $dd.data('month'));

      if (tools.hasTime()) {
        date.setHours(parseInt($hh.val()));
        date.setMinutes(parseInt($mm.val()));
        date.setSeconds(parseInt($ss.val()));
      }

      tools.closeCalendar(true);
      that.$element.val(tools.formatDate(date)).focus(); // changedEvent

      tools.afterChange(date);
    });
    $close.off(this.events.click_close).on(this.events.click_close, function () {
      tools.closeCalendar(true);
    });
    $(document).on(this.events.click_close, function (e) {
      var $target = $(e.target);
      if (e.target === that.$element.get(0)) return;
      if ($target.closest('#calendar').length) return;

      if ($target.data('toggle') === 'datepicker' || $target.parent().data('toggle') === 'datepickerbtn' || $target.data('toggle') === 'datepickerbtn') {
        tools.closeCalendar(false);
      } else {
        tools.closeCalendar(true);
      }
    });
    this.create(dw, minDate, maxDate);
  };

  Datepicker.prototype.create = function (dw, minDate, maxDate) {
    var that = this;
    var options = this.options;
    var tools = this.tools;
    var monthStart = new Date(dw.year, dw.month - 1, 1);
    var startDay = monthStart.getDay();
    var dayStr = '';

    var _date;

    var _ctrClass;

    var t;

    if (startDay > 0) {
      monthStart.setMonth(monthStart.getMonth() - 1);
      var prevDateWrap = tools.getDateWrap(monthStart);

      for (t = prevDateWrap.days - startDay + 1; t <= prevDateWrap.days; t++) {
        _date = new Date(dw.year, dw.month - 2, t);
        _ctrClass = _date >= minDate && _date <= maxDate ? '' : ' disabled';
        dayStr += '<dd class="other' + _ctrClass + '" data-month="-1" data-day="' + t + '">' + t + '</dd>';
      }
    }

    for (t = 1; t <= dw.days; t++) {
      _date = new Date(dw.year, dw.month - 1, t);
      _ctrClass = _date >= minDate && _date <= maxDate ? '' : 'disabled';

      if (t === dw.day) {
        _ctrClass += ' slt';
      }

      dayStr += '<dd class="' + _ctrClass + '" data-day="' + t + '">' + t + '</dd>';
    }

    for (t = 1; t <= 42 - startDay - dw.days; t++) {
      _date = new Date(dw.year, dw.month, t);
      _ctrClass = _date >= minDate && _date <= maxDate ? '' : ' disabled';
      dayStr += '<dd class="other' + _ctrClass + '" data-month="1" data-day="' + t + '">' + t + '</dd>';
    }

    var $alldays = $days.html(dayStr).find('dd');
    $alldays.not('.disabled').off(this.events.click_days).on(this.events.click_days, function () {
      var $day = $(this);

      if (!tools.hasTime()) {
        var date = tools.changeDay($day.data('day'), $day.data('month'));
        tools.closeCalendar(true);
        that.$element.val(tools.formatDate(date)).focus(); // changedEvent

        tools.afterChange(date);
      } else {
        $alldays.removeClass('slt');
        $day.addClass('slt');
      }
    });

    if (!tools.hasDate()) {
      $main.addClass('nodate'); // only time
    } else {
      $main.removeClass('nodate');
    }

    if (tools.hasTime()) {
      $time.show();
      $hh.val(dw.hour < 10 ? '0' + dw.hour : dw.hour).off(this.events.focus_time).on(this.events.focus_time, function () {
        tools.changeTmMenu('hh');
      });
      var iMinute = parseInt(dw.minute / options.mmStep) * options.mmStep;
      $mm.val(iMinute < 10 ? '0' + iMinute : iMinute).data('step', options.mmStep).off(this.events.focus_time).on(this.events.focus_time, function () {
        tools.changeTmMenu('mm');
      });
      $ss.val(tools.hasSecond() ? dw.second < 10 ? '0' + dw.second : dw.second : '00').data('step', options.ssStep).off(this.events.focus_time).on(this.events.focus_time, function () {
        tools.changeTmMenu('ss');
      });
      $box.off('click').on('click', function (e) {
        if ($(e.target).closest('.time').length) return;
        $tm.find('> ul').hide();
        tools.changeTmMenu();
      });
      $timeinps.off(this.events.keydown_time).on(this.events.keydown_time, tools.keydownInt).each(function () {
        var $input = $(this);
        $input.off(that.events.keyup_time).on(that.events.keyup_time, function () {
          tools.changeTm($input);
        });
      }).off(this.events.click_time).on(this.events.click_time, function () {
        tools.clickTmMenu($(this), $(this).data('type'));
      });
      var timer = null;
      $spinner.off(this.events.click_spinner).on(this.events.click_spinner, function (e) {
        var $btn = $(this);
        $timeinps.filter('.slt').each(function () {
          tools.changeTm($(this), $btn);
        });
        e.preventDefault();
      }).off(this.events.mousedown_sp).on(this.events.mousedown_sp, function (e) {
        var $btn = $(this);
        timer = setInterval(function () {
          $timeinps.filter('.slt').each(function () {
            tools.changeTm($(this), $btn);
          });
        }, 150);
      }).off(this.events.mouseup_sp).on(this.events.mouseup_sp, function (e) {
        clearTimeout(timer);
      });
      if (!tools.hasHour()) $hh.attr('disabled', true);
      if (!tools.hasMinute()) $mm.attr('disabled', true);
      if (!tools.hasSecond()) $ss.attr('disabled', true);
    } else {
      $time.hide();
    }

    this.show();
  };

  Datepicker.prototype.show = function () {
    var offset = this.$element.offset();
    var iTop = offset.top + this.$element.get(0).offsetHeight; // fix top

    var iBoxH = $box.outerHeight(true);

    if (iTop > iBoxH && iTop > $(window).height() - iBoxH) {
      iTop = offset.top - iBoxH;
    }

    $box.css({
      left: offset.left,
      top: iTop
    }).show().click(function (e) {
      e.stopPropagation();
    });
  }; // DATEPICKER PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, Datepicker.DEFAULTS, $this.data(), _typeof(option) === 'object' && option);
      var data = $this.data('bjui.datepicker');
      if (!data) $this.data('bjui.datepicker', data = new Datepicker(this, options));

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      } else {
        data.init();
      }
    });
  }

  var old = $.fn.datepicker;
  $.fn.datepicker = Plugin;
  $.fn.datepicker.Constructor = Datepicker; // DATEPICKER NO CONFLICT
  // =================

  $.fn.datepicker.noConflict = function () {
    $.fn.datepicker = old;
    return this;
  }; // DATEPICKER DATA-API
  // ==============


  $(document).on(BJUI.eventType.initUI, function (e) {
    var $this = $(e.target).find('[data-toggle="datepicker"]');
    if (!$this.length) return;
    if ($this.data('nobtn')) return;
    Plugin.call($this, 'addBtn');
  });
  $(document).on('click.bjui.datepicker.data-api', '[data-toggle="datepickerbtn"]', function (e) {
    var $date = $(this).prevAll('[data-toggle="datepicker"]');
    if (!$date || !$date.is(':text')) return;
    Plugin.call($date, $date.data());
    e.preventDefault();
  });
  $(document).on('click.bjui.datepicker.data-api', '[data-toggle="datepicker"]', function (e) {
    var $this = $(this);
    if ($this.data('onlybtn')) return;
    if (!$this.is(':text')) return;
    Plugin.call($this, $this.data());
    e.preventDefault();
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-dialog.js":
/*!*******************************!*\
  !*** ./src/js/bjui-dialog.js ***!
  \*******************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-dialog.js  v1.2
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.dialog.js, dwz.dialogDrag.js, dwz.resize.js (author:Roger Wu)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-dialog.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // DIALOG GLOBAL ELEMENTS
  // ======================

  var $current, shadow, zindex;
  $(function () {
    var INIT_DIALOG = function INIT_DIALOG() {
      shadow = 'dialogShadow';
      zindex = Dialog.ZINDEX;
      $('body').append('<!-- dialog resizable -->').append(FRAG.resizable);
    };

    INIT_DIALOG();
  }); // DIALOG CLASS DEFINITION
  // ======================

  var Dialog = function Dialog(element, options) {
    this.$element = $(element);
    this.options = options;
    this.tools = this.TOOLS();
  };

  Dialog.DEFAULTS = {
    id: 'dialog',
    title: 'New Dialog',
    url: undefined,
    type: 'GET',
    data: {},
    loadingmask: true,
    width: 500,
    height: 300,
    minW: 65,
    minH: 40,
    max: false,
    mask: false,
    resizable: true,
    drawable: true,
    maxable: true,
    minable: true,
    fresh: false,
    onLoad: null,
    beforeClose: null,
    onClose: null
  };
  Dialog.ZINDEX = 30;

  Dialog.prototype.TOOLS = function () {
    var that = this;
    return {
      getDefaults: function getDefaults() {
        return $.extend(Dialog.DEFAULTS, BJUI.dialog);
      },
      init: function init($dialog) {
        var width = that.options.width > that.options.minW ? that.options.width : that.options.minW;
        var height = that.options.height > that.options.minH ? that.options.height : that.options.minH;
        var wW = $(window).width();
        var wH = $(window).height();
        var iTop = that.options.max ? 0 : (wH - height) / 2;
        if (width > wW) width = wW;
        if (height > wH) height = wH;
        $dialog.height(height).width(width).show().css({
          left: (wW - width) / 2,
          top: 0,
          opacity: 0.1
        }).animate({
          top: iTop > 0 ? iTop : 0,
          opacity: 1
        }).addClass(shadow).find('> .dialogContent').height(height - $('> .dialogHeader', $dialog).outerHeight() - 6);
        $('body').find('> .bjui-dialog-container').not($dialog).removeClass(shadow);
      },
      reload: function reload($dialog, options) {
        var $dialogContent = $dialog.find('> .dialogContent');
        var onLoad;
        options = options || $dialog.data('initOptions');
        onLoad = options.onLoad ? options.onLoad.toFunc() : null;
        $dialog.trigger(BJUI.eventType.beforeLoadDialog);
        BJUI.ModuleFixed.destroyModules($dialog);

        if (options.data) {
          options.data = _typeof(options.data) === 'object' ? options.data : options.data.toObj();
        }

        if (options.url) {
          $dialogContent.ajaxUrl({
            type: options.type || 'GET',
            url: options.url,
            data: options.data || {},
            loadingmask: options.loadingmask,
            callback: function callback(response) {
              if (onLoad) onLoad.apply(that, [$dialog]);
              if (BJUI.ui.clientPaging && $dialog.data('bjui.clientPaging')) $dialog.pagination('setPagingAndOrderby', $dialog);
            }
          });
        } else if (options.target) {
          var html = $(options.target).html() || $dialog.data('bjui.dialog.target');
          $(options.target).empty();
          $dialog.data('bjui.dialog.target', html);
          $dialogContent.trigger(BJUI.eventType.beforeAjaxLoad).html(html).initui();
          if (onLoad) onLoad.apply(that, [$dialog]);
        }
      },
      resizeContent: function resizeContent($dialog, width, height) {
        var $dialogContent = $dialog.find('> .dialogContent');
        $dialogContent.css({
          width: width - 12,
          height: height - $dialog.find('> .dialogHeader').outerHeight() - 6
        }).resizePageH();
        $(window).trigger(BJUI.eventType.resizeGrid);
      }
    };
  };

  Dialog.prototype.open = function () {
    var that = this;
    var options = that.options;
    var $body = $('body');
    var $dialog = $body.data(options.id);

    if (!options.target || !$(options.target).length) {
      if (!options.url && options.href) options.url = options.href;

      if (!options.url) {
        BJUI.debug('Dialog Plugin: Error trying to open a dialog, url is undefined!');
        return;
      } else {
        options.url = decodeURI(options.url).replacePlh(that.$element.closest('.unitBox'));

        if (!options.url.isFinishedTm()) {
          that.$element.alertmsg('error', options.warn || FRAG.alertPlhMsg.replace('#plhmsg#', BJUI.regional.plhmsg));
          BJUI.debug('Dialog Plugin: The new dialog\'s url is incorrect, url: ' + options.url);
          return;
        }

        options.url = encodeURI(options.url);
      }
    } else {
      options.url = undefined;
    }

    if ($dialog) {
      // if the dialog id already exists
      var op = $dialog.data('initOptions') || options;
      this.switchDialog($dialog);
      if ($dialog.is(':hidden')) $dialog.show();

      if (op.fresh || options.fresh || !op.url || op.url !== options.url) {
        that.reload(options);
        $dialog.data('initOptions', options);
      }
    } else {
      // open a new dialog
      var dr = BJUI.regional.dialog;
      var dialog = FRAG.dialog.replace('#close#', dr.close).replace('#maximize#', dr.maximize).replace('#restore#', dr.restore).replace('#minimize#', dr.minimize).replace('#title#', dr.title);
      $dialog = $(dialog).data('options', options).data('initOptions', options).css('zIndex', zindex += 1).hide().appendTo($body);
      $dialog.find('> .dialogHeader > h1 > span.title').html(options.title);
      this.tools.init($dialog);
      if (options.maxable) $dialog.find('a.maximize').show();else $dialog.find('a.maximize').hide();
      if (options.minable) $dialog.find('a.minimize').show();else $dialog.find('a.minimize').hide();
      if (options.max) that.maxsize($dialog);
      if (options.mask) this.addMask($dialog);else if (options.minable && $.fn.taskbar) this.$element.taskbar({
        id: options.id,
        title: options.title
      });
      $dialog.on('click', function (e) {
        if (!$(e.target).data('bjui.dialog')) {
          if ($current && $current[0] !== $dialog[0]) that.switchDialog($dialog);
        }
      }).on('click', '.btn-close', function (e) {
        that.close($dialog);
        e.preventDefault();
      }).on('click', '.dialogHeader > a', function (e) {
        var $a = $(this);
        if ($a.hasClass('close')) that.close($dialog);

        if ($a.hasClass('minimize')) {
          that.minimize($dialog);
        }

        if ($a.hasClass('maximize')) {
          that.switchDialog($dialog);
          that.maxsize($dialog);
        }

        if ($a.hasClass('restore')) that.restore($dialog);
        e.preventDefault();
        e.stopPropagation();
      }).on('dblclick', '.dialogHeader > h1', function (e) {
        if (options.maxable) {
          if ($dialog.find('> .dialogHeader > a.restore').is(':hidden')) $dialog.find('a.maximize').trigger('click');else $dialog.find('> .dialogHeader > a.restore').trigger('click');
        }
      }).on('mousedown.bjui.dialog.drag', '.dialogHeader > h1', function (e) {
        that.switchDialog($dialog);
        if (!options.drawable || $dialog.data('max')) return;
        $dialog.data('bjui.dialog.task', true);
        setTimeout($.proxy(function () {
          if ($dialog.data('bjui.dialog.task')) that.drag(e, $dialog);
        }, that), 150);
        e.preventDefault();
      }).on('mouseup.bjui.dialog.drag', '.dialogHeader > h1', function (e) {
        $dialog.data('bjui.dialog.task', false);
      }).on('mousedown.bjui.dialog.resize', 'div[class^="resizable"]', function (e) {
        if (!options.drawable || $dialog.data('max')) return;
        var $bar = $(this);
        that.switchDialog($dialog);
        that.resizeInit(e, $('#bjui-resizable'), $dialog, $bar);
        $bar.show();
        e.preventDefault();
      }).on('mouseup.bjui.dialog.resize', 'div[class^="resizable"]', function (e) {
        e.preventDefault();
      });
      $body.data(options.id, $dialog);
      this.tools.reload($dialog, options);
    }

    $.CurrentDialog = $current = $dialog;
  };

  Dialog.prototype.addMask = function ($dialog) {
    var $mask = $dialog.data('bjui.dialog.mask');
    $dialog.wrap('<div style="z-index:' + zindex + '" class="bjui-dialog-wrap"></div>');
    $dialog.find('> .dialogHeader > a.minimize').hide();

    if (!$mask || !$mask.length) {
      $mask = $(FRAG.dialogMask);
      $mask.css('zIndex', 1).show().insertBefore($dialog);
      $dialog.data('bjui.dialog.mask', $mask);
    }
  };

  Dialog.prototype.refresh = function (id) {
    if (id && typeof id === 'string') {
      var arr = id.split(',');

      for (var i = 0; i < arr.length; i++) {
        var $dialog = $('body').data(arr[i].trim());

        if ($dialog) {
          $dialog.removeData('bjui.clientPaging');
          this.tools.reload($dialog);
        }
      }
    } else {
      $current.removeData('bjui.clientPaging');
      this.tools.reload($current);
    }
  };

  Dialog.prototype.reload = function (option, initOptionFlag) {
    var that = this;
    var options = $.extend({}, _typeof(option) === 'object' && option);
    var $dialog = options.id && $('body').data(options.id) || that.getCurrent();

    if ($dialog && $dialog.length) {
      var initOptions = $dialog.data('initOptions');
      var op = $.extend({}, initOptions, options);

      var _reload = function _reload() {
        var $dialogContent = $dialog.find('> .dialogContent');

        if (initOptions.width !== op.width) {
          if (!op.max) {
            $dialog.animate({
              width: op.width
            }, 'normal', function () {
              $dialogContent.width(op.width);
            });
          } else {
            $dialog.width(op.width);
            $dialogContent.width(op.width);
          }
        }

        if (initOptions.height !== op.height) {
          if (!op.max) {
            $dialog.animate({
              height: op.height
            }, 'normal', function () {
              $dialogContent.height(op.height - $dialog.find('> .dialogHeader').outerHeight() - 6).resizePageH();
            });
          } else {
            $dialog.height(op.height);
            $dialogContent.height(op.height - $dialog.find('> .dialogHeader').outerHeight() - 6);
          }
        }

        if (initOptions.maxable !== op.maxable) {
          if (op.maxable) $dialog.find('a.maximize').show();else $dialog.find('a.maximize').hide();
        }

        if (initOptions.minable !== op.minable) {
          if (op.minable) $dialog.find('a.minimize').show();else $dialog.find('a.minimize').hide();
        }

        if (initOptions.max !== op.max && op.max) setTimeout(that.maxsize($dialog), 10);

        if (initOptions.mask !== op.mask) {
          if (op.mask) {
            that.addMask($dialog);
            if ($.fn.taskbar) that.$element.taskbar('closeDialog', op.id);
          } else if (op.minable && $.fn.taskbar) {
            that.$element.taskbar({
              id: op.id,
              title: op.title
            });
          }
        }

        if (initOptions.title !== op.title) {
          $dialog.find('> .dialogHeader > h1 > span.title').html(op.title);
          $dialog.taskbar('changeTitle', op.id, op.title);
        }

        $dialog.data('options', op);
        if (!initOptionFlag) $dialog.data('initOptions', op);
        that.tools.reload($dialog, op);
      };

      if (op.reloadWarn) {
        $dialog.alertmsg('confirm', op.reloadWarn, {
          okCall: function okCall() {
            _reload();
          }
        });
      } else {
        _reload();
      }
    }
  };

  Dialog.prototype.reloadForm = function (clearQuery, option) {
    var $dialog, options;

    if (typeof option === 'string') {
      $dialog = $('body').data(option);
      options = $dialog.data('options');
    } else if (_typeof(option) === 'object') {
      $dialog = option.id && $('body').data(option.id) || this.getCurrent();
    }

    if ($dialog) {
      if (_typeof(option) === 'object') {
        if (option.title) $dialog.find('> .dialogHeader > h1 > span.title').html(option.title);
        options = $.extend({}, option, $dialog.data('options'));
      }

      var $pagerForm = $dialog.find('#pagerForm');
      var data = {};
      var pageData = {};
      if ($pagerForm.attr('action')) options.url = $pagerForm.attr('action');

      if ($pagerForm && $pagerForm.length) {
        pageData = $pagerForm.serializeJson();
        if (!option || !option.type) options.type = $pagerForm.attr('method') || 'POST';

        if (clearQuery) {
          var pageInfo = BJUI.pageInfo;

          for (var key in pageInfo) {
            if (pageInfo.hasOwnProperty(key)) {
              data[pageInfo[key]] = pageData[pageInfo[key]];
            }
          }
        } else {
          data = pageData;
        }

        options.data = $.extend({}, options.data || {}, data);
      }

      this.reload(options, true);
    }
  };

  Dialog.prototype.getCurrent = function () {
    return $current;
  };

  Dialog.prototype.switchDialog = function ($dialog) {
    var index = $dialog.css('zIndex');

    if ($current && $current !== $dialog) {
      var cindex = $current.css('zIndex');
      $current.css('zIndex', index);
      $dialog.css('zIndex', cindex);
      $.CurrentDialog = $current = $dialog;
      if ($.fn.taskbar) this.$element.taskbar('switchTask', $dialog.data('options').id);
    }

    $dialog.addClass(shadow);
    $('body').find('> .bjui-dialog-container').not($dialog).removeClass(shadow);
  };

  Dialog.prototype.close = function (dialog) {
    var that = this;
    var $dialog = typeof dialog === 'string' ? $('body').data(dialog) : dialog;
    var $mask = $dialog.data('bjui.dialog.mask');
    var options = $dialog.data('options');
    var target = $dialog.data('bjui.dialog.target');
    var beforeClose = options.beforeClose ? options.beforeClose.toFunc() : null;
    var onClose = options.onClose ? options.onClose.toFunc() : null;
    var canClose = true;
    if (!$dialog || !options) return;
    if (beforeClose) canClose = beforeClose.apply(that, [$dialog]);

    if (!canClose) {
      that.switchDialog($dialog);
      return;
    }

    BJUI.ModuleFixed.destroyModules($dialog);
    if (options.target && target) $(options.target).html(target);

    if ($mask && $mask.length) {
      $mask.remove();
      $dialog.unwrap();
    } else if ($.fn.taskbar) {
      this.$element.taskbar('closeDialog', options.id);
    }

    $dialog.animate({
      top: -$dialog.outerHeight(),
      opacity: 0.1
    }, 'normal', function () {
      var $body = $('body');
      $body.removeData(options.id);
      $dialog.trigger(BJUI.eventType.beforeCloseDialog).remove();
      if (onClose) onClose.apply(that);
      var $dialogs = $body.find('.bjui-dialog-container');
      var $_current = null;

      if ($dialogs.length) {
        $_current = that.$element.getMaxIndexObj($dialogs);
      } else {
        zindex = Dialog.ZINDEX;
      }

      if ($_current && $_current.is(':visible')) that.switchDialog($_current);
    });
  };

  Dialog.prototype.closeCurrent = function () {
    this.close($current);
  };

  Dialog.prototype.checkTimeout = function () {
    var $dialogConetnt = $current.find('> .dialogContent');
    var json = JSON.parse($dialogConetnt.html());
    if (json && json[BJUI.keys.statusCode] === BJUI.statusCode.timeout) this.closeCurrent();
  };

  Dialog.prototype.maxsize = function ($dialog) {
    $dialog.data('original', {
      top: $dialog.css('top'),
      left: $dialog.css('left'),
      width: $dialog.css('width'),
      height: $dialog.css('height')
    }).data('max', true);
    $dialog.find('> .dialogHeader > a.maximize').hide();
    $dialog.find('> .dialogHeader > a.restore').show();
    var iContentW = $(window).width();
    var iContentH = $(window).height() - $('#bjui-taskbar').height() - 1;
    $dialog.css({
      top: 0,
      left: 0,
      width: iContentW,
      height: iContentH
    });
    this.tools.resizeContent($dialog, iContentW, iContentH);
  };

  Dialog.prototype.restore = function ($dialog) {
    var original = $dialog.data('original');
    var dwidth = parseInt(original.width);
    var dheight = parseInt(original.height);
    $dialog.css({
      top: original.top,
      left: original.left,
      width: dwidth,
      height: dheight
    });
    this.tools.resizeContent($dialog, dwidth, dheight);
    $dialog.find('> .dialogHeader > a.maximize').show();
    $dialog.find('> .dialogHeader > a.restore').hide();
    $dialog.data('max', false);
  };

  Dialog.prototype.minimize = function ($dialog) {
    $dialog.hide();
    if ($.fn.taskbar) this.$element.taskbar('minimize', $dialog);
  };

  Dialog.prototype.drag = function (e, $dialog) {
    $dialog.find('> .dialogContent').css('opacity', '.3');
    $dialog.basedrag({
      selector: '> .dialogHeader',
      stop: function stop() {
        $dialog.css({
          left: $dialog.css('left'),
          top: $dialog.css('top')
        }).find('> .dialogContent').css('opacity', 1);
      },
      event: e,
      nounbind: true
    });
  };

  Dialog.prototype.resizeDialog = function ($resizable, $dialog, target) {
    var oleft = parseInt($resizable.css('left'));
    var otop = parseInt($resizable.css('top'));
    var height = parseInt($resizable.css('height'));
    var width = parseInt($resizable.css('width'));
    if (otop < 0) otop = 0;
    $dialog.css({
      top: otop,
      left: oleft,
      width: width + 2,
      height: height + 1
    }).find('> .dialogContent').css('width', width - 10);

    if (target !== 'w' && target !== 'e') {
      var $dialogContent = $dialog.find('> .dialogContent');
      $dialogContent.css({
        height: height - $dialog.find('> .dialogHeader').outerHeight() - 6
      }).resizePageH();
    }

    $(window).trigger(BJUI.eventType.resizeGrid);
  };

  Dialog.prototype.resizeInit = function (e, $resizable, $dialog, $bar) {
    var that = this;
    var target = $bar.attr('tar');
    $('body').css('cursor', target + '-resize');
    $resizable.css({
      top: $dialog.css('top'),
      left: $dialog.css('left'),
      height: $dialog.outerHeight(),
      width: $dialog.css('width')
    }).show();

    if (!this.options.dragCurrent) {
      this.options.dragCurrent = {
        $resizable: $resizable,
        $dialog: $dialog,
        target: target,
        oleft: parseInt($resizable.css('left')) || 0,
        owidth: parseInt($resizable.css('width')) || 0,
        otop: parseInt($resizable.css('top')) || 0,
        oheight: parseInt($resizable.css('height')) || 0,
        ox: e.pageX || e.screenX,
        oy: e.pageY || e.clientY
      };
      $(document).on('mouseup.bjui.dialog.resize', $.proxy(that.resizeStop, that));
      $(document).on('mousemove.bjui.dialog.resize', $.proxy(that.resizeStart, that));
    }
  };

  Dialog.prototype.resizeStart = function (e) {
    var current = this.options.dragCurrent;
    if (!current) return;
    if (!e) e = window.event;
    var lmove = (e.pageX || e.screenX) - current.ox;
    var tmove = (e.pageY || e.clientY) - current.oy;
    var $mask = current.$dialog.data('bjui.dialog.mask');

    if (!$mask || !$mask.length) {
      if ((e.pageY || e.clientY) <= 0 || (e.pageY || e.clientY) >= $(window).height() - current.$dialog.find('> .dialogHeader').outerHeight()) return;
    }

    var target = current.target;
    var width = current.owidth;
    var height = current.oheight;

    if (target !== 'n' && target !== 's') {
      width += target.indexOf('w') >= 0 ? -lmove : lmove;
    }

    if (width >= this.options.minW) {
      if (target.indexOf('w') >= 0) {
        current.$resizable.css('left', current.oleft + lmove);
      }

      if (target !== 'n' && target !== 's') {
        current.$resizable.css('width', width);
      }
    }

    if (target !== 'w' && target !== 'e') {
      height += target.indexOf('n') >= 0 ? -tmove : tmove;
    }

    if (height >= this.options.minH) {
      if (target.indexOf('n') >= 0) {
        current.$resizable.css('top', current.otop + tmove);
      }

      if (target !== 'w' && target !== 'e') {
        current.$resizable.css('height', height);
      }
    }
  };

  Dialog.prototype.resizeStop = function (e) {
    var current = this.options.dragCurrent;
    if (!current) return false;
    $(document).off('mouseup.bjui.dialog.resize');
    $(document).off('mousemove.bjui.dialog.resize');
    this.options.dragCurrent = null;
    this.resizeDialog(current.$resizable, current.$dialog, current.target);
    $('body').css('cursor', '');
    current.$resizable.hide();
  }; // DIALOG PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, Dialog.DEFAULTS, BJUI.dialog, _typeof(option) === 'object' && option);
      var data = $this.data('bjui.dialog');
      if (!data) $this.data('bjui.dialog', data = new Dialog(this, options));

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      } else {
        data = new Dialog(this, options);
        data.open();
      }
    });
  }

  var old = $.fn.dialog;
  $.fn.dialog = Plugin;
  $.fn.dialog.Constructor = Dialog; // DIALOG NO CONFLICT
  // =================

  $.fn.dialog.noConflict = function () {
    $.fn.dialog = old;
    return this;
  }; // DIALOG DATA-API
  // ==============


  $(document).on('click.bjui.dialog.data-api', '[data-toggle="dialog"]', function (e) {
    var $this = $(this);
    var href = $this.attr('href');
    var data = $this.data();
    var options = data.options;

    if (options) {
      if (typeof options === 'string') options = options.toObj();

      if (_typeof(options) === 'object') {
        $.extend(data, options);
      }
    }

    if (!data.title) data.title = $this.text();
    if (href && !data.url) data.url = href;
    Plugin.call($this, data);
    e.preventDefault();
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-extends.js":
/*!********************************!*\
  !*** ./src/js/bjui-extends.js ***!
  \********************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-extends.js  v1.2
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.core.js (author:ZhangHuihua@msn.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-extends.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict';

  $.fn.extend({
    /**
     *  @param {Object} op: {type:GET/POST, url:ajax请求地址, data:ajax请求参数列表, callback:回调函数 }
     */
    ajaxUrl: function ajaxUrl(op) {
      var $this = $(this);
      $this.trigger(BJUI.eventType.beforeAjaxLoad);

      if (op.loadingmask) {
        $this.trigger(BJUI.eventType.ajaxStatus);
      }

      $.ajax({
        type: op.type || 'GET',
        url: op.url,
        data: op.data || {},
        cache: false,
        dataType: 'html',
        timeout: BJUI.ajaxTimeout,
        success: function success(response) {
          var json = response.toJson();
          var $ajaxMask = $this.find('> .bjui-ajax-mask');

          if (!json[BJUI.keys.statusCode]) {
            $this.empty().html(response).append($ajaxMask).initui();
            if ($.isFunction(op.callback)) op.callback(response);
          } else {
            if (json[BJUI.keys.statusCode] === BJUI.statusCode.error) {
              if (json[BJUI.keys.message]) $this.alertmsg('error', json[BJUI.keys.message]);

              if (!$this.closest('.bjui-layout').length) {
                if ($this.closest('.navtab-panel').length) $this.navtab('closeCurrentTab');else $this.dialog('closeCurrent');
              }
            } else if (json[BJUI.keys.statusCode] === BJUI.statusCode.timeout) {
              if ($this.closest('.bjui-dialog').length) $this.dialog('closeCurrent');
              if ($this.closest('.navtab-panel').length) $this.navtab('closeCurrentTab');
              $('body').alertmsg('info', json[BJUI.keys.message] || BJUI.regional.sessiontimeout);
              BJUI.loadLogin();
            }

            $ajaxMask.fadeOut('normal', function () {
              $(this).remove();
            });
          }
        },
        error: function error(xhr, ajaxOptions, thrownError) {
          $this.bjuiajax('ajaxError', xhr, ajaxOptions, thrownError);

          if (!$this.closest('.bjui-layout').length) {
            if ($this.closest('.navtab-panel').length) $this.navtab('closeCurrentTab');else $this.dialog('closeCurrent');
          }

          $this.trigger('bjui.ajaxError');
        },
        statusCode: {
          503: function _(xhr, ajaxOptions, thrownError) {
            $this.alertmsg('error', FRAG.statusCode_503.replace('#statusCode_503#', BJUI.regional.statusCode_503) || thrownError);
          },
          // 添加 httpCode 403 超时弹框
          403: function _(xhr, ajaxOptions, thrownError) {
            $this.alertmsg('error', '登录超时' || 0);
            BJUI.loadLogin();
          },
          // 添加 httpCode 401 无权限
          401: function _(xhr, ajaxOptions, thrownError) {
            if (!BJUI.IS_DEBUG) {
              $this.alertmsg('error', '无权限访问' || 0);
            }
          },
          404: function _(xhr, ajaxOptions, thrownError) {
            if (!BJUI.IS_DEBUG) {
              $this.alertmsg('error', ' httpCode: 404 .请求未找到！' || 0);
            }
          },
          500: function _(xhr, ajaxOptions, thrownError) {
            if (!BJUI.IS_DEBUG) {
              $this.alertmsg('error', ' httpCode: 500 .请求失败！' || 0);
            }
          }
        }
      });
    },
    loadUrl: function loadUrl(url, data, callback) {
      $(this).ajaxUrl({
        url: url,
        data: data,
        callback: callback
      });
    },
    doAjax: function doAjax(op) {
      var $this = $(this);
      var $target;
      var $ajaxMask;

      if (!op.url) {
        BJUI.debug('The ajax url is undefined!');
        return;
      }

      if (!op.callback) {
        BJUI.debug('The ajax callback is undefined!');
        return;
      } else {
        op.callback = op.callback.toFunc();
      }

      if (op.loadingmask) {
        $target = $this.getPageTarget();
        $target.trigger(BJUI.eventType.ajaxStatus);
        $ajaxMask = $target.find('> .bjui-ajax-mask');
      }

      if (!op.type) op.type = 'POST';
      if (!op.dataType) op.dataType = 'json';
      if (!op.cache) op.cache = false;
      op.timeout = BJUI.ajaxTimeout;

      op.success = function (response) {
        if ($ajaxMask) {
          if (op.callback) {
            $.when(op.callback(response)).done(function () {
              $target.trigger('bjui.ajaxStop');
            });
          } else {
            $target.trigger('bjui.ajaxStop');
          }
        } else {
          op.callback(response);
        }
      };

      op.error = op.error || function (xhr, ajaxOptions, thrownError) {
        $this.bjuiajax('ajaxError', xhr, ajaxOptions, thrownError);

        if ($ajaxMask) {
          $target.trigger('bjui.ajaxError');
        }
      };

      $.ajax(op);
    },
    getPageTarget: function getPageTarget() {
      var $target;
      if (this.closest('.bjui-layout').length) $target = this.closest('.bjui-layout');else if (this.closest('.navtab-panel').length) $target = $.CurrentNavtab;else $target = $.CurrentDialog;
      return $target;
    },
    resizePageH: function resizePageH() {
      return this.each(function () {
        if ($(this).closest('.tab-content').length) return;
        var $box = $(this);

        if ($box.is(':hidden')) {
          return;
        }

        var $pageHeader = $box.find('> .bjui-pageHeader');
        var $pageContent = $box.find('> .bjui-pageContent');
        var $pageFooter = $box.find('> .bjui-pageFooter');
        var headH = $pageHeader.outerHeight() || 0;
        var footH = $pageFooter.outerHeight() || 0;

        if ($box.hasClass('navtabPage') && $box.is(':hidden')) {
          $box.show();
          headH = $pageHeader.outerHeight() || 0;
          footH = $pageFooter.outerHeight() || 0;
          $box.hide();
        }

        if ($pageFooter.css('bottom')) footH += parseInt($pageFooter.css('bottom')) || 0;
        if (footH === 0 && $box.hasClass('dialogContent')) footH = 5;
        $pageContent.css({
          top: headH,
          bottom: footH
        });
      });
    },
    getMaxIndexObj: function getMaxIndexObj($elements) {
      var zIndex = 0;
      var index = 0;
      $elements.each(function (i) {
        var newZIndex = parseInt($(this).css('zIndex')) || 1;

        if (zIndex < newZIndex) {
          zIndex = newZIndex;
          index = i;
        }
      });
      return $elements.eq(index);
    },

    /**
         * 将表单数据转成JSON对象 用法：$(form).serializeJson() Author: K'naan
         */
    serializeJson: function serializeJson() {
      var o = {};
      var a = this.serializeArray();
      $.each(a, function () {
        if (o[this.name] !== undefined) {
          if (!o[this.name].push) {
            o[this.name] = [o[this.name]];
          }

          o[this.name].push(this.value || '');
        } else {
          o[this.name] = this.value || '';
        }
      });
      return o;
    },
    isTag: function isTag(tn) {
      if (!tn) return false;
      if (!$(this).prop('tagName')) return false;
      return $(this)[0].tagName.toLowerCase() === tn;
    },

    /**
     * 判断当前元素是否已经绑定某个事件
     * @param {Object} type
     */
    isBind: function isBind(type) {
      var _events = $(this).data('events');

      return _events && type && _events[type];
    },

    /**
     * 输出firebug日志
     * @param {Object} msg
     */
    log: function log(msg) {
      return this.each(function () {
        if (console) console.log('%s: %o', msg, this);
      });
    }
  });
  /**
   * 扩展String方法
   */

  $.extend(String.prototype, {
    isPositiveInteger: function isPositiveInteger() {
      return new RegExp(/^[1-9]\d*$/).test(this);
    },
    isInteger: function isInteger() {
      return new RegExp(/^\d+$/).test(this);
    },
    isNumber: function isNumber() {
      return new RegExp(/^([-]{0,1}(\d+)[\.]+(\d+))|([-]{0,1}(\d+))$/).test(this);
    },
    includeChinese: function includeChinese() {
      return new RegExp(/[\u4E00-\u9FA5]/).test(this);
    },
    trim: function trim() {
      return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
    },
    startsWith: function startsWith(pattern) {
      return this.indexOf(pattern) === 0;
    },
    endsWith: function endsWith(pattern) {
      var d = this.length - pattern.length;
      return d >= 0 && this.lastIndexOf(pattern) === d;
    },
    replaceSuffix: function replaceSuffix(index) {
      return this.replace(/\[[0-9]+\]/, '[' + index + ']').replace('#index#', index);
    },
    replaceSuffix2: function replaceSuffix2(index) {
      return this.replace(/\-(i)([0-9]+)$/, '-i' + index).replace('#index#', index);
    },
    trans: function trans() {
      return this.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');
    },
    encodeTXT: function encodeTXT() {
      return this.replaceAll('&', '&amp;').replaceAll('<', '&lt;').replaceAll('>', '&gt;').replaceAll(' ', '&nbsp;');
    },
    replaceAll: function replaceAll(os, ns) {
      return this.replace(new RegExp(os, 'gm'), ns);
    },

    /* 替换占位符为对应选择器的值*/
    // {^(.|\#)[A-Za-z0-9_-\s]*}
    replacePlh: function replacePlh($box) {
      $box = $box || $(document);
      return this.replace(/{\/?[^}]*}/g, function ($1) {
        var $input = $box.find($1.replace(/[{}]+/g, ''));
        return $input && $input.val() ? $input.val() : $1;
      });
    },
    replaceMsg: function replaceMsg(holder) {
      return this.replace(new RegExp('({.*})', 'g'), holder);
    },
    replaceTm: function replaceTm($data) {
      if (!$data) return this;
      return this.replace(RegExp('({[A-Za-z_]+[A-Za-z0-9_-]*})', 'g'), function ($1) {
        return $data[$1.replace(/[{}]+/g, '')];
      });
    },
    replaceTmById: function replaceTmById(_box) {
      var $parent = _box || $(document);

      return this.replace(RegExp('({[A-Za-z_]+[A-Za-z0-9_-]*})', 'g'), function ($1) {
        var $input = $parent.find('#' + $1.replace(/[{}]+/g, ''));
        return $input.val() ? $input.val() : $1;
      });
    },
    isFinishedTm: function isFinishedTm() {
      return !new RegExp('{\/?[^}]*}').test(this);
    },
    skipChar: function skipChar(ch) {
      if (!this || this.length === 0) return '';
      if (this.charAt(0) === ch) return this.substring(1).skipChar(ch);
      return this;
    },
    isValidPwd: function isValidPwd() {
      return new RegExp(/^([_]|[a-zA-Z0-9]){6,32}$/).test(this);
    },
    isValidMail: function isValidMail() {
      return new RegExp(/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/).test(this.trim());
    },
    isSpaces: function isSpaces() {
      for (var i = 0; i < this.length; i += 1) {
        var ch = this.charAt(i);
        if (ch !== ' ' && ch !== '\n' && ch !== '\t' && ch !== '\r') return false;
      }

      return true;
    },
    isPhone: function isPhone() {
      return new RegExp(/(^([0-9]{3,4}[-])?\d{3,8}(-\d{1,6})?$)|(^\([0-9]{3,4}\)\d{3,8}(\(\d{1,6}\))?$)|(^\d{3,8}$)/).test(this);
    },
    isUrl: function isUrl() {
      return new RegExp(/^[a-zA-z]+:\/\/([a-zA-Z0-9\-\.]+)([-\w .\/?%&=:]*)$/).test(this);
    },
    isExternalUrl: function isExternalUrl() {
      return this.isUrl() && this.indexOf('://' + document.domain) === -1;
    },
    toBool: function toBool() {
      return this.toLowerCase() === 'true';
    },
    toJson: function toJson() {
      var json = this;

      try {
        if (_typeof(json) === 'object') json = json.toString();
        if (!json.trim().match('^\{(.+:.+,*){1,}\}$')) return this;else return JSON.parse(this);
      } catch (e) {
        return this;
      }
    },
    toObj: function toObj() {
      var obj = null;

      try {
        obj = new Function('return ' + this)();
      } catch (e) {
        obj = this;
        BJUI.debug('String toObj：Parse "String" to "Object" error! Your str is: ' + this);
      }

      return obj;
    },

    /**
         * String to Function
         * 参数(方法字符串或方法名)： 'function(){...}' 或 'getName' 或 'USER.getName' 均可
         * Author: K'naan
         */
    toFunc: function toFunc() {
      if (!this || this.length === 0) return undefined; // if ($.isFunction(this)) return this

      if (this.startsWith('function')) {
        return new Function('return ' + this)();
      }

      var m_arr = this.split('.');
      var fn = window;

      for (var i = 0; i < m_arr.length; i++) {
        fn = fn[m_arr[i]];
      }

      if (typeof fn === 'function') {
        return fn;
      }

      return undefined;
    },
    setUrlParam: function setUrlParam(key, value) {
      var url = this;
      var r = url;

      if (r != null && r !== 'undefined' && r !== '') {
        value = encodeURIComponent(value);
        var reg = new RegExp('(^|)' + key + '=([^&]*)(|$)');
        var tmp = key + '=' + value;

        if (url.match(reg) != null) {
          r = url.replace(reg, tmp);
        } else {
          if (url.match('[\?]')) {
            r = url + '&' + tmp;
          } else {
            r = url + '?' + tmp;
          }
        }
      }

      return r;
    },

    /**
     * 获取url参数
     * @param name 参数名称，为空则返回所有参数Object集合
     * @param url 目标url，默认为当前url
     * @returns {*}
     */
    getQuery: function getQuery(name, url) {
      var $location;
      var $params = {};

      if (url) {
        $location = document.createElement('a');
        $location.href = url;
      } else {
        $location = window.location;
      }

      var $seg = $location.search.replace(/^\?/, '').split('&');
      var len = $seg.length;
      var $p;

      for (var i = 0; i < len; i++) {
        if ($seg[i]) {
          $p = $seg[i].split('=');
          $params[$p[0]] = decodeURIComponent($p[1]);
        }
      }

      return name ? $params[name] : $params;
    }
  });
  /* Function */

  $.extend(Function.prototype, {
    // to fixed String.prototype -> toFunc
    toFunc: function toFunc() {
      return this;
    }
  });
  /* Array */

  $.extend(Array.prototype, {
    remove: function remove(index) {
      if (index < 0) return this;else return this.slice(0, index).concat(this.slice(index + 1, this.length));
    },
    unique: function unique() {
      var temp = [];
      this.sort();

      for (var i = 0; i < this.length; i++) {
        if (this[i] === this[i + 1]) continue;
        temp[temp.length] = this[i];
      }

      return temp;
    },
    myIndexOf: function myIndexOf(e) {
      return this.indexOf(e);
    },

    /* serializeArray to json */
    toJson: function toJson() {
      var o = {};
      var a = this;
      $.each(a, function () {
        if (o[this.name] !== undefined) {
          if (!o[this.name].push) {
            o[this.name] = [o[this.name]];
          }

          o[this.name].push(this.value || '');
        } else {
          o[this.name] = this.value || '';
        }
      });
      return o;
    }
  });
  /* Global */

  $.isJson = function (obj) {
    var flag = true;

    try {
      flag = $.parseJSON(obj);
    } catch (e) {
      return false;
    }

    return !!flag;
  };
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-frag.js":
/*!*****************************!*\
  !*** ./src/js/bjui-frag.js ***!
  \*****************************/
/***/ (() => {

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-frag.js  v1.2
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.frag.xml (author:ZhangHuihua@msn.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-frag.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict';

  BJUI.setRegional('alertmsg', {
    title: {
      error: 'Error',
      info: 'Info',
      warn: 'Warning',
      correct: 'Correct',
      confirm: 'Confirm'
    },
    btnMsg: {
      ok: 'OK',
      yes: 'YES',
      no: 'NO',
      cancel: 'Cancel'
    }
  });
  BJUI.setRegional('dialog', {
    close: 'Close',
    maximize: 'Maximize',
    restore: 'Restore',
    minimize: 'Minimize',
    title: 'Popup window'
  });
  BJUI.setRegional('orderby', {
    asc: 'Asc',
    desc: 'Desc'
  });
  BJUI.setRegional('pagination', {
    first: 'First page',
    last: 'Last page',
    prev: 'Prev page',
    next: 'Next page',
    jumpto: 'Jump page number',
    jump: 'Jump'
  });
  BJUI.setRegional('datagrid', {
    asc: 'ASC',
    desc: 'DESC',
    showhide: 'Show/Hide columns',
    filter: 'Filter',
    clear: 'Clear',
    lock: 'Lock',
    unlock: 'Unlock',
    add: 'Add',
    edit: 'Edit',
    save: 'Save',
    update: 'Update',
    cancel: 'Cancel',
    del: 'Delete',
    prev: 'Prev',
    next: 'Next',
    refresh: 'Refresh',
    query: 'Query',
    'import': 'Import',
    'export': 'Export',
    all: 'All',
    'true': 'True',
    'false': 'False',
    selectMsg: 'Not selected any rows!',
    saveMsg: 'No rows need to save!',
    editMsg: 'Please save the edited row!',
    delMsg: 'Sure you want to delete this row?',
    delMsgM: 'Sure you want to delete selected rows?'
  });
  BJUI.setRegional('progressmsg', 'Data loading, please waiting...');
  BJUI.setRegional('datepicker', {
    close: 'Close',
    prev: 'Prev month',
    next: 'Next month',
    clear: 'Clear',
    ok: 'OK',
    dayNames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    monthNames: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
  });
  BJUI.setRegional('navtabCM', {
    refresh: 'Refresh navtab',
    close: 'Close navtab',
    closeother: 'Close other navtab',
    closeall: 'Close all navtab'
  });
  BJUI.setRegional('dialogCM', {
    refresh: 'Refresh dialog',
    close: 'Close dialog',
    closeother: 'Close other dialog',
    closeall: 'Close all dialog'
  });
  BJUI.setRegional('upload', {
    upConfirm: 'Start upload',
    upPause: 'Pause upload',
    upCancel: 'Cancel upload'
  });
  BJUI.setRegional('statusCode_503', 'The current server load is too large or is down for maintenance!');
  BJUI.setRegional('sessiontimeout', 'Session timeout, please login!');
  BJUI.setRegional('plhmsg', 'Placeholder corresponding selector None Valid!');
  BJUI.setRegional('nocheckgroup', 'Undefined group name selected item [check box "data-group"]!');
  BJUI.setRegional('notchecked', 'Unchecked any one!');
  BJUI.setRegional('selectmsg', 'Please select one option!');
  BJUI.setRegional('validatemsg', 'Submitted form data has [{0}] field an error, please after modified submitting!');
  BJUI.setRegional('uititle', 'B-JUI');
  BJUI.setRegional('maintab', 'My home');
  window.FRAG = {
    dialog: '<div class="bjui-dialog bjui-dialog-container" style="top:150px; left:300px;">' + '    <div class="dialogHeader" onselectstart="return false;" oncopy="return false;" onpaste="return false;" oncut="return false;">' + '        <a class="close" href="#close" title="#close#"><i class="fa fa-times-circle"></i></a>' + '        <a class="maximize" href="#maximize" title="#maximize#"><i class="fa fa-plus-circle"></i></a>' + '        <a class="restore" href="#restore" title="#restore#"><i class="fa fa-history"></i></a>' + '        <a class="minimize" href="#minimize" title="#minimize#"><i class="fa fa-minus-circle"></i></a>' + '        <h1><span><i class="fa fa-th-large"></i></span> <span class="title">#title#</span></h1>' + '    </div>' + '    <div class="dialogContent unitBox"></div>' + '    <div class="resizable_h_l" tar="nw"></div>' + '    <div class="resizable_h_r" tar="ne"></div>' + '    <div class="resizable_h_c" tar="n"></div>' + '    <div class="resizable_c_l" tar="w" style="height:100%;"></div>' + '    <div class="resizable_c_r" tar="e" style="height:100%;"></div>' + '    <div class="resizable_f_l" tar="sw"></div>' + '    <div class="resizable_f_r" tar="se"></div>' + '    <div class="resizable_f_c" tar="s"></div>' + '</div>',
    taskbar: '<div id="bjui-taskbar" style="left:0px; display:none;">' + '    <div class="taskbarContent">' + '        <ul></ul>' + '    </div>' + '    <div class="taskbarLeft taskbarLeftDisabled"><i class="fa fa-angle-double-left"></i></div>' + '    <div class="taskbarRight"><i class="fa fa-angle-double-right"></i></div>' + '</div>',
    splitBar: '<div id="bjui-splitBar"></div>',
    splitBarProxy: '<div id="bjui-splitBarProxy"></div>',
    resizable: '<div id="bjui-resizable" class="bjui-resizable"></div>',
    alertBackground: '<div class="bjui-alertBackground"></div>',
    maskBackground: '<div class="bjui-maskBackground bjui-ajax-mask"></div>',
    maskProgress: '<div class="bjui-maskProgress bjui-ajax-mask"><i class="fa fa-cog fa-spin"></i>&nbsp;&nbsp;#msg#<div class="progressBg"><div class="progress"></div></div></div>',
    progressBar_custom: '<div id="bjui-progressBar-custom" class="progressBar"><i class="fa fa-cog fa-spin"></i> <span></span></div>',
    dialogMask: '<div class="bjui-dialogBackground"></div>',
    orderby: '<a href="javascript:;" class="order asc" data-order-direction="asc" title="#asc#"><i class="fa fa-angle-up"></i></a>' + '<a href="javascript:;" class="order desc" data-order-direction="desc" title="#desc#"><i class="fa fa-angle-down"></i></a>',
    slidePanel: '<div class="panel panel-default">' + '    <div class="panel-heading">' + '        <h4 class="panel-title"><a data-toggle="collapse" data-parent="#bjui-accordionmenu" href="##id#" class="#class#">#icon#&nbsp;#title#<b>#righticon#</b></a></h4>' + '    </div>' + '    <div id="#id#" class="panel-collapse collapse#bodyclass#">' + '        <div class="panel-body">' + '        </div>' + '    </div>' + '</div>',
    pagination: '<ul class="pagination">' + '    <li class="j-first">' + '        <a class="first" href="javascript:;"><i class="fa fa-step-backward"></i> #first#</a>' + '        <span class="first"><i class="fa fa-step-backward"></i> #first#</span>' + '    </li>' + '    <li class="j-prev">' + '        <a class="previous" href="javascript:;"><i class="fa fa-backward"></i> #prev#</a>' + '        <span class="previous"><i class="fa fa-backward"></i> #prev#</span>' + '    </li>' + '    #pageNumFrag#' + '    <li class="j-next">' + '        <a class="next" href="javascript:;">#next# <i class="fa fa-forward"></i></a>' + '        <span class="next">#next# <i class="fa fa-forward"></i></span>' + '    </li>' + '    <li class="j-last">' + '        <a class="last" href="javascript:;">#last# <i class="fa fa-step-forward"></i></a>' + '        <span class="last">#last# <i class="fa fa-step-forward"></i></span>' + '    </li>' + '    <li class="jumpto"><span class="p-input"><input class="form-control input-sm-pages" type="text" size="2.6" value="#pageCurrent#" title="#jumpto#"></span><a class="goto" href="javascript:;" title="#jump#"><i class="fa fa-chevron-right"></i></a></li>' + '</ul>',
    gridPaging: '<ul class="pagination">' + '    <li class="page-total">' + '        <span title="#total#">#count#</span>' + '    </li>' + '    <li class="page-jumpto"><span class="page-input"><input class="form-control input-sm-pages" type="text" size="3.2" value="#pageCurrent#" title="#jumpto#"></span></li>' + '    <li class="page-first btn-nav">' + '        <a href="javascript:;" title="#first#"><i class="fa fa-step-backward"></i></a>' + '    </li>' + '    <li class="page-prev btn-nav">' + '        <a href="javascript:;" title="#prev#"><i class="fa fa-backward"></i></a>' + '    </li>' + '    <li class="page-next btn-nav">' + '        <a href="javascript:;" title="#next#"><i class="fa fa-forward"></i></a>' + '    </li>' + '    <li class="page-last btn-nav">' + '        <a href="javascript:;" title="#last#"><i class="fa fa-step-forward"></i></a>' + '    </li>' + '</ul>',
    gridPageNum: '<li class="page-num#active#"><a href="javascript:;">#num#</a></li>',
    gridMenu: '<div class="datagrid-menu-box">' + '    <ul>' + '        <li class="datagrid-li-asc"><a href="javascript:;"><span class="icon"><i class="fa fa-sort-amount-asc"></i></span><span class="title">#asc#</span></a></li>' + '        <li class="datagrid-li-desc"><a href="javascript:;"><span class="icon"><i class="fa fa-sort-amount-desc"></i></span><span class="title">#desc#</span></a></li>' + '        <li class="datagrid-li-filter"><a href="javascript:;"><span class="icon"><i class="fa fa-filter"></i></span><span class="title">#filter#</span><span class="arrow"></span></a></li>' + '        <li class="datagrid-li-showhide"><a href="javascript:;"><span class="icon"><i class="fa fa-check-square-o"></i></span><span class="title">#showhide#</span><span class="arrow"></span></a></li>' + '        <li class="datagrid-li-lock"><a href="javascript:;"><span class="icon"><i class="fa fa-lock"></i></span><span class="title">#lock#</span></a></li>' + '        <li class="datagrid-li-unlock disable"><a href="javascript:;"><span class="icon"><i class="fa fa-unlock"></i></span><span class="title">#unlock#</span></a></li>' + '    </ul>' + '</div>',
    gridFilter: '<div class="datagrid-filter-box">' + '<fieldset>' + '<legend>#label#</legend>' + '<span class="filter-a"></span>' + '<span class="filter-and"><select data-toggle="selectpicker" data-container="true" data-width="100%"><option value="and">AND</option><option value="or">OR</option></select></span>' + '<span class="filter-b"></span>' + '<span class="filter-ok"><button type="button" class="btn-green ok" data-icon="check">#filter#</button><button type="button" class="btn-orange clear" data-icon="remove">#clear#</button></span>' + '</fieldset>' + '</div>',
    gridShowhide: '<li data-index="#index#" class="datagrid-col-check"><a href="javascript:;"><i class="fa fa-check-square-o"></i>#label#</a></li>',
    gridEditBtn: '<button type="button" class="btn-green edit" data-icon="edit">#edit#</button>' + '<button type="button" class="btn-green update" data-icon="edit">#update#</button>' + '<button type="button" class="btn-green save" data-icon="check">#save#</button>' + '<button type="button" class="btn-orange cancel" data-icon="undo">#cancel#</button>' + '<button type="button" class="btn-orange delete" data-icon="remove">#del#</button>',
    gridDialogEditBtns: '<ul>' + '    <li class="pull-left"><button type="button" class="btn btn-orange prev" data-icon="arrow-up">#prev#</button></li>' + '    <li class="pull-left"><button type="button" class="btn btn-orange next" data-icon="arrow-down">#next#</button></li>' + '    <li><button type="button" class="btn btn-red cancel" data-icon="remove">#cancel#</button></li>' + '    <li><button type="button" class="btn btn-default save" data-icon="save">#save#</button></li>' + '</ul>',
    alertBoxFrag: '<div id="bjui-alertMsgBox" class="bjui-alert"><div class="alertContent"><div class="#type#"><div class="alertInner"><h1><i class="fa #fa#"></i>#title#</h1><div class="msg">#message#</div></div><div class="toolBar"><ul>#btnFragment#</ul></div></div></div></div>',
    alertBtnFrag: '<li><button class="btn btn-#class#" rel="#callback#" type="button">#btnMsg#</button></li>',
    calendarFrag: '<div id="bjui-calendar">' + '    <div class="main">' + '        <a class="close" href="javascript:;" title="#close#"><i class="fa fa-times-circle"></i></a>' + '        <div class="head">' + '            <table width="100%" border="0" cellpadding="0" cellspacing="2">' + '                <tr>' + '                    <td width="20"><a class="prev" href="javascript:;" title="#prev#"><i class="fa fa-arrow-left"></i></a></td>' + '                    <td><select name="year"></select></td>' + '                    <td><select name="month"></select></td>' + '                    <td width="20"><a class="next" href="javascript:;" title="#next#"><i class="fa fa-arrow-right"></i></a></td>' + '                </tr>' + '            </table>' + '        </div>' + '        <div class="body">' + '            <dl class="dayNames"><dt>7</dt><dt>1</dt><dt>2</dt><dt>3</dt><dt>4</dt><dt>5</dt><dt>6</dt></dl>' + '            <dl class="days"><!-- date list --></dl>' + '            <div style="clear:both;height:0;line-height:0"></div>' + '        </div>' + '        <div class="foot">' + '            <table class="time">' + '                <tr>' + '                    <td>' + '                        <input type="text" class="hh" maxlength="2" data-type="hh" data-start="0" data-end="23">:<input' + '                         type="text" class="mm" maxlength="2" data-type="mm" data-start="0" data-end="59">:<input' + '                         type="text" class="ss" maxlength="2" data-type="ss" data-start="0" data-end="59">' + '                    </td>' + '                    <td><ul><li class="up" data-add="1">&and;</li><li class="down">&or;</li></ul></td>' + '                </tr>' + '            </table>' + '            <button type="button" class="clearBtn btn btn-orange">#clear#</button>' + '            <button type="button" class="okBtn btn btn-default">#ok#</button>' + '        </div>' + '        <div class="tm">' + '            <ul class="hh">' + '                <li>0</li>' + '                <li>1</li>' + '                <li>2</li>' + '                <li>3</li>' + '                <li>4</li>' + '                <li>5</li>' + '                <li>6</li>' + '                <li>7</li>' + '                <li>8</li>' + '                <li>9</li>' + '                <li>10</li>' + '                <li>11</li>' + '                <li>12</li>' + '                <li>13</li>' + '                <li>14</li>' + '                <li>15</li>' + '                <li>16</li>' + '                <li>17</li>' + '                <li>18</li>' + '                <li>19</li>' + '                <li>20</li>' + '                <li>21</li>' + '                <li>22</li>' + '                <li>23</li>' + '            </ul>' + '            <ul class="mm">' + '                <li>0</li>' + '                <li>5</li>' + '                <li>10</li>' + '                <li>15</li>' + '                <li>20</li>' + '                <li>25</li>' + '                <li>30</li>' + '                <li>35</li>' + '                <li>40</li>' + '                <li>45</li>' + '                <li>50</li>' + '                <li>55</li>' + '            </ul>' + '            <ul class="ss">' + '                <li>0</li>' + '                <li>10</li>' + '                <li>20</li>' + '                <li>30</li>' + '                <li>40</li>' + '                <li>50</li>' + '            </ul>' + '        </div>' + '    </div>' + '</div>',
    spinnerBtn: '<ul class="bjui-spinner"><li class="up" data-add="1">&and;</li><li class="down">&or;</li></ul>',
    lookupBtn: '<a class="bjui-lookup" href="javascript:;" data-toggle="lookupbtn"><i class="fa fa-search"></i></a>',
    dateBtn: '<a class="bjui-lookup" href="javascript:;" data-toggle="datepickerbtn"><i class="fa fa-calendar"></i></a>',
    navtabCM: '<ul id="bjui-navtabCM">' + '    <li rel="reload"><span class="icon"><i class="fa fa-refresh"></i></span><span class="title">#refresh#</span></li>' + '    <li rel="closeCurrent"><span class="icon"><i class="fa fa-remove"></i></span><span class="title">#close#</li>' + '    <li rel="closeOther"><span class="icon"><i class="fa fa-remove"></i></span><span class="title">#closeother#</li>' + '    <li rel="closeAll"><span class="icon"><i class="fa fa-remove"></i></span><span class="title">#closeall#</li>' + '</ul>',
    dialogCM: '<ul id="bjui-dialogCM">' + '    <li rel="reload"><span class="icon"><i class="fa fa-refresh"></i></span><span class="title">#refresh#</span></li>' + '    <li rel="closeCurrent"><span class="icon"><i class="fa fa-remove"></i></span><span class="title">#close#</span></li>' + '    <li rel="closeOther"><span class="icon"><i class="fa fa-remove"></i></span><span class="title">#closeother#</span></li>' + '    <li rel="closeAll"><span class="icon"><i class="fa fa-remove"></i></span><span class="title">#closeall#</span></li>' + '</ul>',
    externalFrag: '<iframe src="{url}" style="width:100%;height:{height};" frameborder="no" border="0" marginwidth="0" marginheight="0"></iframe>',
    uploadTemp: '<div id="{fileId}" class="item">' + '    <div class="info">' + '        <span class="up_filename">{fileName}</span><span class="up_confirm" title="#upConfirm#"><i class="fa fa-play-circle-o"></i></span><span class="up_pause" title="#upPause#"><span class="glyphicon glyphicon-pause"></span></span><span class="up_cancel" title="#upCancel#"><i class="fa fa-times-circle-o"></i></span>' + '    </div>' + '    <div class="preview"><span class="img"></span></div>' + '    <div class="progress"><div class="bar"></div></div>' + '    <span class="percent">{percent}</span>' + '    <span class="filesize"><span class="uploadedsize">{uploadedSize}</span>/<span class="totalsize">{fileSize}</span></span>' + '</div>',
    uploadFrag: '<input class="bjui-upload-select-file" style="display:none;" type="file" name="fileselect[]" #multi# accept="#accept#">' + '<a href="javascript:void(0)" class="btn btn-default bjui-upload-select">#btnTxt#</a>' + '<div class="queue"></div>',
    statusCode_503: 'HTTP status 503, #statusCode_503#',
    sessionTimout: '#sessiontimeout#',
    alertPlhMsg: '#plhmsg#',
    alertNoCheckGroup: '#nocheckgroup#',
    alertNotChecked: '#notchecked#',
    alertSelectMsg: '#selectmsg#',
    validateErrorMsg: '#validatemsg#',
    uiTitle: '#uititle#',
    mainTabTitle: '#mynavtab#'
  };
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-initui.js":
/*!*******************************!*\
  !*** ./src/js/bjui-initui.js ***!
  \*******************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-initui.js  v1.2
 * @author K'naan (xknaan@163.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-initui.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // INITUI CLASS DEFINITION
  // ======================

  var Initui = function Initui(element, options) {
    this.$element = $(element);
    this.options = options;
  };

  Initui.DEFAULTS = {};

  Initui.prototype.init = function () {
    var that = this;
    var $element = that.$element;
    $.when(that.initUI()).done(function () {
      $element.trigger(BJUI.eventType.afterInitUI);
    });
  };

  Initui.prototype.initUI = function () {
    var $element = this.$element;
    $.when($element.trigger(BJUI.eventType.beforeInitUI)).done(function () {
      $element.trigger(BJUI.eventType.initUI);
    });
  }; // INITUI PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, Initui.DEFAULTS, $this.data(), _typeof(option) === 'object' && option);
      var data = $this.data('bjui.initui');
      if (!data) $this.data('bjui.initui', data = new Initui(this, options));

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      } else {
        data.init();
      }
    });
  }

  var old = $.fn.initui;
  $.fn.initui = Plugin;
  $.fn.initui.Constructor = Initui; // INITUI NO CONFLICT
  // =================

  $.fn.initui.noConflict = function () {
    $.fn.initui = old;
    return this;
  }; // INITUI DATA-API
  // ==============


  $(document).on('click.bjui.initui.data-api', '[data-toggle="initui"]', function (e) {
    var $this = $(this);
    Plugin.call($this, $this.data());
    e.preventDefault();
  });
  /* beforeInitUI */

  $(document).on(BJUI.eventType.beforeInitUI, function (e) {
    var $box = $(e.target);
    var noinits = [];
    var $noinit = $box.find('[data-noinit]'); // progress

    $box.find('> .bjui-maskProgress').find('.progress').stop().animate({
      width: '85%'
    }, 'fast'); // Hide not need to initialize the UI DOM

    $noinit.each(function (i) {
      var $this = $(this);
      var pos = {};
      pos.$target = $this;
      pos.$next = $this.next();
      pos.$prev = $this.prev();
      pos.$parent = $this.parent();
      pos.visible = !!$this.is(':visible');
      noinits.push(pos);
      $this.remove();
    });
    $box.data('bjui.noinit', noinits);
  });
  /* initUI */

  $(document).on(BJUI.eventType.initUI, function (e) {
    var $box = $(e.target); // progress

    $box.find('> .bjui-maskProgress').find('.progress').stop().animate({
      width: '95%'
    }, 'fast');
  });
  /* afterInitUI */

  $(document).on(BJUI.eventType.afterInitUI, function (e) {
    var $box = $(e.target);
    var noinits = $box.data('bjui.noinit');
    var $form = $box.find('> .bjui-pageContent').find('form'); // Recovery not need to initialize the UI DOM

    if (noinits) {
      $.each(noinits, function (i, n) {
        if (n.$next.length) n.$next.before(n.$target);else if (n.$prev.length) n.$prev.after(n.$target);else if (n.$parent.length) n.$parent.append(n.$target);
        if (n.visible) n.$target.show();
        $box.removeData('bjui.noinit');
      });
    }
    /* resizePageH */


    $box.resizePageH(); // submit

    if ($form.length) {
      $box.find('> .bjui-pageFooter').find(':submit').on('click.bjui.submit', function (e) {
        e.preventDefault();
        $form.submit();
      });
    } // progress


    $box.find('.bjui-maskProgress').find('.progress').stop().animate({
      width: '100%'
    }, 'fast', function () {
      $box.find('.bjui-ajax-mask').fadeOut('normal', function () {
        $(this).remove();
      });
    });
  });
  /* Lateral Navigation */

  $(document).one(BJUI.eventType.afterInitUI, function (e) {
    var $hnavbar = $('#bjui-hnav-navbar');
    var $active = $hnavbar.find('> li.active');

    if ($active.length && $active.find('> .items').length) {
      $active.find('> a').trigger('click');
    }
  });
  /* ajaxStatus */

  var bjui_ajaxStatus = function bjui_ajaxStatus($target) {
    var $this = $target;
    var $offset = $this;
    var position = $this.css('position');
    if (position === 'static') $offset = $this.offsetParent();
    var zIndex = parseInt($offset.css('zIndex')) || 0;
    var $ajaxBackground = $this.find('> .bjui-maskBackground');
    var $ajaxProgress = $this.find('> .bjui-maskProgress');

    if (!$ajaxBackground.length) {
      $ajaxBackground = $(FRAG.maskBackground);
      $ajaxProgress = $(FRAG.maskProgress.replace('#msg#', BJUI.regional.progressmsg));
      $this.prepend($ajaxBackground).prepend($ajaxProgress);
    }

    $ajaxBackground.css('zIndex', zIndex + 1);
    $ajaxProgress.css('zIndex', zIndex + 2);
    return {
      $bg: $ajaxBackground,
      $pr: $ajaxProgress
    };
  };

  $(document).on('bjui.ajaxStart', function (e, timeout, callback) {
    var ajaxMask = bjui_ajaxStatus($(e.target));
    ajaxMask.$bg.fadeIn();
    ajaxMask.$pr.fadeIn();
    ajaxMask.$pr.find('.progress').animate({
      width: '80%'
    }, timeout || 500);

    if (callback) {
      setTimeout(function () {
        callback.toFunc().call(this);
      }, 25);
    }
  }).on('bjui.ajaxStop', function (e) {
    var ajaxMask = bjui_ajaxStatus($(e.target));
    ajaxMask.$pr.find('.progress').animate({
      width: '100%'
    }, 'fast', function () {
      ajaxMask.$bg.remove();
      ajaxMask.$pr.remove();
    });
  }).on('bjui.ajaxError', function (e) {
    var ajaxMask = bjui_ajaxStatus($(e.target));
    ajaxMask.$bg.remove();
    ajaxMask.$pr.remove();
  });
  $(document).on(BJUI.eventType.ajaxStatus, function (e) {
    var $target = $(e.target);
    var ajaxMask = bjui_ajaxStatus($target);
    $target.one('ajaxStart', function () {
      ajaxMask.$bg.fadeIn();
      ajaxMask.$pr.fadeIn();
      ajaxMask.$pr.find('.progress').animate({
        width: '10%'
      }, 'fast');
    }).one('ajaxStop', function () {// ajaxMask.$bg.fadeOut()
      // ajaxMask.$pr.fadeOut()
      // ajaxMask.$pr.find('.progress').animate({width:'80%'}, 'fast')
    }).one('ajaxError', function () {
      ajaxMask.$bg.remove();
      ajaxMask.$pr.remove();
    });
  });
  /* Clean plugins generated 'Dom elements' in the body */

  var bodyClear = function bodyClear($target) {
    $target.find('select[data-toggle="selectpicker"]').selectpicker('destroyMenu');
    $target.find('[data-toggle="selectztree"]').trigger('destroy.bjui.selectztree');
  };

  $(document).on(BJUI.eventType.beforeLoadDialog, function (e) {}).on(BJUI.eventType.beforeAjaxLoad, function (e) {
    bodyClear($(e.target));
  }).on(BJUI.eventType.beforeCloseNavtab, function (e) {
    bodyClear($(e.target));
  }).on(BJUI.eventType.beforeCloseDialog, function (e) {
    bodyClear($(e.target));
  });
  /* other */

  $(function () {
    $(document).on('keydown keyup', function (e) {
      if (e.which === BJUI.keyCode.CTRL) {
        BJUI.KeyPressed.ctrl = e.type === 'keydown';
      }

      if (e.which === BJUI.keyCode.SHIFT) {
        BJUI.KeyPressed.shift = e.type === 'keydown';
      }
    });
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-lookup.js":
/*!*******************************!*\
  !*** ./src/js/bjui-lookup.js ***!
  \*******************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-lookup.js  v1.2
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.database.js (author:ZhangHuihua@msn.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-lookup.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // LOOKUP GLOBAL ELEMENTS
  // ======================

  var group, suffix, $currentLookup, arrayfix, beforeSelect; // LOOKUP CLASS DEFINITION
  // ======================

  var Lookup = function Lookup(element, options) {
    this.$element = $(element);
    this.options = options;
    this.$lookBtn = null;
  };

  Lookup.DEFAULTS = {
    url: null,
    id: null,
    mask: true,
    width: 600,
    height: 400,
    title: 'Lookup',
    maxable: true,
    resizable: true,
    arrayfix: null,
    open: true,
    addBtn: false,
    beforeSelect: null // 选中目标赋值之前，返回false则停止赋值关闭窗口动作

  };
  Lookup.EVENTS = {
    afterChange: 'afterchange.bjui.lookup'
  };

  Lookup.prototype.init = function () {
    var that = this;
    var options = this.options;

    if (!options.url) {
      BJUI.debug('Lookup Plugin: Error trying open a lookup dialog, url is undefined!');
      return false;
    } else {
      options.url = decodeURI(options.url).replacePlh(that.$element.closest('.unitBox'));

      if (!options.url.isFinishedTm()) {
        that.$element.alertmsg('error', options.warn || FRAG.alertPlhMsg.replace('#plhmsg#', BJUI.regional.plhmsg));
        BJUI.debug('Lookup Plugin: The lookup\'s url is incorrect, url:' + options.url);
        return false;
      }

      options.url = encodeURI(options.url);
    }

    group = this.options.group || null;
    suffix = this.options.suffix || null;
    arrayfix = this.options.arrayfix || null;
    $currentLookup = this.$element;
    if (suffix) suffix = suffix.trim();

    if (options.beforeSelect) {
      if (typeof options.beforeSelect === 'string') {
        this.options.beforeSelect = options.beforeSelect.toFunc();
      }
    }

    beforeSelect = this.options.beforeSelect;
    var isInit = $currentLookup.data('bjui.lookupinit');

    if (!isInit) {
      if (options.addBtn) {
        this.addBtn();
      }

      if (options.open) {
        this.open(that.$element);
      }

      $currentLookup.data('bjui.lookupinit', true);
    } else {
      $currentLookup.data('bjui.lookupinit', true);
      this.open(that.$element);
    }
  };

  Lookup.prototype.addBtn = function () {
    var that = this;
    var $element = that.$element;

    if (!this.$lookBtn && !$element.parent().hasClass('wrap_bjui_btn_box')) {
      this.$lookBtn = $(FRAG.lookupBtn);
      this.$element.css({
        'paddingRight': '15px'
      }).wrap('<span class="wrap_bjui_btn_box"></span>');
      var $box = this.$element.parent();
      var height = this.$element.addClass('form-control').innerHeight();
      $box.css({
        'position': 'relative',
        'display': 'inline-block'
      });
      $.each(that.options, function (key, val) {
        if (key !== 'toggle') that.$lookBtn.data(key, val);
      });
      that.$lookBtn.data('bjui.lookupinit', true);
      this.$lookBtn.css({
        'height': height,
        'lineHeight': height + 'px'
      }).appendTo($box);
      this.$lookBtn.on('selectstart', function () {
        return false;
      });
    }
  };

  Lookup.prototype.open = function ($obj) {
    var options = this.options;
    $obj.dialog({
      id: options.id || 'lookup_dialog',
      url: options.url,
      title: options.title,
      width: options.width,
      height: options.height,
      mask: options.mask,
      maxable: options.maxable,
      resizable: options.resizable
    });
  };

  Lookup.prototype.getField = function (key) {
    if (arrayfix) {
      key = arrayfix + '[' + key + ']';
    }

    return (group ? group + '.' : '') + key + (suffix || '');
  };

  Lookup.prototype.setSingle = function (args, type) {
    if (typeof args === 'string') {
      args = new Function('return ' + args)();
    }

    if (this.beforeSelect(args, [args], type)) {
      this.setVal(args, type);
    }
  };

  Lookup.prototype.setMult = function (id, type) {
    var args = {};
    var argsArr = [];
    var $unitBox = this.$element.closest('.unitBox');
    $unitBox.find('[name="' + id + '"]').filter(':checked').each(function () {
      var _args = new Function('return ' + $(this).val())();

      if (_typeof(_args) === 'object') {
        argsArr.push(_args);
      }

      for (var key in _args) {
        if (_args.hasOwnProperty(key)) {
          var value = args[key] ? args[key] + ',' : '';
          args[key] = value + _args[key];
        }
      }
    });

    if ($.isEmptyObject(args)) {
      this.$element.alertmsg('error', this.$element.data('warn') || FRAG.alertSelectMsg);
      return;
    }

    if (this.beforeSelect(args, argsArr, type)) {
      this.setVal(args, type);
    }
  };

  Lookup.prototype.beforeSelect = function (args, argsArray, type) {
    if (beforeSelect) {
      if (beforeSelect(args, argsArray, type) === false) {
        return false;
      }
    }

    return true;
  };

  Lookup.prototype.setVal = function (args, type) {
    var that = this;
    var $box = $currentLookup.closest('.unitBox');
    var newValue;
    /* @description 增加 @author 小策一喋 */
    // for datagrid

    if ($currentLookup.data('customEvent')) {
      $currentLookup.trigger('customEvent.bjui.lookup', [args]);
    } else {
      $box.find(':input').each(function () {
        var $input = $(this);
        var inputName = $input.attr('name');

        for (var key in args) {
          if (args.hasOwnProperty(key)) {
            var name = that.getField(key);

            if (name === inputName) {
              /* @description 增加 追加参数 @author 小策一喋 */
              if (parseInt(type) === 1) {
                newValue = $input.val() ? $input.val() + ',' + args[key] : args[key];
              } else {
                newValue = args[key];
              }

              $input.val(newValue)
              /* @description 修改 args[key] 为 newValue @author 小策一喋 */
              .trigger(Lookup.EVENTS.afterChange, {
                value: args[key]
              });
              break;
            }
          }
        }
      });
    }

    this.$element.dialog('closeCurrent');
  }; // LOOKUP PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, Lookup.DEFAULTS, $this.data(), _typeof(option) === 'object' && option);
      var data = $this.data('bjui.lookup');

      if (!data) {
        /* 修复未实例化前添加newurl无效*/
        if ($this.data('newurl')) {
          options.url = $this.data('newurl');
        }

        $this.data('bjui.lookup', data = new Lookup(this, options));
      } else if ($this.data('newurl')) {
        data.options.url = $this.data('newurl');
        $this.data('bjui.dialog', null);
      }

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      } else {
        data.init();
      }
    });
  }

  var old = $.fn.lookup;
  $.fn.lookup = Plugin;
  $.fn.lookup.Constructor = Lookup; // LOOKUP NO CONFLICT
  // =================

  $.fn.lookup.noConflict = function () {
    $.fn.lookup = old;
    return this;
  }; // LOOKUP DATA-API
  // ==============


  $(document).on(BJUI.eventType.initUI, function (e) {
    var $this = $(e.target).find('[data-toggle="lookup"]');
    if (!$this.length) return;
    Plugin.call($this, 'addBtn');
  });
  $(document).on('click.bjui.lookup.data-api', '[data-toggle="lookupbtn"]', function (e) {
    var $this = $(this);
    if ($this.attr('href') && !$this.data('url')) $this.attr('data-url', $this.attr('href'));
    if (!$this.data('title')) $this.attr('data-title', $this.text());
    Plugin.call($this);
    e.preventDefault();
  });
  $(document).on('click.bjui.lookupback.data-api', '[data-toggle="lookupback"]', function (e) {
    var $this = $(this);
    var args = $this.data('args');
    var mult = $this.data('lookupid');
    var type = $('input[name="lookupType"]:checked').val();
    /* @description 新增 获取是否追加框值 @author 小策一喋 */

    /* @description 修改 增加type参数 @author 小策一喋 */

    if (args) {
      Plugin.call($this, 'setSingle', args, type);
    } else if (mult) {
      Plugin.call($this, 'setMult', mult, type);
    }

    e.preventDefault();
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-modulefixed.js":
/*!************************************!*\
  !*** ./src/js/bjui-modulefixed.js ***!
  \************************************/
/***/ (() => {

/**
 * BJUI 框架相关插件兼容处理
 * 使用方法： BJUI.ModuleFixed.func
 */
+function ($) {
  'use strict';

  function ModuleFixed() {}
  /**
   * 销毁实例，一般在dialog/navtab重载或关闭前使用
   * @param $selector 需处理的dialog/navtab jquery对象
   */


  ModuleFixed.prototype.destroyModules = function ($selector) {
    try {
      // ie9 uploadify 销毁
      var uploadify = $selector.find('.bjui-upload > .uploadify');

      if (uploadify.length) {
        uploadify.uploadify('destroy');
      } // colorpicker 销毁


      var colorpicker = $selector.find('[data-toggle="colorpicker"]');

      if (colorpicker.length) {
        colorpicker.colorpicker('destroy');
      }

      var selectpicker = $selector.find('[data-toggle="selectpicker"]');

      if (selectpicker.length) {
        selectpicker.selectpicker('destroy');
      }
    } catch (e) {
      BJUI.debug(e);
    }
  };

  BJUI.ModuleFixed = new ModuleFixed();
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-navtab.js":
/*!*******************************!*\
  !*** ./src/js/bjui-navtab.js ***!
  \*******************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-navtab.js  v1.2
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.navTab.js (author:ZhangHuihua@msn.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-navtab.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // NAVTAB GLOBAL ELEMENTS
  // ======================

  var currentIndex, $currentTab, $currentPanel, $box, $tabs, $panels, $prevBtn, $nextBtn, $moreBtn, $moreBox, $main, $mainLi;
  var autorefreshTimer;
  $(function () {
    var INIT_NAVTAB = function INIT_NAVTAB() {
      currentIndex = 0;
      $box = $('#bjui-navtab');
      $tabs = $box.find('.navtab-tab');
      $panels = $box.find('.navtab-panel');
      $prevBtn = $box.find('.tabsLeft');
      $nextBtn = $box.find('.tabsRight');
      $moreBtn = $box.find('.tabsMore');
      $moreBox = $box.find('.tabsMoreList');
      $main = $tabs.find('li:first');
      $mainLi = $moreBox.find('li:first');
      $prevBtn.click(function () {
        $(this).navtab('scrollPrev');
      });
      $nextBtn.click(function () {
        $(this).navtab('scrollNext');
      });
      $moreBtn.click(function () {
        $moreBox.show();
      });
      $(document).on('click.bjui.navtab.switchtab', function (e) {
        var $target = e.target.tagName === 'I' ? $(e.target).parent() : $(e.target);

        if ($moreBtn[0] !== $target[0]) {
          $moreBox.hide();
        }
      });
      var mainTit, options;
      $main.navtab('contextmenu', $main).click(function () {
        $(this).navtab('switchTab', 'main');
      }).find('> a > span').html(function (n, c) {
        return mainTit = c.replace('#maintab#', BJUI.regional.maintab);
      });
      options = $.extend({}, Navtab.DEFAULTS, $main.data(), {
        id: 'main',
        title: mainTit
      });
      $main.data('initOptions', options).data('options', options);

      if ($main.attr('data-url')) {
        $(document).one(BJUI.eventType.initUI, function (e) {
          $main.removeAttr('data-url').navtab('reload', options);
        });
      }

      setTimeout(function () {
        $main.navtab('switchTab', 'main');
      }, 50);
      $mainLi.click(function () {
        if ($(this).hasClass('active')) $moreBox.hide();else $(this).navtab('switchTab', 'main');
      }).find('> a').html(function (n, c) {
        return c.replace('#maintab#', BJUI.regional.maintab);
      });
    };

    INIT_NAVTAB();
  }); // NAVTAB CLASS DEFINITION
  // ======================

  var Navtab = function Navtab(element, options) {
    this.$element = $(element);
    this.options = options;
    this.tools = this.TOOLS();
  };

  Navtab.DEFAULTS = {
    id: undefined,
    title: 'New tab',
    url: undefined,
    type: 'GET',
    data: {},
    loadingmask: true,
    fresh: false,
    autorefresh: false,
    onLoad: null,
    beforeClose: null,
    onClose: null
  };

  Navtab.prototype.TOOLS = function () {
    var that = this;
    return {
      getDefaults: function getDefaults() {
        return Navtab.DEFAULTS;
      },
      getTabs: function getTabs() {
        return $tabs.find('> li');
      },
      getPanels: function getPanels() {
        return $panels.find('> div');
      },
      getMoreLi: function getMoreLi() {
        return $moreBox.find('> li');
      },
      getTab: function getTab(tabid) {
        var index = this.indexTabId(tabid);
        if (index >= 0) return this.getTabs().eq(index);
      },
      getPanel: function getPanel(tabid) {
        var index = this.indexTabId(tabid);
        if (index >= 0) return this.getPanels().eq(index);
      },
      getTabsW: function getTabsW(iStart, iEnd) {
        return this.tabsW(this.getTabs().slice(iStart, iEnd));
      },
      tabsW: function tabsW($tabs) {
        var iW = 0;
        $tabs.each(function () {
          iW += $(this).outerWidth(true);
        });
        return iW;
      },
      indexTabId: function indexTabId(tabid) {
        if (!tabid) return -1;
        var iOpenIndex = -1;
        this.getTabs().each(function (index) {
          if ($(this).data('initOptions').id === tabid) {
            iOpenIndex = index;
          }
        });
        return iOpenIndex;
      },
      getLeft: function getLeft() {
        return $tabs.position().left;
      },
      getScrollBarW: function getScrollBarW() {
        return $box.width() - 55;
      },
      visibleStart: function visibleStart() {
        var iLeft = this.getLeft();
        var iW = 0;
        var $tabs = this.getTabs();

        for (var i = 0; i < $tabs.length; i++) {
          if (iW + iLeft >= 0) return i;
          iW += $tabs.eq(i).outerWidth(true);
        }

        return 0;
      },
      visibleEnd: function visibleEnd() {
        var iLeft = this.getLeft();
        var iW = 0;
        var $tabs = this.getTabs();

        for (var i = 0; i < $tabs.length; i++) {
          iW += $tabs.eq(i).outerWidth(true);
          if (iW + iLeft > this.getScrollBarW()) return i;
        }

        return $tabs.length;
      },
      scrollPrev: function scrollPrev() {
        var iStart = this.visibleStart();

        if (iStart > 0) {
          this.scrollTab(-this.getTabsW(0, iStart - 1));
        }
      },
      scrollNext: function scrollNext() {
        var iEnd = this.visibleEnd();

        if (iEnd < this.getTabs().length) {
          this.scrollTab(-this.getTabsW(0, iEnd + 1) + this.getScrollBarW());
        }
      },
      scrollTab: function scrollTab(iLeft, isNext) {
        $tabs.animate({
          left: iLeft
        }, 200, function () {
          that.tools.ctrlScrollBtn();
        });
      },
      scrollCurrent: function scrollCurrent() {
        // auto scroll current tab
        var iW = this.tabsW(this.getTabs());
        var scrollW = this.getScrollBarW();

        if (iW <= scrollW) {
          this.scrollTab(0);
        } else if (this.getLeft() < scrollW - iW) {
          this.scrollTab(scrollW - iW);
        } else if (currentIndex < this.visibleStart()) {
          this.scrollTab(-this.getTabsW(0, currentIndex));
        } else if (currentIndex >= this.visibleEnd()) {
          this.scrollTab(scrollW - this.getTabs().eq(currentIndex).outerWidth(true) - this.getTabsW(0, currentIndex));
        }
      },
      ctrlScrollBtn: function ctrlScrollBtn() {
        var iW = this.tabsW(this.getTabs());

        if (this.getScrollBarW() > iW) {
          $prevBtn.hide();
          $nextBtn.hide();
          $tabs.parent().removeClass('tabsPageHeaderMargin');
        } else {
          $prevBtn.show().removeClass('tabsLeftDisabled');
          $nextBtn.show().removeClass('tabsRightDisabled');
          $tabs.parent().addClass('tabsPageHeaderMargin');

          if (this.getLeft() >= 0) {
            $prevBtn.addClass('tabsLeftDisabled');
          } else if (this.getLeft() <= this.getScrollBarW() - iW) {
            $nextBtn.addClass('tabsRightDisabled');
          }
        }
      },
      switchTab: function switchTab(iTabIndex) {
        var $tab = this.getTabs().removeClass('active').eq(iTabIndex).addClass('active');
        var $panels = this.getPanels();
        var $panel = $panels.eq(iTabIndex);
        var onSwitch = that.options.onSwitch ? that.options.onSwitch.toFunc() : null;

        if ($tab.data('reloadFlag')) {
          $panels.hide();
          $panel.show();
          that.refresh($tab.data('initOptions').id);
        } else {
          $panels.hide();

          if ($panel.find('.bjui-ajax-mask').length) {
            $panel.show();
          } else {
            $panel.addClass('fade').removeClass('in').show();

            if ($.support.transition) {
              $panel.one('bsTransitionEnd', function () {
                $panel.addClass('in');
              }).emulateTransitionEnd(10);
            } else {
              $panel.removeClass('fade');
            }
          }
        }

        this.getMoreLi().removeClass('active').eq(iTabIndex).addClass('active');
        currentIndex = iTabIndex;
        this.scrollCurrent();
        $currentTab = $tab;
        $.CurrentNavtab = $currentPanel = $panel;
        if (onSwitch) onSwitch.apply(that); // events

        $panel.trigger('bjui.navtab.switch');
      },
      closeTab: function closeTab(index, openTabid) {
        var $tab = this.getTabs().eq(index);
        var $more = this.getMoreLi().eq(index);
        var $panel = this.getPanels().eq(index);
        var options = $tab.data('options');
        var beforeClose = options.beforeClose ? options.beforeClose.toFunc() : null;
        var onClose = options.onClose ? options.onClose.toFunc() : null;
        var canClose = true;
        if (beforeClose) canClose = beforeClose.apply(that, [$panel]);

        if (!canClose) {
          that.tools.switchTab(index);
          return;
        }

        BJUI.ModuleFixed.destroyModules($panel);
        $tab.remove();
        $more.remove();
        $panel.trigger(BJUI.eventType.beforeCloseNavtab).remove();
        if (autorefreshTimer) clearInterval(autorefreshTimer);
        if (onClose) onClose.apply(that);
        if (currentIndex >= index) currentIndex--;

        if (openTabid) {
          var openIndex = this.indexTabId(openTabid);
          if (openIndex > 0) currentIndex = openIndex;
        }

        this.scrollCurrent();
        this.switchTab(currentIndex);
      },
      closeOtherTab: function closeOtherTab(index) {
        index = index || currentIndex;
        this.getTabs().each(function (i) {
          if (i > 0 && index !== i) $(this).find('> .close').trigger('click');
        });
      },
      loadUrlCallback: function loadUrlCallback($panel) {
        $panel.find(':button.btn-close').click(function () {
          that.closeCurrentTab();
        });
      },
      reload: function reload($tab, flag) {
        flag = flag || $tab.data('reloadFlag');
        var options = $tab.data('options');

        if (flag) {
          $tab.data('reloadFlag', false);
          var $panel = that.tools.getPanel(options.id);

          if ($tab.hasClass('external')) {
            that.openExternal(options.url, $panel);
          } else {
            that.tools.reloadTab($panel, options);
          }
        }
      },
      reloadTab: function reloadTab($panel, options) {
        var onLoad = options.onLoad ? options.onLoad.toFunc() : null;
        var arefre = options.autorefresh && (isNaN(String(options.autorefresh)) ? 15 : options.autorefresh);
        BJUI.ModuleFixed.destroyModules($panel);

        if (options.data) {
          options.data = _typeof(options.data) === 'object' ? options.data : options.data.toObj();
        }

        $panel.trigger(BJUI.eventType.beforeLoadNavtab).ajaxUrl({
          type: options.type || 'GET',
          url: options.url,
          data: options.data || {},
          loadingmask: options.loadingmask,
          callback: function callback(response) {
            that.tools.loadUrlCallback($panel);
            if (onLoad) onLoad.apply(that, [$panel]);
            if (autorefreshTimer) clearInterval(autorefreshTimer);

            if (arefre) {
              autorefreshTimer = setInterval(function () {
                $panel.navtab('refresh');
              }, arefre * 1000);
            }

            if (BJUI.ui.clientPaging && $panel.data('bjui.clientPaging')) $panel.pagination('setPagingAndOrderby', $panel);
          }
        });
      }
    };
  };

  Navtab.prototype.contextmenu = function ($obj) {
    var that = this;
    $obj.contextmenu({
      id: 'navtabCM',
      bindings: {
        reload: function reload(t, m) {
          that.refresh(t.data('initOptions').id);
        },
        closeCurrent: function closeCurrent(t, m) {
          var tabId = t.data('initOptions').id;
          if (tabId) that.closeTab(tabId);else that.closeCurrentTab();
        },
        closeOther: function closeOther(t, m) {
          if (t.index() === 0) {
            that.closeAllTab();
          } else {
            var index = that.tools.indexTabId(t.data('initOptions').id);
            that.tools.closeOtherTab(index > 0 ? index : currentIndex);
          }
        },
        closeAll: function closeAll(t, m) {
          that.closeAllTab();
        }
      },
      ctrSub: function ctrSub(t, m) {
        var mReload = m.find('[rel="reload"]');
        var mCur = m.find('[rel="closeCurrent"]');

        if (t.index() === 0) {
          mCur.addClass('disabled');
          if (!t.data('url')) mReload.addClass('disabled');
        }
      }
    });
  }; // if found tabid replace tab, else create a new tab.


  Navtab.prototype.openTab = function () {
    var that = this;
    var $element = this.$element;
    var options = this.options;
    var tools = this.tools;
    if (!options.url && options.href) options.url = options.href;

    if (!options.url) {
      BJUI.debug('Navtab Plugin: Error trying to open a navtab, url is undefined!');
      return;
    } else {
      options.url = decodeURI(options.url).replacePlh($element.closest('.unitBox'));

      if (!options.url.isFinishedTm()) {
        $element.alertmsg('error', options.warn || FRAG.alertPlhMsg.replace('#plhmsg#', BJUI.regional.plhmsg));
        BJUI.debug('Navtab Plugin: The new navtab\'s url is incorrect, url: ' + options.url);
        return;
      }

      options.url = encodeURI(options.url);
    }

    var iOpenIndex = options.id ? tools.indexTabId(options.id) : currentIndex;

    if (!options.id && !BJUI.ui.overwriteHomeTab && iOpenIndex === 0) {
      options.id = 'navtab';
      iOpenIndex = -1;
    }

    var $tab;
    var $panel;

    if (iOpenIndex >= 0) {
      if (!options.id) delete options.id;
      $tab = tools.getTabs().eq(iOpenIndex);
      $panel = tools.getPanels().eq(iOpenIndex);
      var initOp = $tab.data('initOptions');
      var op = $.extend({}, initOp, options);

      if (initOp.fresh || options.fresh || initOp.url !== options.url) {
        that.reload(op);
      }

      currentIndex = iOpenIndex;
    } else {
      var tabFrag = '<li><a href="javascript:" title="#title#"><span>#title#</span></a><span class="close">&times;</span></li>';
      $tab = $(tabFrag.replaceAll('#title#', options.title));
      $panel = $('<div class="navtabPage unitBox"></div>');
      var $more = $('<li><a href="javascript:" title="#title#">#title#</a></li>'.replaceAll('#title#', options.title));
      $tab.appendTo($tabs);
      $panel.appendTo($panels);
      $more.appendTo($moreBox);
      $tab.data('options', options).data('initOptions', options);

      if (options.external || options.url && options.url.isExternalUrl()) {
        $tab.addClass('external');
        this.openExternal(options.url, $panel);
      } else {
        $tab.removeClass('external');
        tools.reloadTab($panel, options);
      }

      currentIndex = tools.getTabs().length - 1;
      this.contextmenu($tab); // events

      $tab.on('click', function (e) {
        var $target = $(e.target);

        if ($target.hasClass('close')) {
          that.closeTab(options.id);
        } else if ($target.closest('li').hasClass('active')) {
          return false;
        } else {
          that.switchTab(options.id);
        }
      });
      $more.on('click', function () {
        that.switchTab(options.id);
      });
    }

    tools.switchTab(currentIndex);
    tools.scrollCurrent();
  };

  Navtab.prototype.closeTab = function (tabid) {
    var index = this.tools.indexTabId(tabid);

    if (index > 0) {
      this.tools.closeTab(index);
    }
  };

  Navtab.prototype.closeCurrentTab = function (openTabid) {
    // openTabid can be empty. close current tab by default, and open the last tab
    if (currentIndex > 0) {
      this.tools.closeTab(currentIndex, openTabid);
    }
  };

  Navtab.prototype.closeAllTab = function () {
    this.tools.getTabs().find('> .close').each(function () {
      $(this).trigger('click');
    });
  };

  Navtab.prototype.reloadFlag = function (tabids) {
    var arr = tabids.split(',');

    for (var i = 0; i < arr.length; i++) {
      var $tab = this.tools.getTab(arr[i].trim());

      if ($tab) {
        if (this.tools.indexTabId(arr[i]) === currentIndex) this.tools.reload($tab, true);else $tab.data('reloadFlag', true);
      }
    }
  };

  Navtab.prototype.switchTab = function (tabid) {
    var index = this.tools.indexTabId(tabid);
    this.tools.switchTab(index);
  };

  Navtab.prototype.scrollPrev = function () {
    this.tools.scrollPrev();
  };

  Navtab.prototype.scrollNext = function () {
    this.tools.scrollNext();
  };

  Navtab.prototype.refresh = function (tabid) {
    var $tab, $panel;

    if (!tabid) {
      $tab = $currentTab;
    } else if (typeof tabid === 'string') {
      $tab = this.tools.getTab(tabid);
    } else {
      $tab = tabid;
    }

    if ($tab && $tab.length) {
      $panel = this.tools.getPanel($tab.data('initOptions').id);
      $panel.removeData('bjui.clientPaging');
      this.reload($tab.data('initOptions'));
    }
  };

  Navtab.prototype.reload = function (option, initOptionFlag) {
    var that = this;
    var options = $.extend({}, _typeof(option) === 'object' && option);
    var $tab = options.id ? this.tools.getTab(options.id) : this.tools.getTabs().eq(currentIndex);

    if ($tab) {
      var initOptions = $tab.data('initOptions') || {};
      var op = $.extend({}, initOptions, options);

      var _reload = function _reload() {
        if (initOptions.title !== op.title) $tab.find('> a').attr('title', op.title).find('> span').html(op.title);
        if (!initOptionFlag) $tab.data('initOptions', op);
        $tab.data('options', op);
        that.tools.reload($tab, true);
      };

      if (options.reloadWarn) {
        this.$element.alertmsg('confirm', options.reloadWarn, {
          okCall: function okCall() {
            _reload();
          }
        });
      } else {
        _reload();
      }
    }
  };

  Navtab.prototype.reloadForm = function (clearQuery, option) {
    var options = $.extend({}, _typeof(option) === 'object' && option);
    var $tab, $panel;

    if (typeof option === 'string') {
      $tab = this.tools.getTab(option);
      $panel = this.tools.getPanel(option);
    } else {
      $tab = options.id ? this.tools.getTab(options.id) : this.tools.getTabs().eq(currentIndex);
      $panel = options.id ? this.tools.getPanel(options.id) : this.tools.getPanels().eq(currentIndex);
    }

    if ($tab && $panel) {
      if (!$tab.hasClass('external')) {
        var $pagerForm = $panel.find('#pagerForm');
        var data = {};
        var pageData = {};
        if ($pagerForm.attr('action')) options.url = $pagerForm.attr('action');

        if ($pagerForm && $pagerForm.length) {
          pageData = $pagerForm.serializeJson();
          if (!option || !option.type) options.type = $pagerForm.attr('method') || 'POST';

          if (clearQuery) {
            var pageInfo = BJUI.pageInfo;
            /* 修复navtab清空查询对排序无效bug */

            pageData[pageInfo['orderDirection']] = pageData[pageInfo['orderField']] = '';

            if ($panel.data('bjui.clientPaging')) {
              $panel.data('bjui.clientPaging').orderDirection = $panel.data('bjui.clientPaging').orderField = '';
            }
            /* end */


            for (var key in pageInfo) {
              if (pageInfo.hasOwnProperty(key)) {
                data[pageInfo[key]] = pageData[pageInfo[key]];
              }
            }
          } else {
            data = pageData;
          }

          options.data = $.extend({}, options.data || {}, data);
        }
      }

      this.reload(options, true);
    }
  };

  Navtab.prototype.getCurrentPanel = function () {
    return this.tools.getPanels().eq(currentIndex);
  };

  Navtab.prototype.closeOtherTab = function () {
    return this.tools.closeOtherTab();
  };

  Navtab.prototype.checkTimeout = function () {
    var json = JSON.parse($currentPanel.html());
    if (json && json[BJUI.keys.statusCode] === BJUI.statusCode.timeout) this.closeCurrentTab();
  };

  Navtab.prototype.openExternal = function (url, $panel) {
    var ih = $panel.closest('.navtab-panel').height();
    $panel.html(FRAG.externalFrag.replaceAll('{url}', url).replaceAll('{height}', ih + 'px'));
  }; // NAVTAB PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, Navtab.DEFAULTS, _typeof(option) === 'object' && option);
      var data = $this.data('bjui.navtab');
      if (!data) $this.data('bjui.navtab', data = new Navtab(this, options));

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      } else {
        data = new Navtab(this, options);
        data.openTab();
      }
    });
  }

  var old = $.fn.navtab;
  $.fn.navtab = Plugin;
  $.fn.navtab.Constructor = Navtab; // NAVTAB NO CONFLICT
  // =================

  $.fn.navtab.noConflict = function () {
    $.fn.navtab = old;
    return this;
  }; // NAVTAB DATA-API
  // ==============


  $(document).on('click.bjui.navtab.data-api', '[data-toggle="navtab"]', function (e) {
    var $this = $(this);
    var href = $this.attr('href');
    var data = $this.data();
    var options = data.options;

    if (options) {
      if (typeof options === 'string') options = options.toObj();

      if (_typeof(options) === 'object') {
        $.extend(data, options);
      }
    }

    if (!data.title) data.title = $this.text();
    if (href && !data.url) data.url = href;
    Plugin.call($this, data);
    e.preventDefault();
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-pagination.js":
/*!***********************************!*\
  !*** ./src/js/bjui-pagination.js ***!
  \***********************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-pagination.js  v1.2
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.pagination.js (author:ZhangHuihua@msn.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-pagination.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // PAGINATION CLASS DEFINITION
  // ======================

  var Pagination = function Pagination(element, options) {
    this.$element = $(element);
    this.options = options;
    this.tools = this.TOOLS();
  };

  Pagination.DEFAULTS = {
    first: 'li.j-first',
    prev: 'li.j-prev',
    next: 'li.j-next',
    last: 'li.j-last',
    nums: 'li.j-num > a',
    jump: 'li.jumpto',
    pageNumFrag: '<li class="#liClass#"><a href="javascript:;">#pageNum#</a></li>',
    total: 0,
    pageSize: 10,
    pageNum: 10,
    pageCurrent: 1,
    callback: function callback() {
      return false;
    }
  };

  Pagination.prototype.TOOLS = function () {
    var options = this.options;
    return {
      pageNums: function pageNums() {
        return Math.ceil(options.total / options.pageSize);
      },
      getInterval: function getInterval() {
        var ne_half = Math.ceil(options.pageNum / 2);
        var pn = this.pageNums();
        var upper_limit = pn - options.pageNum;
        var start = this.getCurrentPage() > ne_half ? Math.max(Math.min(this.getCurrentPage() - ne_half, upper_limit), 0) : 0;
        var end = this.getCurrentPage() > ne_half ? Math.min(this.getCurrentPage() + ne_half, pn) : Math.min(options.pageNum, pn);
        return {
          start: start + 1,
          end: end + 1
        };
      },
      getCurrentPage: function getCurrentPage() {
        var pageCurrent = parseInt(options.pageCurrent);
        return isNaN(pageCurrent) ? 1 : pageCurrent;
      },
      hasPrev: function hasPrev() {
        return this.getCurrentPage() > 1;
      },
      hasNext: function hasNext() {
        return this.getCurrentPage() < this.pageNums();
      }
    };
  };

  Pagination.prototype.init = function () {
    if (BJUI.ui.clientPaging && !this.getClientPaging()) this.setClientPaging({
      pageCurrent: this.options.pageCurrent,
      pageSize: this.options.pageSize
    });
    var that = this;
    var options = this.options;
    var tools = this.tools;
    var interval = tools.getInterval();
    var pageNumFrag = '';
    var pagination = FRAG.pagination;
    var pr = BJUI.regional.pagination;

    for (var i = interval.start; i < interval.end; i++) {
      pageNumFrag += options.pageNumFrag.replaceAll('#pageNum#', i).replaceAll('#liClass#', i === tools.getCurrentPage() ? 'selected j-num' : 'j-num');
    }

    pagination = pagination.replaceAll('#pageNumFrag#', pageNumFrag).replaceAll('#pageCurrent#', tools.getCurrentPage()).replaceAll('#first#', pr.first).replaceAll('#last#', pr.last).replaceAll('#prev#', pr.prev).replaceAll('#next#', pr.next).replaceAll('#jumpto#', pr.jumpto).replaceAll('#jump#', pr.jump);
    this.$element.html(pagination);
    var $first = this.$element.find(options.first);
    var $prev = this.$element.find(options.prev);
    var $next = this.$element.find(options.next);
    var $last = this.$element.find(options.last);

    if (tools.hasPrev()) {
      $first.add($prev).find('> span').hide();

      _bindEvent($prev, tools.getCurrentPage() - 1);

      _bindEvent($first, 1);
    } else {
      $first.add($prev).addClass('disabled').find('> a').hide();
    }

    if (tools.hasNext()) {
      $next.add($last).find('> span').hide();

      _bindEvent($next, tools.getCurrentPage() + 1);

      _bindEvent($last, tools.pageNums());
    } else {
      $next.add($last).addClass('disabled').find('> a').hide();
    }

    this.$element.find(options.nums).each(function (i) {
      _bindEvent($(this), i + interval.start);
    });
    this.$element.find(options.jump).each(function () {
      var $inputBox = $(this).find(':text');
      var $button = $(this).find('.goto');
      $button.on('click', function () {
        var pageCurrent = $inputBox.val();
        var pagingInfo = {
          pageCurrent: pageCurrent,
          pageSize: options.pageSize
        };

        if (pageCurrent && pageCurrent.isPositiveInteger()) {
          that.setClientPaging(pagingInfo);
          $(this).bjuiajax('pageCallback', pagingInfo, that.$element.closest('.bjui-layout'));
        }
      });
      $inputBox.keyup(function (e) {
        if (e.keyCode === BJUI.keyCode.ENTER) $button.trigger('click');
      });
    });

    function _bindEvent($target, pageCurrent) {
      $target.on('click', function (e) {
        var pagingInfo = {
          pageCurrent: pageCurrent,
          pageSize: that.options.pageSize
        };
        that.setClientPaging(pagingInfo);
        $(this).bjuiajax('pageCallback', pagingInfo, that.$element.closest('.bjui-layout'));
        e.preventDefault();
      });
    }
  };

  Pagination.prototype.changePagesize = function () {
    var that = this;
    var pageSize = that.$element.val();
    var pagingInfo = {
      pageSize: pageSize
    };

    if (!isNaN(pageSize)) {
      that.setClientPaging(pagingInfo);
      that.$element.bjuiajax('pageCallback', pagingInfo, that.$element.closest('.bjui-layout'));
    }
  };

  Pagination.prototype.orderBy = function (options) {
    var that = this;
    that.$element.css({
      cursor: 'pointer'
    }).click(function () {
      var orderField = $(this).data('orderField');
      var orderDirection = $(this).data('orderDirection');
      var orderInfo = {
        orderField: orderField,
        orderDirection: orderDirection
      };
      that.setClientPaging(orderInfo);
      $(this).bjuiajax('pageCallback', orderInfo, that.$element.closest('.bjui-layout'));
    });
  };

  Pagination.prototype.destroy = function () {
    this.$element.removeData('bjui.pagination').empty();
  };

  Pagination.prototype.getTarget = function () {
    var that = this;
    var $target;
    if (that.$element.closest('.bjui-layout').length) $target = that.$element.closest('.bjui-layout');else if (that.$element.closest('.navtab-panel').length) $target = $.CurrentNavtab;else $target = $.CurrentDialog;
    return $target;
  };

  Pagination.prototype.getClientPaging = function () {
    return this.getTarget().data('bjui.clientPaging');
  };

  Pagination.prototype.setClientPaging = function (clientPaging) {
    if (BJUI.ui.clientPaging) {
      var $target = this.getTarget();
      $target.data('bjui.clientPaging', $.extend({}, $target.data('bjui.clientPaging') || {}, clientPaging));
    }
  };

  Pagination.prototype.setClientOrder = function (clientOrder) {
    if (BJUI.ui.clientPaging) {
      var clientPaging = this.getClientPaging();
      if (!clientPaging || !clientPaging.orderField) this.setClientPaging(clientOrder);
    }
  };

  Pagination.prototype.setPagingAndOrderby = function ($target) {
    var clientPaging = $target.data('bjui.clientPaging');
    $target.find('[data-toggle="pagination"]').pagination('destroy').pagination(clientPaging);

    if (clientPaging.pageSize) {
      $target.find('select[data-toggle-change="changepagesize"]').selectpicker('val', clientPaging.pageSize);
    }

    if (clientPaging.orderField) {
      $target.find('th[data-order-field="' + clientPaging.orderField + '"]').addClass(clientPaging.orderDirection).siblings().removeClass('asc desc');
    }
  }; // PAGINATION PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, Pagination.DEFAULTS, $this.data(), _typeof(option) === 'object' && option);
      var data = $this.data('bjui.pagination');
      if (!data) $this.data('bjui.pagination', data = new Pagination(this, options));

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      } else {
        data.init();
      }
    });
  }

  var old = $.fn.pagination;
  $.fn.pagination = Plugin;
  $.fn.pagination.Constructor = Pagination; // PAGINATION NO CONFLICT
  // =================

  $.fn.pagination.noConflict = function () {
    $.fn.pagination = old;
    return this;
  }; // PAGINATION DATA-API
  // ==============


  $(document).on(BJUI.eventType.initUI, function (e) {
    var $this = $(e.target).find('[data-toggle="pagination"]');
    if (!$this.length) return;
    Plugin.call($this);
  });
  $(document).on('change.bjui.pagination.data-api', 'select[data-toggle-change="changepagesize"]', function (e) {
    var $this = $(this);
    Plugin.call($this, 'changePagesize');
    e.preventDefault();
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-plugins.js":
/*!********************************!*\
  !*** ./src/js/bjui-plugins.js ***!
  \********************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-plugins.js  v1.2
 * @author K'naan (xknaan@163.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-plugins.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict';

  $(document).on(BJUI.eventType.initUI, function (e) {
    var $box = $(e.target); // UI init begin...

    var $boolCheck = $box.find('[data-toggle="boolcheck"]');
    $boolCheck.each(function (i) {
      var $element = $(this);
      var name = $element.attr('name');
      $element.removeAttr('name');
      var $input;

      if (name) {
        var value = $element.is(':checked') ? 1 : 0;
        $input = $('<input type="hidden" value="' + value + '" name="' + name + '">').appendTo($element.parent());
      }

      $element.iCheck({
        checkboxClass: 'icheckbox_minimal-purple',
        radioClass: 'iradio_minimal-purple',
        increaseArea: '20%' // optional

      }).on('ifChecked', function () {
        if ($input) {
          $input.val(1);
        }
      }).on('ifUnchecked', function () {
        if ($input) {
          $input.val(0);
        }
      });
    });
    /* i-check */

    var $icheck = $box.find('[data-toggle="icheck"]');
    $icheck.each(function (i) {
      var $element = $(this);
      var id = $element.attr('id');
      var name = $element.attr('name');
      var label = $element.data('label');
      if (label) $element.after('<label for="' + id + '" class="ilabel">' + label + '</label>');
      $element.on('ifCreated', function (e) {
        /* Fixed validate msgbox position */
        var $parent = $(this).closest('div');
        var $ilabel = $parent.next('[for="' + id + '"]');
        $parent.attr('data-icheck', name);
        $ilabel.attr('data-icheck', name);
      }).iCheck({
        checkboxClass: 'icheckbox_minimal-purple',
        radioClass: 'iradio_minimal-purple',
        increaseArea: '20%' // optional

      }).on('ifChanged', function () {
        /* Trigger validation */
        $(this).trigger('validate');
      });
      if ($element.prop('disabled')) $element.iCheck('disable');
    });
    /* i-check check all */

    $icheck.filter('.checkboxCtrl').on('ifChanged', function (e) {
      var checked = e.target.checked === true ? 'check' : 'uncheck';
      var group = $(this).data('group');
      $box.find(':checkbox[name="' + group + '"]').iCheck(checked);
    });
    /* fixed ui style */

    $box.find(':text, :password, textarea, :button, a.btn').each(function () {
      var $element = $(this);
      var icon;

      var _icon;

      var $tabledit = $element.closest('table.bjui-tabledit');

      if (($element.is(':text') || $element.is(':password') || $element.isTag('textarea')) && !$element.hasClass('form-control')) {
        $element.addClass('form-control');
      }

      if ($element.is(':button')) {
        icon = $element.data('icon');
        var oldClass = $element.attr('class');

        if (!$element.hasClass('btn')) {
          $element.removeClass().addClass('btn').addClass(oldClass);
        }

        if (icon) {
          _icon = 'fa-' + icon.replace('fa-', '');

          if (!$element.data('bjui.icon')) {
            $element.html('<i class="fa ' + _icon + '"></i> ' + $element.html()).data('bjui.icon', true);
          }
        }
      }

      if ($element.isTag('a')) {
        icon = $element.data('icon');

        if (icon) {
          _icon = 'fa-' + icon.replace('fa-', '');

          if (!$element.data('bjui.icon')) {
            $element.html('<i class="fa ' + _icon + '"></i> ' + $element.html()).data('bjui.icon', true);
          }
        }
      }

      if ($element.isTag('textarea')) {
        var toggle = $element.data('toggle');
        if (toggle && toggle === 'autoheight' && $.fn.autosize) $element.addClass('autosize').autosize();
      }

      if (!$tabledit.length) {
        // 添加size%支持
        var size = $element.attr('size') || $element.attr('cols');
        if (!size) return;
        var width = 0;

        if (size.charAt(size.length - 1) !== '%') {
          width = size * 10;
        } else {
          width = size;
        }

        if (width) $element.css('width', width);
      }
    });
    /* form validate */

    $box.find('form[data-toggle="validate"]').each(function () {
      var $element = $(this);
      var alertmsg = typeof $element.data('alertmsg') === 'undefined' ? true : $element.data('alertmsg');
      $(this).validator({
        valid: function valid(form) {
          $(form).bjuiajax('ajaxForm', $(form).data());
        },
        validClass: 'ok',
        theme: 'red_right_effect'
      }).on('invalid.form', function (e, form, errors) {
        if (alertmsg) $(form).alertmsg('error', FRAG.validateErrorMsg.replace('#validatemsg#', BJUI.regional.validatemsg).replaceMsg(errors.length));
      });
    });
    /* moreSearch */

    $box.find('[data-toggle="moresearch"]').each(function () {
      var $element = $(this);
      var $parent = $element.closest('.bjui-pageHeader');
      var $more = $parent && $parent.find('.bjui-moreSearch');
      var name = $element.data('name');
      if (!$element.attr('title')) $element.attr('title', '更多查询条件');
      $element.click(function (e) {
        if (!$more.length) {
          BJUI.debug('Not created \'moresearch\' box[class="bjui-moreSearch"]!');
          return;
        }

        $more.css('top', $parent.outerHeight() - 1);

        if ($more.is(':visible')) {
          $element.html('<i class="fa fa-angle-double-down"></i>');
          if (name) $('body').data('moresearch.' + name, false);
        } else {
          $element.html('<i class="fa fa-angle-double-up"></i>');
          if (name) $('body').data('moresearch.' + name, true);
        }

        $more.fadeToggle('slow', 'linear');
        e.preventDefault();
      });

      if (name && $('body').data('moresearch.' + name)) {
        $more.css('top', $parent.outerHeight() - 1).fadeIn();
        $element.html('<i class="fa fa-angle-double-up"></i>');
      }
    });
    /* bootstrap - select */

    var $selectpicker = $box.find('select[data-toggle="selectpicker"]');

    var bjui_select_linkage = function bjui_select_linkage($obj, $next) {
      var refurl = $obj.data('refurl');

      var _setEmpty = function _setEmpty($select) {
        var $_nextselect = $($select.data('nextselect'));

        if ($_nextselect && $_nextselect.length) {
          var emptytxt = $_nextselect.data('emptytxt') || '&nbsp;';
          $_nextselect.html('<option>' + emptytxt + '</option>').selectpicker('refresh');

          _setEmpty($_nextselect);
        }
      };

      if ($next && $next.length && refurl) {
        var val = $obj.data('val');
        var nextVal = $next.data('val');
        if (typeof val === 'undefined') val = $obj.val();
        $.ajax({
          type: 'POST',
          dataType: 'json',
          url: refurl.replace('{value}', encodeURIComponent(val)),
          cache: false,
          data: {},
          success: function success(json) {
            if (!json) return;
            var html = '';
            var selected = '';
            $.each(json, function (i) {
              var value, label;

              if (json[i] && json[i].length) {
                value = json[i][0];
                label = json[i][1];
              } else {
                value = json[i].value;
                label = json[i].label;
              }

              if (typeof nextVal !== 'undefined') selected = value === nextVal ? ' selected' : '';
              html += '<option value="' + value + '"' + selected + '>' + label + '</option>';
            });
            $obj.removeAttr('data-val').removeData('val');
            $next.removeAttr('data-val').removeData('val');

            if (!html) {
              html = $next.data('emptytxt') || '&nbsp;';
              html = '<option>' + html + '</option>';
            }

            $next.html(html).selectpicker('refresh');

            _setEmpty($next);
          },
          error: BJUI.ajaxError
        });
      }
    };

    $selectpicker.each(function () {
      var $element = $(this);
      var options = $element.data();
      var $next = $(options.nextselect);
      $element.addClass('show-tick');
      if (!options.style) $element.data('style', 'btn-default');
      if (!options.width) $element.data('width', 'auto');
      if (!options.container) $element.data('container', 'body');else if (options.container === true) $element.attr('data-container', 'false').data('container', false);
      $element.selectpicker();

      if ($next && $next.length && typeof $next.data('val') !== 'undefined') {
        bjui_select_linkage($element, $next);
      }
    });
    /* bootstrap - select - linkage && Trigger validation */

    $selectpicker.change(function () {
      var $element = $(this);
      var $nextselect = $($element.data('nextselect'));
      bjui_select_linkage($element, $nextselect);
      /* Trigger validation */

      if ($element.attr('aria-required')) {
        $element.trigger('validate');
      }
    });
    /* zTree - plugin */

    $box.find('[data-toggle="ztree"]').each(function () {
      var $this = $(this);
      var op = $this.data();
      var options = op.options;

      var _setting;

      if (options && typeof options === 'string') options = options.toObj();
      if (options) $.extend(op, _typeof(options) === 'object' && options);
      _setting = op.setting;

      if (!op.nodes) {
        op.nodes = [];
        $this.find('> li').each(function () {
          var $li = $(this);
          var node = $li.data();
          if (node.pid) node.pId = node.pid;
          node.name = $li.html();
          op.nodes.push(node);
        });
        $this.empty();
      } else {
        if (typeof op.nodes === 'string') {
          if (op.nodes.trim().startsWith('[') || op.nodes.trim().startsWith('{')) {
            op.nodes = op.nodes.toObj();
          } else {
            op.nodes = op.nodes.toFunc();
          }
        }

        if (typeof op.nodes === 'function') {
          op.nodes = op.nodes.call(this);
        }

        $this.removeAttr('data-nodes');
      }

      if (!op.showRemoveBtn) op.showRemoveBtn = false;
      if (!op.showRenameBtn) op.showRenameBtn = false;
      if (op.addHoverDom && typeof op.addHoverDom !== 'function') op.addHoverDom = op.addHoverDom === 'edit' ? _addHoverDom : op.addHoverDom.toFunc();
      if (op.removeHoverDom && typeof op.removeHoverDom !== 'function') op.removeHoverDom = op.removeHoverDom === 'edit' ? _removeHoverDom : op.removeHoverDom.toFunc();
      if (!op.maxAddLevel) op.maxAddLevel = 2;
      var setting = {
        view: {
          addHoverDom: op.addHoverDom || null,
          removeHoverDom: op.removeHoverDom || null,
          addDiyDom: op.addDiyDom ? op.addDiyDom.toFunc() : null
        },
        edit: {
          enable: op.editEnable,
          showRemoveBtn: op.showRemoveBtn,
          showRenameBtn: op.showRenameBtn
        },
        check: {
          enable: op.checkEnable,
          chkStyle: op.chkStyle,
          radioType: op.radioType
        },
        callback: {
          onClick: op.onClick ? op.onClick.toFunc() : null,
          beforeDrag: op.beforeDrag ? op.beforeDrag.toFunc() : _beforeDrag,
          beforeDrop: op.beforeDrop ? op.beforeDrop.toFunc() : _beforeDrop,
          onDrop: op.onDrop ? op.onDrop.toFunc() : null,
          onCheck: op.onCheck ? op.onCheck.toFunc() : null,
          beforeRemove: op.beforeRemove ? op.beforeRemove.toFunc() : null,
          onRemove: op.onRemove ? op.onRemove.toFunc() : null,
          onNodeCreated: _onNodeCreated,
          onCollapse: _onCollapse,
          onExpand: _onExpand
        },
        data: {
          simpleData: {
            enable: op.simpleData || true
          },
          key: {
            title: op.title || ''
          }
        }
      };
      if (_setting && typeof _setting === 'string') _setting = _setting.toObj();
      if (_setting) $.extend(true, setting, _typeof(_setting) === 'object' && _setting);
      $.fn.zTree.init($this, setting, op.nodes);
      var IDMark_A = '_a';
      var zTree = $.fn.zTree.getZTreeObj($this.attr('id'));
      if (op.expandAll) zTree.expandAll(true); // onCreated

      function _onNodeCreated(event, treeId, treeNode) {
        if (treeNode.faicon) {
          var $a = $('#' + treeNode.tId + '_a');

          if (!$a.data('faicon')) {
            $a.data('faicon', true).addClass('faicon').find('> span.button').append('<i class="fa fa-' + treeNode.faicon + '"></i>');
          }
        }

        if (op.onNodeCreated) {
          op.onNodeCreated.toFunc().call(this, event, treeId, treeNode);
        }
      } // onCollapse


      function _onCollapse(event, treeId, treeNode) {
        if (treeNode.faiconClose) {
          $('#' + treeNode.tId + '_ico').find('> i').attr('class', 'fa fa-' + treeNode.faiconClose);
        }

        if (op.onCollapse) {
          op.onCollapse.toFunc().call(this, event, treeId, treeNode);
        }
      } // onExpand


      function _onExpand(event, treeId, treeNode) {
        if (treeNode.faicon && treeNode.faiconClose) {
          $('#' + treeNode.tId + '_ico').find('> i').attr('class', 'fa fa-' + treeNode.faicon);
        }

        if (op.onExpand) {
          op.onExpand.toFunc().call(this, event, treeId, treeNode);
        }
      } // add button, del button


      function _addHoverDom(treeId, treeNode) {
        var level = treeNode.level;
        var $obj = $('#' + treeNode.tId + IDMark_A);
        var $add = $('#diyBtn_add_' + treeNode.id);
        var $del = $('#diyBtn_del_' + treeNode.id);

        if (!$add.length) {
          if (level < op.maxAddLevel) {
            $add = $('<span class="tree_add" id="diyBtn_add_' + treeNode.id + '" title="添加"></span>');
            $add.appendTo($obj);
            $add.on('click', function () {
              zTree.addNodes(treeNode, {
                name: '新增Item'
              });
            });
          }
        }

        if (!$del.length) {
          $del = $('<span class="tree_del" id="diyBtn_del_' + treeNode.id + '" title="删除"></span>');
          $del.appendTo($obj).on('click', function (event) {
            var delFn = function delFn() {
              $del.alertmsg('confirm', '确认要删除 ' + treeNode.name + ' 吗？', {
                okCall: function okCall() {
                  zTree.removeNode(treeNode);

                  if (op.onRemove) {
                    var fn = op.onRemove.toFunc();
                    if (fn) fn.call(this, event, treeId, treeNode);
                  }
                },
                cancelCall: function cancelCall() {}
              });
            };

            if (op.beforeRemove) {
              var fn = op.beforeRemove.toFunc();

              if (fn) {
                var isdel = fn.call(fn, treeId, treeNode);
                if (isdel && isdel === true) delFn();
              }
            } else {
              delFn();
            }
          });
        }
      } // remove add button && del button


      function _removeHoverDom(treeId, treeNode) {
        var $add = $('#diyBtn_add_' + treeNode.id);
        var $del = $('#diyBtn_del_' + treeNode.id);

        if ($add && $add.length) {
          $add.off('click').remove();
        }

        if ($del && $del.length) {
          $del.off('click').remove();
        }
      } // Drag


      function _beforeDrag(treeId, treeNodes) {
        for (var i = 0; i < treeNodes.length; i++) {
          if (treeNodes[i].drag === false) {
            return false;
          }
        }

        return true;
      }

      function _beforeDrop(treeId, treeNodes, targetNode, moveType) {
        return targetNode ? targetNode.drop !== false : true;
      }
    });
    /* zTree - drop-down selector */

    var $selectzTree = $box.find('[data-toggle="selectztree"]');
    $selectzTree.each(function () {
      var $this = $(this);
      var options = $this.data();
      var $tree = $(options.tree);
      var h = $this.outerHeight();
      options.width = options.width || $this.outerWidth();
      options.height = options.height || 'auto';
      if (!$tree || !$tree.length) return;
      var treeid = $tree.attr('id');
      var $box = $('#' + treeid + '_select_box');

      var setPosition = function setPosition($box) {
        var top = $this.offset().top;
        var left = $this.offset().left;
        var $clone = $tree.clone().appendTo($('body'));
        var treeHeight = $clone.outerHeight();
        $clone.remove();
        var offsetBot = $(window).height() - treeHeight - top - h;
        var maxHeight = $(window).height() - top - h;
        if (options.height === 'auto' && offsetBot < 0) maxHeight = maxHeight + offsetBot;
        $box.css({
          top: top + h,
          left: left,
          'max-height': maxHeight
        });
      };

      $this.click(function () {
        if ($box && $box.length) {
          setPosition($box);
          $box.show();
          return;
        }

        var zindex = 2;
        var dialog = $.CurrentDialog;

        if (dialog && dialog.length) {
          zindex = dialog.css('zIndex') + 1;
        }

        $box = $('<div id="' + treeid + '_select_box" class="tree-box"></div>').css({
          position: 'absolute',
          'zIndex': zindex,
          'min-width': options.width,
          height: options.height,
          overflow: 'auto',
          background: '#FAFAFA',
          border: '1px #EEE solid'
        }).hide().appendTo($('body'));
        $tree.appendTo($box).css('width', '100%').data('fromObj', $this).removeClass('hide').show();
        setPosition($box);
        $box.show();
      });
      $('body').on('mousedown', function (e) {
        var $target = $(e.target);

        if (!($this[0] === e.target || $box && $box.length > 0 && $target.closest('.tree-box').length > 0)) {
          $box.hide();
        }
      });
      var $scroll = $this.closest('.bjui-pageContent');

      if ($scroll && $scroll.length) {
        $scroll.scroll(function () {
          if ($box && $box.length) {
            setPosition($box);
          }
        });
      } // destroy selectzTree


      $this.on('destroy.bjui.selectztree', function () {
        $box.remove();
      });
    });
    /**
     * bootstrap panel 手风琴 accordion,
     * heightbox 填充目标元素
     * height 每页元素高，默认为填充目标元素高度
     * offsety 每页高度偏移, 内容高度 height - offsety
     */

    $box.find('[data-toggle="accordion"]').each(function () {
      var $this = $(this);
      var hBox = $this.data('heightbox');
      var height = $this.data('height');

      var initAccordion = function initAccordion(hBox, height) {
        var offsety = $this.data('offsety') || 0;
        height = height || $(hBox).outerHeight() - offsety * 1;
        var $pheader = $this.find('.panel-heading');
        var h1 = $pheader.outerHeight();
        h1 = (h1 + 1) * $pheader.length;
        $this.css('height', height);
        height = height - h1;
        $this.find('.panel-collapse').find('.panel-body').css('height', height);
      };

      if ($this.find('> .panel').length) {
        if (hBox || height) {
          initAccordion(hBox, height);
          $(window).resize(function () {
            initAccordion(hBox, height);
          });
          $this.on('hidden.bs.collapse', function (e) {
            var $last = $(this).find('> .panel:last');
            var $a = $last.find('> .panel-heading > h4 > a');

            if ($a.hasClass('collapsed')) {
              $last.css('border-bottom', '1px #ddd solid');
            }
          });
        }
      }
    });
    /* Kindeditor */

    $box.find('[data-toggle="kindeditor"]').each(function () {
      var $editor = $(this);
      var options = $editor.data();

      if (options.items && typeof options.items === 'string') {
        options.items = options.items.replaceAll('\'', '').replaceAll(' ', '').split(',');
      }

      if (options.afterUpload) options.afterUpload = options.afterUpload.toFunc();
      if (options.afterSelectFile) options.afterSelectFile = options.afterSelectFile.toFunc();
      if (options.confirmSelect) options.confirmSelect = options.confirmSelect.toFunc();
      var htmlTags = {
        font: [
          /* 'color', 'size', 'face', '.background-color'*/
        ],
        span: ['.color', '.background-color', '.font-size', '.font-family'
        /* '.color', '.background-color', '.font-size', '.font-family', '.background',
                      '.font-weight', '.font-style', '.text-decoration', '.vertical-align', '.line-height'*/
        ],
        div: ['.margin', '.padding', '.text-align'
        /* 'align', '.border', '.margin', '.padding', '.text-align', '.color',
                      '.background-color', '.font-size', '.font-family', '.font-weight', '.background',
                      '.font-style', '.text-decoration', '.vertical-align', '.margin-left'*/
        ],
        table: ['align', 'width'
        /* 'border', 'cellspacing', 'cellpadding', 'width', 'height', 'align', 'bordercolor',
                      '.padding', '.margin', '.border', 'bgcolor', '.text-align', '.color', '.background-color',
                      '.font-size', '.font-family', '.font-weight', '.font-style', '.text-decoration', '.background',
                      '.width', '.height', '.border-collapse'*/
        ],
        'td,th': ['align', 'valign', 'width', 'height', 'colspan', 'rowspan'
        /* 'align', 'valign', 'width', 'height', 'colspan', 'rowspan', 'bgcolor',
                      '.text-align', '.color', '.background-color', '.font-size', '.font-family', '.font-weight',
                      '.font-style', '.text-decoration', '.vertical-align', '.background', '.border'*/
        ],
        a: ['href', 'target', 'name'],
        embed: ['src', 'width', 'height', 'type', 'loop', 'autostart', 'quality', '.width', '.height', 'align', 'allowscriptaccess'],
        img: ['src', 'width', 'height', 'border', 'alt', 'title', 'align', '.width', '.height', '.border'],
        'p,ol,ul,li,blockquote,h1,h2,h3,h4,h5,h6': ['class', 'align', '.text-align', '.color',
        /* '.background-color', '.font-size', '.font-family', '.background',*/
        '.font-weight', '.font-style', '.text-decoration', '.vertical-align', '.text-indent', '.margin-left'],
        pre: ['class'],
        hr: ['class', '.page-break-after'],
        'br,tbody,tr,strong,b,sub,sup,em,i,u,strike,s,del': []
      };
      KindEditor.create($editor, {
        pasteType: options.pasteType,
        minHeight: options.minHeight || 260,
        autoHeightMode: options.autoHeight || false,
        items: options.items || KindEditor.options.items,
        uploadJson: options.uploadJson || BJUI.KindEditor.uploadJson,
        fileManagerJson: options.fileManagerJson || BJUI.KindEditor.fileManagerJson,
        allowFileManager: options.allowFileManager || true,
        fillDescAfterUploadImage: options.fillDescAfterUploadImage || true,
        // 上传图片成功后转到属性页，为false则直接插入图片[设为true方便自定义函数(X_afterSelect)]
        afterUpload: options.afterUpload,
        afterSelectFile: options.afterSelectFile,
        X_afterSelect: options.confirmSelect,
        htmlTags: htmlTags,
        cssPath: [BJUI.PLUGINPATH + 'kindeditor/editor-content.css', BJUI.PLUGINPATH + 'kindeditor/plugins/code/prettify.css'],
        afterBlur: function afterBlur() {
          this.sync();
        }
      });
    });
    /* colorpicker */

    $box.find('[data-toggle="colorpicker"]').each(function () {
      var $this = $(this);
      var isbgcolor = $this.data('bgcolor');
      $this.colorpicker();

      if (isbgcolor) {
        $this.on('changeColor', function (ev) {
          $this.css('background-color', ev.color.toHex());
        });
      }
    });
    $box.find('[data-toggle="clearcolor"]').each(function () {
      var $this = $(this);
      var $target = $this.data('target') ? $($this.data('target')) : null;

      if ($target && $target.length) {
        $this.click(function () {
          $target.val('');
          if ($target.data('bgcolor')) $target.css('background-color', '');
        });
      }
    });
    /* tooltip */

    $box.find('[data-toggle="tooltip"]').each(function () {
      $(this).tooltip();
    });
    /* fixed dropdown-menu width */

    $box.find('[data-toggle="dropdown"]').parent().on('show.bs.dropdown', function (e) {
      var $this = $(this);
      var width = $this.outerWidth();
      var $menu = $this.find('> .dropdown-menu');
      var menuWidth = $menu.outerWidth();

      if (width > menuWidth) {
        $menu.css('min-width', width);
      }
    });
    /* not validate */

    $box.find('form[data-toggle="ajaxform"]').each(function () {
      $(this).validator({
        ignore: ':input'
      });
      $(this).validator('destroy');
    });
    /**
     * jsonEditor
     */

    $box.find('textarea[data-toggle=jsoneditor]').each(function () {
      var $this = $(this);
      $this.hide();
      setTimeout(function () {
        var codeMirror = CodeMirror.fromTextArea($this[0], {
          lineNumbers: true,
          mode: 'application/json',
          gutters: ['CodeMirror-lint-markers'],
          theme: 'rubyblue',
          lint: true
        });
        codeMirror.on('change', function (cm) {
          $this.val(cm.getValue());
        });
      }, 100);
    });
    $box.find('[data-toggle=clipboard]').each(function () {
      var $this = $(this);
      var data = $this.data();
      var opts = {};

      if (data.target) {
        opts.target = function () {
          return $box.find(data.target)[0];
        };
      } else if (data.text) {
        opts.text = function () {
          return data.text;
        };
      }

      var clipboard = new ClipboardJS(this, opts);
      clipboard.on('error', function (e) {
        console.error('Action:', e.action);
        console.error('Trigger:', e.trigger);
        $box.alertmsg('error', '复制失败！'); // e.clearSelection()
      });
    });
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-regional.zh-CN.js":
/*!***************************************!*\
  !*** ./src/js/bjui-regional.zh-CN.js ***!
  \***************************************/
/***/ (() => {

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-regional.zh-CN.js  v1.2
 * @author K'naan (xknaan@163.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-regional.zh-CN.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict';

  $(function () {
    /* 消息提示框 */
    BJUI.setRegional('alertmsg', {
      title: {
        error: '错误提示',
        info: '信息提示',
        warn: '警告信息',
        correct: '成功信息',
        confirm: '确认信息'
      },
      btnMsg: {
        ok: '确定',
        yes: '是',
        no: '否',
        cancel: '取消'
      }
    });
    /* dialog */

    BJUI.setRegional('dialog', {
      close: '关闭',
      maximize: '最大化',
      restore: '还原',
      minimize: '最小化',
      title: '弹出窗口'
    });
    /* order by */

    BJUI.setRegional('orderby', {
      asc: '升序',
      desc: '降序'
    });
    /* 分页 */

    BJUI.setRegional('pagination', {
      total: '总记录数/总页数',
      first: '首页',
      last: '末页',
      prev: '上一页',
      next: '下一页',
      jumpto: '输入跳转页码，回车确认',
      jump: '跳转',
      page: '页',
      refresh: '刷新'
    });
    BJUI.setRegional('datagrid', {
      asc: '升序',
      desc: '降序',
      showhide: '显示/隐藏 列',
      filter: '过滤',
      clear: '清除',
      lock: '锁定列',
      unlock: '解除锁定',
      add: '添加',
      edit: '编辑',
      save: '保存',
      update: '更新',
      cancel: '取消',
      del: '删除',
      prev: '上一条',
      next: '下一条',
      refresh: '刷新',
      query: '查询',
      'import': '导入',
      'export': '导出',
      all: '全部',
      'true': '是',
      'false': '否',
      selectMsg: '未选中任何行！',
      editMsg: '请先保存编辑行！',
      saveMsg: '没有需要保存的行！',
      delMsg: '确定要删除该行吗？',
      delMsgM: '确定要删除选中行？'
    });
    /* ajax加载提示 */

    BJUI.setRegional('progressmsg', '正在努力加载数据，请稍等...');
    /* 日期选择器 */

    BJUI.setRegional('datepicker', {
      close: '关闭',
      prev: '上月',
      next: '下月',
      clear: '清空',
      ok: '确定',
      dayNames: ['日', '一', '二', '三', '四', '五', '六'],
      monthNames: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月']
    });
    /* navtab右键菜单  */

    BJUI.setRegional('navtabCM', {
      refresh: '刷新本标签',
      close: '关闭本标签',
      closeother: '关闭其他标签',
      closeall: '关闭所有标签'
    });
    /* dialog右键菜单 */

    BJUI.setRegional('dialogCM', {
      refresh: '刷新本窗口',
      close: '关闭本窗口',
      closeother: '关闭其他窗口',
      closeall: '关闭所有窗口'
    });
    /* upload按钮提示 */

    BJUI.setRegional('upload', {
      upConfirm: '开始上传',
      upPause: '暂停上传',
      upCancel: '取消上传'
    });
    /* 503错误提示 */

    BJUI.setRegional('statusCode_503', '服务器当前负载过大或者正在维护！');
    /* timeout提示 */

    BJUI.setRegional('sessiontimeout', '会话超时，请重新登陆！');
    /* 占位符对应选择器无有效值提示 */

    BJUI.setRegional('plhmsg', '占位符对应的选择器无有效值！');
    /* 未定义复选框组名提示 */

    BJUI.setRegional('nocheckgroup', '未定义选中项的组名[复选框的"data-group"]！');
    /* 未选中复选框提示 */

    BJUI.setRegional('notchecked', '未选中任何一项！');
    /* 未选中下拉菜单提示 */

    BJUI.setRegional('selectmsg', '请选择一个选项！');
    /* 表单验证错误提示信息 */

    BJUI.setRegional('validatemsg', '提交的表单中 [{0}] 个字段有错误，请更正后再提交！');
    /* 框架名称 */

    BJUI.setRegional('uititle', 'B-JUI');
    /* 主navtab标题 */

    BJUI.setRegional('maintab', '我的主页');
    /**
     *
     *  Plugins regional setting
     */

    /* nice validate - Global configuration */

    $.validator && $.validator.config({
      // stopOnError: false,
      // theme: 'yellow_right',
      defaultMsg: '{0}格式不正确',
      loadingMsg: '正在验证...',
      // Custom rules
      rules: {
        digits: [/^\d+$/, '请输入整数'],
        number: [/^[\-\+]?((([0-9]{1,3})([,][0-9]{3})*)|([0-9]+))?([\.]([0-9]+))?$/, '请输入有效的数字'],
        letters: [/^[a-z]+$/i, '{0}只能输入字母'],
        datetime: [/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])\s+(2[0123]|(1|0?)[0-9]){1}:([0-5][0-9]){1}:([0-5][0-9]){1}$/, '请输入正确的日期时间，例：yyyy-MM-dd HH:mm:ss'],
        pattern: function pattern(element, params) {
          if (!params) return true;
          var date = element.value.parseDate(params);
          return !date ? this.renderMsg('错误的日期时间格式！', params) : true;
        },
        accept: function accept(element, params) {
          if (!params) return true;
          var ext = params[0];
          return ext === '*' || new RegExp('.(?:' + (ext || 'png|jpg|jpeg|gif') + ')$', 'i').test(element.value) || this.renderMsg('只接受{1}后缀', ext.replace('|', ','));
        }
      }
    });
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-slidebar.js":
/*!*********************************!*\
  !*** ./src/js/bjui-slidebar.js ***!
  \*********************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-slidebar.js  v1.2
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.barDrag.js (author:Roger Wu)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-slidebar.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // SLIDEBAR CLASS INSTANCE
  // ======================

  $(function () {
    $('#bjui-leftside').after('<!-- Adjust the width of Left slide -->').after(FRAG.splitBar).after(FRAG.splitBarProxy);
  }); // SLIDEBAR CLASS DEFINITION
  // ======================

  var Slidebar = function Slidebar(element, options) {
    this.$element = $(element);
    this.$bar = this.$element.find('#bjui-sidebar');
    this.$sbar = this.$element.find('#bjui-sidebar-s');
    this.$accordionmenu = this.$bar.find('#bjui-accordionmenu');
    this.$lock = this.$bar.find('> .toggleCollapse > .lock');
    this.$navtab = $('#bjui-navtab');
    this.$collapse = this.$sbar.find('.collapse');
    this.$split = $('#bjui-splitBar');
    this.$split2 = $('#bjui-splitBarProxy');
    this.isfloat = false;
    this.options = options;
  };

  Slidebar.prototype.lock = function () {
    var that = this;
    var cleft = that.$bar.outerWidth() + 4;
    var cwidth = BJUI.windowWidth - $('#bjui-sidebar').width() - 6;
    that.faLock();
    that.hoverLock();
    that.$sbar.animate({
      left: -10
    }, 20);
    that.$bar.removeClass('shadown');
    that.isfloat = false;
    that.$navtab.animate({
      left: cleft,
      width: cwidth
    }, 500, function () {
      $(window).trigger(BJUI.eventType.resizeGrid);
    });
    that.$split.show();
  };

  Slidebar.prototype.unlock = function () {
    var that = this;
    var barleft = 0 - that.$bar.outerWidth();
    var cwidth = BJUI.windowWidth - 6;
    that.faUnLock();
    that.hoverUnLock();
    that.$navtab.animate({
      left: 6,
      width: cwidth
    }, 400);
    that.$bar.animate({
      left: barleft
    }, 500, function () {
      that.$sbar.animate({
        left: 0
      }, 200);
      that.$split.hide();
      $(window).trigger(BJUI.eventType.resizeGrid);
    });
    that.isfloat = false;
  };

  Slidebar.prototype.float = function () {
    var that = this;
    that.$sbar.animate({
      left: -10
    }, 200);
    that.$bar.addClass('shadown').animate({
      left: 0
    }, 500);
    that.isfloat = true;
  };

  Slidebar.prototype.hideFloat = function () {
    var that = this;
    var barleft = 0 - that.$bar.outerWidth();
    that.$bar.animate({
      left: barleft - 10
    }, 500, function () {
      that.$sbar.animate({
        left: 0
      }, 100);
    });
    that.isfloat = false;
  };

  Slidebar.prototype.hoverLock = function () {
    var that = this;
    that.$lock.hover(function () {
      that.tipUnLock();
      that.faUnLock();
    }, function () {
      that.tipLock();
      that.faLock();
    });
  };

  Slidebar.prototype.hoverUnLock = function () {
    var that = this;
    that.$lock.hover(function () {
      that.tipLock();
      that.faLock();
    }, function () {
      that.tipUnLock();
      that.faUnLock();
    });
  };

  Slidebar.prototype.tipLock = function () {
    this.$lock.tooltip('dispose').tooltip({
      title: '保持锁定，始终显示导航栏',
      container: 'body'
    });
  };

  Slidebar.prototype.tipUnLock = function () {
    this.$lock.tooltip('dispose').tooltip({
      title: '解除锁定，自动隐藏导航栏',
      container: 'body'
    });
  };

  Slidebar.prototype.faLock = function () {
    this.$lock.find('> i').attr('class', 'fa fa-lock');
  };

  Slidebar.prototype.faUnLock = function () {
    this.$lock.find('> i').attr('class', 'fa fa-unlock-alt');
  };

  Slidebar.prototype.init = function () {
    var that = this;

    if (!BJUI.ui.showSlidebar) {
      that.unlock();
    } else {
      that.hoverLock();
    }

    this.$lock.off('click.bjui.slidebar').on('click.bjui.slidebar', function () {
      if (that.isfloat) {
        that.lock();
      } else {
        that.unlock();
      }

      BJUI.ui.showSlidebar = !BJUI.ui.showSlidebar;
    });
    this.$collapse.hover(function () {
      that.float();
      that.$navtab.click(function () {
        if (that.isfloat) that.hideFloat();
      });
    });
    this.$split.mousedown(function (e) {
      that.$split2.each(function () {
        var $spbar2 = $(this);
        setTimeout(function () {
          $spbar2.show();
        }, 100);
        $spbar2.css({
          visibility: 'visible',
          left: that.$split.css('left')
        }).basedrag($.extend(that.options, {
          obj: that.$bar,
          move: 'horizontal',
          event: e,
          stop: function stop() {
            $(this).css('visibility', 'hidden');
            var move = parseInt($(this).css('left')) - parseInt(that.$split.css('left'));
            var sbarwidth = that.$bar.outerWidth() + move;
            var cleft = parseInt(that.$navtab.css('left')) + move;
            var cwidth = that.$navtab.outerWidth() - move;
            that.$bar.css('width', sbarwidth);
            that.$split.css('left', $(this).css('left'));
            that.$navtab.css({
              left: cleft,
              width: cwidth
            });
          }
        }));
        return false;
      });
    }); // move hnav

    if ($('#bjui-hnav-navbar-box').length) {
      that.moveHnav();
    } // menus-header添加active属性


    that.$accordionmenu.collapse().on('hidden.bs.collapse', function (e) {
      $(this).find('> .panel > .panel-heading').each(function () {
        var $heading = $(this);
        var $a = $heading.find('> h4 > a');

        if ($a.hasClass('collapsed')) {
          $heading.removeClass('active');
          var $panel = $heading.parent();

          if ($panel.is(':last-child')) {
            $panel.removeClass('last-child');
          }
        }
      });
    }).on('shown.bs.collapse', function (e) {
      $(this).find('> .panel > .panel-heading').each(function () {
        var $heading = $(this);
        var $a = $heading.find('> h4 > a');

        if (!$a.hasClass('collapsed')) {
          $heading.addClass('active');
          var $panel = $heading.parent();

          if ($panel.is(':last-child')) {
            $panel.addClass('last-child');
          }
        }
      });
    });
    that.clickMenu();
  }; // 点击菜单


  Slidebar.prototype.clickMenu = function () {
    var that = this;
    that.$bar.on('click', 'ul.menu-items li > a', function (e) {
      e.preventDefault();
      var $a = $(this);
      var $li = $a.parent();
      var options = $a.data('options').toObj();
      var $children = $li.find('> .menu-items-children');

      var onClose = function onClose() {
        $li.removeClass('active');
      };

      var onSwitch = function onSwitch() {
        that.$accordionmenu.find('ul.menu-items li').removeClass('switch');
        $li.addClass('switch');
      };

      $li.addClass('active');

      if (options) {
        options.url = $a.attr('href');

        if (options.url && options.url !== 'javascript:;') {
          options.onClose = onClose;
          options.onSwitch = onSwitch;
          if (!options.title) options.title = $a.text();

          if (!options.target) {
            $a.navtab(options);
          } else {
            $a.dialog(options);
          }
        }
      }

      if ($children.length) {
        $li.toggleClass('open');
      }
    });
  };

  Slidebar.prototype.moveHnav = function () {
    var $hnavbox = $('#bjui-hnav-navbar-box');
    var $hnavbar = $hnavbox.find('> #bjui-hnav-navbar');
    var $hmoreL = $hnavbox.prev();
    var $hmoreR = $hnavbox.next();
    $hmoreL.hover(function () {
      $hnavbar.stop().animate({
        left: 0
      }, 2000, function () {
        $hmoreL.hide();
      });
    }, function () {
      $hnavbar.stop();

      if ($hnavbox.data('hnav.move')) {
        $hmoreR.show();
      }
    }).on('click', function () {
      $hnavbar.stop().animate({
        left: 0
      }, 'fast', function () {
        $hmoreL.hide();
      });
      return false;
    });
    $hmoreR.hover(function () {
      $hnavbar.stop().animate({
        left: $hnavbox.width() - $hnavbox.data('hnav.liw') - 10
      }, 2000, function () {
        $hmoreR.hide();
      });
    }, function () {
      $hnavbar.stop();

      if ($hnavbar.css('left') !== '0px') {
        $hmoreL.show();
      }
    }).on('click', function () {
      $hnavbar.stop().animate({
        left: $hnavbox.width() - $hnavbox.data('hnav.liw') - 10
      }, 'fast', function () {
        $hmoreR.hide();
      });
      return false;
    });
  };

  Slidebar.prototype.initHnav = function () {
    var that = this;
    var title = that.$element.text().trim();
    var $li = that.$element.parent();
    var $box = $('#bjui-accordionmenu');
    var $trees;
    var $items;
    var $panel;
    var $array;
    $trees = $li.find('> .items > ul.ztree');
    $items = $li.find('> .items > ul.menu-items');
    if (!($trees.length || $items.length)) return;
    if ($trees.length) $array = $trees;

    if ($items.length) {
      if (!$array) $array = $items;else $array = $array.add($items);
      $items.find('a').each(function () {
        var $a = $(this);
        var options = $a.data('options');

        if (!$a.data('icon.init') && options && typeof options === 'string') {
          options = options.toObj();

          if (options && options.faicon) {
            options.faicon = options.faicon.trim();
            if (options.faicon.startsWith('fa-')) options.faicon = options.faicon.substr(3);
            $a.prepend('<i class="fa fa-' + options.faicon + '"></i>').data('icon.init', true).attr('title', $a.text());
          }
        }
      });
    }

    $box.empty();
    $array.each(function (i) {
      var $t = $(this);
      var panel;
      var cls;
      var bodycls;
      var faicon = $t.data('faicon');
      var icon = faicon || 'dot-circle-o';
      if ($t.data('tit')) title = $t.data('tit');
      cls = i ? 'collapsed' : '';
      bodycls = i ? '' : ' in';
      panel = FRAG.slidePanel.replaceAll('#id#', 'bjui-collapse' + i).replaceAll('#title#', title).replaceAll('#righticon#', '<i class="fa fa-angle-down"></i>').replaceAll('#class#', cls).replaceAll('#bodyclass#', bodycls);
      if (icon) panel = panel.replaceAll('#icon#', '<i class="fa fa-' + icon + '"></i>');else panel = panel.replaceAll('#icon#', '');
      $panel = $(panel);
      $panel.find('> .panel-collapse > .panel-body').append($t.removeAttr('data-noinit'));
      $box.append($panel);
      if (!i) $panel.collapse('show');
    });
    $('#bjui-sidebar').initui();
    $li.addClass('active').data('bjui.slidebar.hnav.panels', $box.find('> .panel')).siblings().removeClass('active');
  }; // SLIDEBAR PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, $this.data(), _typeof(option) === 'object' && option);
      var data = $this.data('bjui.slidebar');
      if (!data) $this.data('bjui.slidebar', data = new Slidebar(this, options));

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      } else {
        data.init();
      }
    });
  }

  var old = $.fn.slidebar;
  $.fn.slidebar = Plugin;
  $.fn.slidebar.Constructor = Slidebar; // SLIDEBAR NO CONFLICT
  // =================

  $.fn.basedrag.noConflict = function () {
    $.fn.slidebar = old;
    return this;
  }; // SLIDEBAR DATA-API
  // ==============


  $(document).one(BJUI.eventType.afterInitUI, function (e) {
    $('#bjui-leftside').slidebar({
      minW: 150,
      maxW: 700
    });
  });
  $(document).on('click.bjui.slidebar.data-api', '[data-toggle="slidebar"]', function (e) {
    var $li = $(this).parent();
    var $box = $('#bjui-accordionmenu');
    var $panels = $li.data('bjui.slidebar.hnav.panels');
    $box.find('> .panel').detach();

    if ($panels && $panels.length) {
      $box.append($panels);
      $li.addClass('active').siblings().removeClass('active');
    } else {
      Plugin.call($(this), 'initHnav');
    }

    e.preventDefault();
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-spinner.js":
/*!********************************!*\
  !*** ./src/js/bjui-spinner.js ***!
  \********************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-spinner.js  v1.2
 * @author K'naan (xknaan@163.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-spinner.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // SPINNER CLASS DEFINITION
  // ======================

  var Spinner = function Spinner(element, options) {
    this.$element = $(element);
    this.options = options;
    this.tools = this.TOOLS();
    this.$spinner = null;
    this.height = this.$element.addClass('form-control').innerHeight();
    this.ivalue = Number(this.$element.val()) || 0;
  };

  Spinner.DEFAULTS = {
    min: 0,
    max: 100,
    step: 1,
    decimalPlace: 0
  };
  Spinner.EVENTS = {
    afterChange: 'afterchange.bjui.spinner'
  };

  Spinner.prototype.TOOLS = function () {
    var that = this;
    return {
      changeVal: function changeVal($btn) {
        var $input = that.$element;
        var ivalue = Number($input.val()) || Number(that.ivalue);
        var type = $btn.data('add') || -1;
        var istart = that.options.min;
        var iend = that.options.max;
        var istep = that.options.step;

        if (type === 1) {
          if (ivalue <= iend - istep) {
            ivalue = ivalue + istep;
          }
        } else if (type === -1) {
          if (ivalue >= istart + istep) {
            ivalue = ivalue - istep;
          }
        } else if (ivalue > iend) {
          ivalue = iend;
        } else if (ivalue < istart) {
          ivalue = istart;
        }

        if (that.options.decimalPlace) {
          ivalue = ivalue.toFixed(that.options.decimalPlace);
        }

        that.ivalue = ivalue;
        $input.val(ivalue).trigger(Spinner.EVENTS.afterChange, {
          value: ivalue
        });
      }
    };
  };

  Spinner.prototype.init = function () {
    if (isNaN(this.options.min) || isNaN(this.options.max) || isNaN(this.options.step)) {
      BJUI.debug('Spinner Plugin: Parameter is non-numeric type!');
      return;
    }

    this.addBtn();
  };

  Spinner.prototype.addBtn = function () {
    var that = this;
    var $element = that.$element;

    if (!this.$lookBtn && !$element.parent().hasClass('wrap_bjui_btn_box')) {
      this.$spinner = $(FRAG.spinnerBtn);
      $element.css({
        'paddingRight': '13px'
      }).wrap('<span class="wrap_bjui_btn_box"></span>');
      var $box = $element.parent();
      $box.css('position', 'relative');
      this.$spinner.css({
        'height': this.height
      }).appendTo($box);
      this.$spinner.on('selectstart', function () {
        return false;
      });
      var timer = null;
      that.$spinner.find('li').on('click', function (e) {
        that.tools.changeVal($(this));
      }).on('mousedown', function () {
        var $btn = $(this);
        timer = setInterval(function () {
          that.tools.changeVal($btn);
        }, 150);
      }).on('mouseup', function () {
        clearTimeout(timer);
      });
    }
  };

  Spinner.prototype.destroy = function () {
    if (this.$element.parent().hasClass('wrap_bjui_btn_box')) {
      this.$element.parent().find('.bjui-spinner').remove();
      this.$element.unwrap();
    }
  }; // SPINNER PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, Spinner.DEFAULTS, $this.data(), _typeof(option) === 'object' && option);
      var data = $this.data('bjui.spinner');
      if (!data) $this.data('bjui.spinner', data = new Spinner(this, options));

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      } else {
        data.init();
      }
    });
  }

  var old = $.fn.spinner;
  $.fn.spinner = Plugin;
  $.fn.spinner.Constructor = Spinner; // SPINNER NO CONFLICT
  // =================

  $.fn.spinner.noConflict = function () {
    $.fn.spinner = old;
    return this;
  }; // SPINNER DATA-API
  // ==============


  $(document).on(BJUI.eventType.initUI, function (e) {
    var $this = $(e.target).find('input[data-toggle="spinner"]');
    if (!$this.length) return;
    Plugin.call($this);
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-tabledit.js":
/*!*********************************!*\
  !*** ./src/js/bjui-tabledit.js ***!
  \*********************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-tabledit.js  v1.2
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.database.js (author:ZhangHuihua@msn.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-tabledit.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // TABLEDIT CLASS DEFINITION
  // ======================

  var Tabledit = function Tabledit(element, options) {
    this.$element = $(element);
    this.options = options;
    this.tools = this.TOOLS();
    this.$tbody = this.$element.find('> tbody');

    if (!this.$tbody.length) {
      this.$tbody = $('<tbody></tbody>');
      this.$element.append(this.$tbody);
    }

    this.$numAdd = this.$btnAdd = null;
  };

  Tabledit.DEFAULTS = {
    singleNoindex: true
  };
  Tabledit.EVENTS = {
    afterDelete: 'afterdelete.bjui.tabledit'
  };

  Tabledit.prototype.TOOLS = function () {
    var that = this;
    return {
      initSuffix: function initSuffix($tbody) {
        var $trs = $tbody.find('> tr');
        $trs.each(function (i) {
          var $tr = $(this);
          $tr.find(':input, :file, a, label, div').each(function () {
            var $child = $(this);
            var name = $child.attr('name');
            var val = $child.val();
            var fors = $child.attr('for');
            var id = $child.attr('id');
            var href = $child.attr('href');
            var group = $child.attr('data-group');
            var suffix = $child.attr('data-suffix');
            var arrayfix = $child.attr('data-arrayfix');
            if (name) $child.attr('name', name.replaceSuffix(i));
            if (fors) $child.attr('for', fors.replaceSuffix(i));
            if (id) $child.attr('id', id.replaceSuffix(i).replaceSuffix2(i));
            if (href) $child.attr('href', href.replaceSuffix(i));
            if (group) $child.attr('data-group', group.replaceSuffix(i));
            if (suffix) $child.attr('data-suffix', suffix.replaceSuffix(i));
            if (arrayfix) $child.attr('data-arrayfix', arrayfix.replaceSuffix(i));
            if (val && val.indexOf('#index#') >= 0) $child.val(val.replace('#index#', i + 1));

            if ($child.hasClass('no')) {
              var prefix = $child.data('prefix') ? $child.data('prefix') : '';
              $child.val(prefix + (i + 1));
            }
          });
        });
      },
      // Enter for Tab
      initEnter: function initEnter($tbody) {
        var $texts = $tbody.find(':text');
        $texts.each(function (i) {
          $(this).bind('keydown', function (e) {
            if (e.which === BJUI.keyCode.ENTER) {
              var nexInd = i + 1;

              if ($texts.eq(nexInd)) {
                $texts.eq(nexInd).focus();
              }

              e.preventDefault();
            }
          });
        });
        this.initInput($tbody);
      },
      initInput: function initInput($tbody) {
        $tbody.find('> tr > td').each(function () {
          var $span = $(this).find('.input-hold');

          if (!$span.length) {
            $span = $('<span class="input-hold" style="display:block; padding:0 4px; height:0; font-size:12px; visibility: hidden;"></span>');
            $(this).append($span);
          }

          if (!$.support.leadingWhitespace) {
            // for ie8
            $(this).on('propertychange', ':text', function (e) {
              $span.text($(this).val());
            });
          } else {
            $(this).on('input', ':text', function (e) {
              $span.text($(this).val());
            });
          }
        });
      },
      initTbody: function initTbody() {
        var $table = that.$element;
        var $tbody = that.$tbody;
        $tbody.find('> tr').each(function () {
          var $tr = $(this);
          var $tds = $tr.find('> td');
          var $ths = $table.data('bjui.tabledit.tr').clone().find('> th');
          $tr.data('bjui.tabledit.oldTds', $tr.html());
          $ths.each(function (i) {
            var $td = $tds.eq(i);
            var val = $td.data('val');
            var $th = $(this);
            var $child = $th.children();
            var $pic = $th.find('.pic-box');

            if (typeof val === 'undefined') {
              val = $td.html();
            }

            if (!$td.data('noedit')) {
              if ($child.length) {
                if ($child.is('input:checkbox') || $child.is('input:radio')) {
                  $child.filter('[value="' + val + '"]').attr('checked', 'checked');
                } else if ($child.isTag('select')) {
                  $child.find('option[value="' + $td.data('val') + '"]').attr('selected', 'selected');
                } else if ($pic.length) {
                  if ($td.data('val')) $th.find('.pic-name').val($td.data('val'));
                  $pic.html($td.html());
                } else if ($child.hasClass('wrap_bjui_btn_box')) {
                  $child.find('input[data-toggle]').attr('value', val + '');
                } else if ($child.is('textarea')) {
                  $child.html(val);

                  if ($child.attr('data-toggle') === 'kindeditor') {
                    $child.attr('data-toggle-old', 'kindeditor').removeAttr('data-toggle');
                  }
                } else {
                  $child.attr('value', val + '');
                }

                $td.html($th.html());
              }
            }
          });
          $tr.on('dblclick', $.proxy(function (e) {
            _doEdit($tr);
          }, that)).initui();
          that.tools.initSuffix($tbody);

          _doRead($tr);
        });
        $tbody.on('click.bjui.tabledit.readonly', '[data-toggle="doedit"]', function (e) {
          _doEdit($(this).closest('tr'));
        }).on('click.bjui.tabledit.readonly', '[data-toggle="dosave"]', function (e) {
          var $tr = $(this).closest('tr');
          var index = $tr.index();
          var callback = that.options.callback;

          if (that.options.action) {
            $tr.wrap('<form action="" method="POST"></form>');

            if ($tr.attr('data-id')) {
              var name = $table.find('> thead > tr:eq(0)').data('idname') || 'id';
              $tr.before('<input type="hidden" name="' + name.replaceSuffix(index) + '" value="' + $tr.attr('data-id') + '">');
            }

            var data = $tr.parent().serializeArray();

            if (that.options.singleNoindex) {
              $.each(data, function (ii, nn) {
                $.extend(nn, {
                  name: nn.name.replaceSuffix(0)
                });
              });
            }

            $tr.prev('input').remove();
            $tr.unwrap().isValid(function (v) {
              if (v) {
                if (callback) {
                  callback = callback.toFunc();
                } else {
                  callback = function callback(json) {
                    if (json[BJUI.keys.statusCode] === BJUI.statusCode.ok) {
                      _doRead($tr);
                    } else {
                      $tr.bjuiajax('ajaxDone', json);
                    }
                  };
                }

                $tr.bjuiajax('doAjax', {
                  url: that.options.action,
                  data: data,
                  type: that.options.type || 'POST',
                  callback: callback
                });
              }
            });
          } else {
            _doRead($tr);
          }
        });
        that.tools.initEnter($tbody);

        function _doEdit($tr) {
          $tr.removeClass('readonly').find('> td *').each(function () {
            var $this = $(this);
            var $td = $this.closest('td');
            var val = $td.data('val');
            var toggle = $this.attr('data-toggle-old');
            var readonly = $td.data('readonly');
            if (typeof val === 'undefined') val = $td.html();
            if ($td.data('notread')) return true;

            if ($this.isTag('select')) {
              $td.find('.tabledit-select-text').first().hide();
              $this.val($td.attr('data-val'));
              $this.removeClass('readonly disabled').selectpicker('show'); // $this.val($td.attr('data-val')).prop('disabled', false).removeClass('readonly').selectpicker('refresh')
            }

            if ($this.is(':checkbox')) {
              $this.closest('.icheckbox_minimal-purple').removeClass('disabled');
              $this.closest('.icheckbox_minimal-purple').find('ins').removeClass('readonly');
            }

            if ($this.is(':radio')) {
              $this.closest('.iradio_minimal-purple').removeClass('disabled');
              $this.closest('.iradio_minimal-purple').find('ins').removeClass('readonly');
            }

            if (toggle) {
              if (toggle === 'dosave') return true;else $this.removeAttr('data-toggle-old').attr('data-toggle', toggle);

              if (toggle === 'spinner') {
                $this.spinner('destroy').spinner();
              }

              if (toggle === 'kindeditor') {
                // $this.attr('data-toggle', 'kindeditor')
                $td.initui();
              }
            }

            if ($this.is(':text') || $this.is('textarea')) {
              $this.off('keydown.readonly');
              if (readonly) $this.prop('readonly', true);
            }
          });
          $tr.find('.bjui-lookup, .bjui-spinner, .bjui-upload').show();
          $tr.find('[data-toggle="doedit"]').attr('data-toggle', 'dosave').text('完成');
        }

        function _doRead($tr) {
          $tr.addClass('readonly').find('> td *').each(function () {
            var $this = $(this);
            var $td = $this.closest('td');
            var toggle = $this.attr('data-toggle');
            if ($td.data('notread')) return true;

            if ($this.isTag('select')) {
              $this.addClass('readonly disabled').selectpicker('hide');
              var selectText = $this.children('option').filter(':selected').text();
              var selectTextBox = $td.find('.tabledit-select-text').first();

              if (selectTextBox.length) {
                selectTextBox.text(selectText).show();
              } else {
                $td.append('<span style="padding: 0 2px" class="tabledit-select-text">' + selectText + '</span>');
              } // $this.prop('disabled', true).addClass('readonly').selectpicker('refresh')

            }

            if ($this.is(':checkbox')) {
              $this.closest('.icheckbox_minimal-purple').addClass('disabled');
              $this.closest('.icheckbox_minimal-purple').find('ins').addClass('readonly');
            }

            if ($this.is(':radio')) {
              $this.closest('.iradio_minimal-purple').addClass('disabled');
              $this.closest('.iradio_minimal-purple').find('ins').addClass('readonly');
            }

            if (toggle) {
              if (toggle === 'doedit' || toggle === 'dosave') {
                return true;
              } else {
                $this.removeAttr('data-toggle').attr('data-toggle-old', toggle);
              }

              if (toggle === 'kindeditor') {
                KindEditor.remove($this);
              }
            }

            if ($this.is(':text') || $this.is('textarea')) {
              $this.on('keydown.readonly', function (e) {
                e.preventDefault();
              });
            }
          });
          $tr.find('.bjui-lookup, .bjui-spinner, .bjui-upload').hide();
          $tr.find('[data-toggle="dosave"]').attr('data-toggle', 'doedit').text('编辑');
        }
      },
      doAdd: function doAdd() {
        var $table = that.$element;
        if (!that.$numAdd || !that.$btnAdd) return;
        $table.on('keydown.bjui.tabledit.add', 'thead .num-add', function (e) {
          if (e.which === BJUI.keyCode.ENTER) {
            that.$btnAdd.trigger('click.bjui.tabledit.add');
            e.preventDefault();
          }
        }).on('click.bjui.tabledit.add', 'thead .row-add', function (e) {
          var rowNum = 1;
          if (!isNaN(that.$numAdd.val())) rowNum = parseInt(that.$numAdd.val());
          that.add($table, rowNum);
          e.preventDefault();
        });
      },
      doDel: function doDel($tbody) {
        var tool = this;
        var delEvent = 'click.bjui.tabledit.del';
        $tbody.off(delEvent).on(delEvent, '.row-del', function (e) {
          var $btnDel = $(this);

          if ($btnDel.data('confirmMsg')) {
            $btnDel.alertmsg('confirm', $btnDel.data('confirmMsg'), {
              okCall: function okCall() {
                tool.delData($btnDel);
              }
            });
          } else {
            tool.delData($btnDel);
          }

          e.preventDefault();
        });
      },
      delData: function delData($btnDel) {
        var tool = this;
        var $tbody = $btnDel.closest('tbody');
        var options = $btnDel.data();

        var _delRow = function _delRow(json) {
          $btnDel.closest('tr').remove();
          tool.initSuffix($tbody);
          tool.afterDelete($tbody);
          if (options.callback) options.callback.toFunc().apply(that, [json]);
        };

        if ($btnDel.is('[href^=javascript:]') || $btnDel.is('[href^="#"]')) {
          _delRow();
        } else {
          $btnDel.bjuiajax('doAjax', {
            url: $btnDel.attr('href'),
            data: options.data,
            callback: _delRow
          });
        }
      },
      afterDelete: function afterDelete($tbody) {
        var deletedEvent = $.Event(Tabledit.EVENTS.afterDelete, {
          relatedTarget: $tbody[0]
        });
        that.$element.trigger(deletedEvent); // if (deletedEvent.isDefaultPrevented()) return
      }
    };
  };

  Tabledit.prototype.init = function () {
    var that = this;
    var tools = this.tools;
    var $table = this.$element.addClass('bjui-tabledit');
    var $tr = $table.find('> thead > tr:first');
    var $tbody = this.$tbody;
    var trHtml = $table.find('> thead > tr:first').html();
    $tr.find('> th').each(function () {
      var $th = $(this);
      var title = $th.attr('title');
      var add = $th.data('addtool');
      if (title) $th.html(title);

      if (add) {
        var $addBox = $('<span style="position:relative;"></span>');
        $th.empty();
        that.$numAdd = $('<input type="text" value="1" class="form-control num-add" size="2" title="待添加的行数">');
        that.$btnAdd = $('<a href="javascript:;" class="row-add" title="添加行"><i class="fa fa-plus-square"></i></a>');
        $addBox.append(that.$numAdd).append(that.$btnAdd).appendTo($th);
      }
    });
    $table.data('bjui.tabledit.tr', $('<tr>' + trHtml + '</tr>'));
    tools.initTbody();
    tools.doAdd();
    tools.doDel($tbody);
  };

  Tabledit.prototype.add = function ($table, num) {
    var tools = this.tools;
    var $tbody = $table.find('> tbody');
    var $firstTr;
    var $tr = $table.data('bjui.tabledit.tr');

    for (var i = 0; i < num; i++) {
      $tr.find('> th').each(function () {
        $(this).replaceWith('<td>' + $(this).html() + '</td>');
      });
      var $addTr = $tr.clone();

      if (i === 0) {
        $firstTr = $addTr;
      }

      $addTr.hide().appendTo($tbody);
      tools.initSuffix($tbody);
      tools.initEnter($tbody);
      $addTr.show().css('display', '').initui();
    }
    /* 置入焦点*/


    if ($firstTr && $firstTr.length) {
      var $input = $firstTr.find(':text');
      $input.each(function () {
        var $txt = $(this);

        if (!$txt.prop('readonly')) {
          $txt.focus();
          return false;
        }
      });
    }
  }; // TABLEDIT PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, Tabledit.DEFAULTS, $this.data(), _typeof(option) === 'object' && option);
      var data = $this.data('bjui.tabledit');
      if (!data) $this.data('bjui.tabledit', data = new Tabledit(this, options));

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      } else {
        data.init();
      }
    });
  }

  var old = $.fn.tabledit;
  $.fn.tabledit = Plugin;
  $.fn.tabledit.Constructor = Tabledit; // TABLEDIT NO CONFLICT
  // =================

  $.fn.tabledit.noConflict = function () {
    $.fn.tabledit = old;
    return this;
  }; // TABLEDIT DATA-API
  // ==============


  $(document).on(BJUI.eventType.initUI, function (e) {
    var $this = $(e.target).find('table[data-toggle="tabledit"]');
    if (!$this.length) return;
    Plugin.call($this);
  }); // init add tr

  $(document).on(BJUI.eventType.afterInitUI, function (e) {
    var $this = $(e.target).find('table[data-toggle="tabledit"]');
    $this.each(function () {
      if ($(this).is('[data-initnum]')) {
        var initNum = $(this).data('initnum');

        if (initNum > 0) {
          Plugin.call($(this), 'add', $(this), initNum);
        }
      }
    });
  });
  $(document).on('click.bjui.tabledit.data-api', '[data-toggle="tableditadd"]', function (e) {
    var $this = $(this);
    var num = $this.data('num') || 1;
    var table = $this.data('target');
    if (!table || !$(table).length) return;
    if (!$(table).isTag('table')) return;
    Plugin.call($this, 'add', $(table), num);
    e.preventDefault();
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-tablefixed.js":
/*!***********************************!*\
  !*** ./src/js/bjui-tablefixed.js ***!
  \***********************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-tablefixed.js  v1.2
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.stable.js (author:ZhangHuihua@msn.com, Roger Wu)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-tablefixed.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // TABLEFIXED CLASS DEFINITION
  // ======================

  var Tablefixed = function Tablefixed(element, options) {
    this.$element = $(element);
    this.options = options;
    this.tools = this.TOOLS();
  };

  Tablefixed.SCROLLW = 18;
  Tablefixed.DEFAULTS = {
    width: '100%'
  };

  Tablefixed.prototype.TOOLS = function () {
    return {
      getLeft: function getLeft($obj) {
        var width = 0;
        $obj.prevAll().each(function () {
          width += $(this).outerWidth();
        });
        return width;
      },
      getRight: function getRight($obj) {
        var width = 0;
        $obj.prevAll().addBack().each(function () {
          width += $(this).outerWidth();
        });
        return width - 1;
      },
      getCellNum: function getCellNum($obj) {
        return $obj.prevAll().addBack().length;
      },
      getColspan: function getColspan($obj) {
        return $obj.attr('colspan') || 1;
      },
      getStart: function getStart($obj) {
        var start = 1;
        $obj.prevAll().each(function () {
          start += parseInt($(this).attr('colspan') || 1);
        });
        return start;
      },
      getPageCoord: function getPageCoord(element) {
        var coord = {
          x: 0,
          y: 0
        };

        while (element) {
          coord.x += element.offsetLeft;
          coord.y += element.offsetTop;
          element = element.offsetParent;
        }

        return coord;
      },
      getOffset: function getOffset($obj, e) {
        if (!$.support.leadingWhitespace) {
          var $objset = $obj.offset();
          var evtset = {
            offsetX: e.pageX || e.screenX,
            offsetY: e.pageY || e.screenY
          };
          return {
            offsetX: evtset.offsetX - $objset.left,
            offsetY: evtset.offsetY - $objset.top
          };
        }

        var target = e.target;

        if (target.offsetLeft === undefined) {
          target = target.parentNode;
        }

        var pageCoord = this.getPageCoord(target);
        var eventCoord = {
          x: window.pageXOffset + e.clientX,
          y: window.pageYOffset + e.clientY
        };
        return {
          offsetX: eventCoord.x - pageCoord.x,
          offsetY: eventCoord.y - pageCoord.y
        };
      }
    };
  };

  Tablefixed.prototype.resetWidth = function () {
    var $fixed = this.$element;
    var width = $fixed.width();
    var $table = $fixed.find('table');
    var tableW = $table && $table.width();
    var $ths = $table.eq(0) && $table.eq(0).find('tr:first-child > th');
    var $tds = $table.eq(1) && $table.eq(1).find('tr:first-child > td');

    if ($table && width - tableW < Tablefixed.SCROLLW) {
      var fixedW = parseInt((width - tableW) / $ths.length);
      $table.width(width - Tablefixed.SCROLLW);
      $ths.each(function (i) {
        var tw = parseInt($(this).css('width'));
        $(this).width(tw + fixedW);
        if ($tds.eq(i)) $tds.eq(i).width(tw + fixedW);
      });
    }
  };

  Tablefixed.prototype.init = function () {
    if (!this.$element.isTag('table')) return;
    this.$container = this.$element.parent().addClass('bjui-resizeGrid');
    this.$fixed = undefined;
    var width = this.$container.width();
    var height = this.options.height;
    if (this.$container.hasClass('tab-pane')) width = this.$container.parent().width() - 20;

    if (typeof this.options.width === 'string' && this.options.width.indexOf('%')) {
      this.options.newWidth = width * (this.options.width.replace('%', '') / 100);
    } else {
      this.options.newWidth = parseInt(this.options.width);
    }

    this.options.styles = [];
    this.$element.wrap('<div class="bjui-tablefixed clearfix"></div>');
    this.$fixed = this.$element.parent();
    this.initHead();
    this.initBody();
    this.resizeCol();
    this.resizeGrid();
    if (height && !this.$fixed.closest('.tab-content').length) this.$fixed.height(height).addClass('fixedH');
  };

  Tablefixed.prototype.initHead = function () {
    var styles = this.options.styles = [];
    var $hTrs = this.$element.find('thead > tr');
    var $fThs = $hTrs.eq(0).find('> th');
    var fixedW = 0;
    var hTh = [];
    var cols = [];
    var jj = -1;
    $fThs.each(function (i) {
      var $th = $(this);
      var colspan = parseInt($th.attr('colspan') || 1);
      var width = $th.attr('width');
      var align = $th.attr('align');
      var w = '';

      for (var k = 0; k < colspan; k++) {
        if (colspan === 1 && width) w = ' width="' + width + '"';
        if (align) $th.removeAttr('align').addClass(align);
        hTh.push('<th' + w + '></th>');
      }

      $th.attr('colsNum', jj += colspan);
      cols[i] = colspan;
    });
    var thLen = hTh.length;
    var $hTh = $('<tr class="resize-head">' + hTh.join('') + '</tr>');

    if ($hTrs.length > 1) {
      jj = 0;
      var $ths2 = $hTrs.eq(1).find('> th');
      $.each(cols, function (i, n) {
        n = parseInt(n);

        if (n > 1) {
          var colsNum = parseInt($fThs.eq(i).attr('colsnum'));

          for (var k = n - 1; k >= 0; k--) {
            var $th = $ths2.eq(jj++);
            var myNum = colsNum - k;
            var width = $th.attr('width');
            var align = $th.attr('align');
            var $_th = $hTh.find('> th').eq(myNum);
            if ($th && $th.length) $th.attr('colsnum', myNum);
            if (width) $_th.attr('width', width);
            if (align) $th.addClass(align).removeAttr('align');
          }
        }
      });
    }

    this.$fixed.html(this.$element.html());
    var $thead = this.$fixed.find('thead');
    $thead.prepend($hTh);
    $hTh.find('> th').each(function (i) {
      var $th = $(this);
      var style = [];
      var width = $th.innerWidth();
      style[0] = parseInt(width);
      fixedW += style[0];
      styles[styles.length] = style;
    });
    fixedW = parseInt((this.options.newWidth - Tablefixed.SCROLLW - fixedW) / thLen);
    var $ths = $thead.find('> tr:eq(0) > th');
    this.options.$ths = $ths;
    $ths.each(function (i) {
      var $th = $(this);
      var style = styles[i];
      var w = $th.attr('width');
      $th.removeAttr('align').width(style[0] + fixedW);
      style[0] = style[0] + fixedW;

      if (w) {
        style[0] = parseInt(w);
        $th.width(w).removeAttr('width');
      }
    });
    $thead.find('> tr:gt(0) > th').each(function () {
      var $th = $(this);
      $th.html('<div class="fixedtableCol">' + $th.html() + '</div>');
    });
    $thead.wrap('<div class="fixedtableHeader" style="width:' + (this.options.newWidth - Tablefixed.SCROLLW) + 'px;overflow:hidden;"><div class="fixedtableThead"><table class="table table-bordered" style="width:' + (this.options.newWidth - Tablefixed.SCROLLW) + 'px; max-width:' + (this.options.newWidth - Tablefixed.SCROLLW) + 'px;"></table></div></div>');
    this.$fixed.append('<div class="resizeMarker" style="display:none; height:300px; left:57px;"></div><div class="resizeProxy" style="left:377px; display:none; height:300px;"></div>');
  };

  Tablefixed.prototype.initBody = function () {
    var that = this;
    var $tbody = this.$fixed.find('> tbody');
    var style, height;

    if (this.options.height) {
      height = this.options.height - this.$fixed.find('.fixedtableHeader').height() + 'px';
    } else {
      height = '100%';

      var resizeH = function resizeH() {
        var _height = that.$fixed.parent().height();

        that.$fixed.parent().css('overflow', 'hidden');
        that.$fixed.height(_height).find('.fixedtableScroller').height(_height - that.$fixed.find('.fixedtableHeader').height());
      };

      $(document).one(BJUI.eventType.afterInitUI, function (e) {
        resizeH();
      });
    }

    style = 'style="height:' + height + '; overflow-y:auto;"';
    $tbody.wrap('<div class="fixedtableScroller"' + style + ' style="width:' + this.options.newWidth + 'px;"><div class="fixedtableTbody"><table style="width:' + (this.options.newWidth - Tablefixed.SCROLLW) + 'px; max-width:' + (this.options.newWidth - Tablefixed.SCROLLW) + 'px;"></table></div></div>');
    if (!this.$element.attr('class')) $tbody.parent().addClass('table table-striped table-bordered table-hover');else $tbody.parent().addClass(this.$element.attr('class'));
    if (typeof this.$element.attr('data-selected-multi') !== 'undefined') $tbody.parent().attr('data-selected-multi', this.$element.attr('data-selected-multi'));
    $tbody.before('<thead><tr class="resize-head">' + this.$fixed.find('thead > tr').html() + '</tr></thead>');
    this.options.$tds = $tbody.prev().find('> tr:first-child > th');
    if (this.options.nowrap) $tbody.parent().addClass('nowrap');
    $tbody.closest('.fixedtableScroller').scroll(function (e) {
      var $scroller = $(this);
      var scrollLeft = $scroller.scrollLeft();
      var $header = $scroller.prev().find('> .fixedtableThead');
      $header.css({
        'position': 'relative',
        'left': -scrollLeft
      });
      return false;
    });
  };

  Tablefixed.prototype.resizeCol = function () {
    var that = this;
    var $fixed = this.$fixed;
    var $ths = this.options.$ths;
    var $tds = this.options.$tds;
    var tools = this.tools;
    $fixed.find('thead > tr:gt(0) > th').each(function (i) {
      var $th = $(this);
      $th.mouseover(function (e) {
        var ofLeft = parseInt($fixed.find('.fixedtableThead').css('left')) || 0;
        var offset = tools.getOffset($th, e).offsetX;
        var $resizeTh = $ths.eq($th.attr('colsnum'));

        if ($th.outerWidth() - offset < 5) {
          $th.css('cursor', 'col-resize').off('mousedown.bjui.tablefixed.resize').on('mousedown.bjui.tablefixed.resize', function (event) {
            $fixed.find('> .resizeProxy').show().css({
              left: tools.getRight($resizeTh) + ofLeft + $fixed.position().left,
              top: $fixed.position().top,
              height: $fixed.height(),
              cursor: 'col-resize'
            }).basedrag({
              scop: true,
              cellMinW: 20,
              relObj: $fixed.find('.resizeMarker'),
              move: 'horizontal',
              event: event,
              stop: function stop() {
                var pleft = $fixed.find('.resizeProxy').position().left;
                var mleft = $fixed.find('.resizeMarker').position().left;
                var move = pleft - mleft - $resizeTh.outerWidth() - 9;
                var cellNum = tools.getCellNum($resizeTh);
                var newW = $resizeTh.width() + move;
                var $dcell = $tds.eq(cellNum - 1);
                var tableW = $fixed.find('> .fixedtableHeader .table').width();
                $resizeTh.width(newW);
                $dcell.width(newW);
                $fixed.find('.table').width(tableW + move);
                $fixed.find('.resizeMarker, .resizeProxy').hide();

                if (tableW + move + Tablefixed.SCROLLW < that.options.newWidth) {
                  $fixed.find('.fixedtableScroller').width(tableW + move + Tablefixed.SCROLLW);
                } else {
                  newW = $fixed.closest('.bjui-resizeGrid').innerWidth();
                  if (tableW + move + Tablefixed.SCROLLW < newW) newW = tableW + move + Tablefixed.SCROLLW;
                  $fixed.find('.fixedtableHeader').width(newW - Tablefixed.SCROLLW);
                  $fixed.find('.fixedtableScroller').width(newW);
                  $fixed.width(newW);
                }

                $fixed.data('resizeGrid', true);
              }
            });
            $fixed.find('> .resizeMarker').show().css({
              left: tools.getLeft($resizeTh) + ofLeft + $fixed.position().left,
              top: $fixed.position().top,
              height: $fixed.height()
            });
          });
        } else {
          $th.css('cursor', 'default').off('mousedown.bjui.tablefixed.resize');
        }

        return false;
      });
    });
  };

  Tablefixed.prototype.setOrderBy = function (options) {
    var $th = this.$element;
    var $orderBox = $th.find('.fixedtableCol');
    var $order = $(FRAG.orderby.replace('#asc#', BJUI.regional.orderby.asc).replace('#desc#', BJUI.regional.orderby.desc));
    options = options || this.options;
    $th.addClass('orderby');

    if (options.orderDirection) {
      if (!BJUI.ui.clientPaging) $th.addClass(options.orderDirection);
      $th.pagination('setClientOrder', {
        orderField: options.orderField,
        orderDirection: options.orderDirection
      });
    }

    if (!$orderBox.length) {
      $orderBox = $('<div class="fixedtableCol">' + $th.html() + '</div>').appendTo($th.empty());
    }

    $order.data('orderField', options.orderField).appendTo($orderBox).pagination('orderBy');
  };

  Tablefixed.prototype.resizeGrid = function () {
    var that = this;

    var _resizeGrid = function _resizeGrid() {
      $('div.bjui-resizeGrid').each(function () {
        var $this = $(this);
        var $navtab = $this.closest('.navtabPage');
        var width = $this.width();
        var height = $this.height();
        var $fixed = $this.find('.bjui-tablefixed');
        var fixedH = $fixed.find('.fixedtableThead').height();
        var newWidth = that.options.newWidth;
        var realWidth;

        if ($this.length && $this.is(':hidden')) {
          if (!$this.hasClass('tab-pane')) {
            $navtab.show();
            width = $this.innerWidth();
            height = $this.height();
            fixedH = $fixed.find('.fixedtableHeader').height();
            $navtab.hide();
          }
        }

        if (width) {
          $this.find('.bjui-tablefixed').each(function () {
            var $fixed = $(this);
            if (!$fixed.data('resizeGrid')) realWidth = width;else realWidth = newWidth;
            $fixed.width(realWidth);
            $fixed.find('.table').width(realWidth - Tablefixed.SCROLLW);
            $fixed.find('.fixedtableHeader').width(realWidth - Tablefixed.SCROLLW);
            $fixed.find('.fixedtableScroller').width(realWidth);
          });
        }
        /* resizeH */


        $this.css('overflow', 'hidden');
        $fixed.height(height).find('.fixedtableScroller').height(height - fixedH);
      }); // var resizeH = function() {
      //   var _height = that.$fixed.parent().height()
      //
      //   that.$fixed.parent().css('overflow', 'hidden')
      //   that.$fixed.height(_height)
      //     .find('.fixedtableScroller').height(_height - that.$fixed.find('.fixedtableHeader').height())
      // }
    };

    $(window).on(BJUI.eventType.resizeGrid, _resizeGrid);
  }; // TABLEFIXED PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, Tablefixed.DEFAULTS, $this.data(), _typeof(option) === 'object' && option);
      var data = $this.data('bjui.tablefixed');
      if (!data) $this.data('bjui.tablefixed', data = new Tablefixed(this, options));

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      } else {
        data.init();
      }
    });
  }

  var old = $.fn.tablefixed;
  $.fn.tablefixed = Plugin;
  $.fn.tablefixed.Constructor = Tablefixed; // TABLEFIXED NO CONFLICT
  // =================

  $.fn.tablefixed.noConflict = function () {
    $.fn.tablefixed = old;
    return this;
  }; // TABLEFIXED DATA-API
  // ==============


  $(document).on(BJUI.eventType.initUI, function (e) {
    var $this = $(e.target).find('table[data-toggle="tablefixed"]');
    if (!$this.length) return;
    Plugin.call($this);
  });
  /* orderby */

  $(document).on(BJUI.eventType.afterInitUI, function (e) {
    var $this = $(e.target).find('th[data-order-field]');
    if (!$this.length) return;
    Plugin.call($this, 'setOrderBy');
  });
  /* selected tr */

  $(document).on('click.bjui.tr.data-api', 'tr[data-id]', function (e) {
    var $this = $(this);
    var $table = $this.closest('table');
    var multi = $table.data('selectedMulti');
    var id = $this.attr('data-id');
    var clsName = 'selected';
    var $selected = $table.closest('.unitBox').find('#bjui-selected');
    $this.toggleClass(clsName);

    if (multi) {
      id = [];
      $this.siblings('.' + clsName).add($this.hasClass(clsName) ? $this : '').each(function () {
        id.push($(this).attr('data-id'));
      });
      id = id.join(',');
    } else {
      $this.siblings().removeClass(clsName);
      if (!$this.hasClass(clsName)) id = '';
    }

    if ($selected && $selected.length) {
      $selected.val(id);
    } else {
      $selected = $('<input type="hidden" id="bjui-selected" value="' + id + '">');
      $selected.appendTo($table.closest('.unitBox'));
    }
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-taskbar.js":
/*!********************************!*\
  !*** ./src/js/bjui-taskbar.js ***!
  \********************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-taskbar.js  v1.2
 * reference: bjui-dialog.js
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.taskBar.js (author:Roger Wu)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-taskbar.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // TASKBAR GLOBAL ELEMENTS
  // ======================

  var $resizable;
  var $taskBar, $taskBox, $taskList, $prevBtn, $nextBtn, taskDisabled, taskSelected, taskMargin;
  $(function () {
    var INIT_TASKBAR = function INIT_TASKBAR() {
      $resizable = $('#bjui-resizable');
      $taskBar = $(FRAG.taskbar);
      $taskBox = $taskBar.find('.taskbarContent');
      $taskList = $taskBox.find('> ul');
      $prevBtn = $taskBar.find('.taskbarLeft');
      $nextBtn = $taskBar.find('.taskbarRight');
      taskDisabled = 'disabled';
      taskSelected = 'selected';
      taskMargin = 'taskbarMargin';
      $('body').append('<!-- dialog task bar -->').append($taskBar); // events

      $prevBtn.click(function (e) {
        $(this).taskbar('scrollLeft');
      });
      $nextBtn.click(function (e) {
        $(this).taskbar('scrollRight');
      });
    };

    INIT_TASKBAR();
  }); // TASKBAR CLASS DEFINITION
  // ======================

  var Taskbar = function Taskbar(element, options) {
    this.$element = $(element);
    this.$task = null;
    this.options = options;
    this.tools = this.TOOLS();
  };

  Taskbar.DEFAULTS = {
    id: undefined,
    title: undefined
  };

  Taskbar.prototype.init = function () {
    var that = this;
    var $task = $taskList.find('#' + this.options.id);
    this.show();

    if (!$task.length) {
      var taskFrag = '<li id="#taskid#"><div class="taskbutton"><span><i class="fa fa-th-large"></i></span> <span class="title">#title#</span></div><div class="close"><i class="fa fa-times-circle"></i></div></li>';
      $task = $(taskFrag.replace('#taskid#', this.options.id).replace('#title#', this.options.title));
      $task.appendTo($taskList);
    } else {
      $task.find('> div > span.title').html(this.options.title);
    }

    this.contextmenu($task);
    this.switchTask($task);
    this.tools.scrollTask($task); // events

    $task.click(function (e) {
      if ($(e.target).closest('div').hasClass('close') || $(e.target).hasClass('close')) {
        $task.dialog('close', that.options.id);
      } else {
        var $dialog = $('body').data(that.options.id);

        if ($task.hasClass('selected')) {
          $dialog.find('.dialogHeader a.minimize').trigger('click');
        } else {
          if ($dialog.is(':hidden')) {
            that.restoreDialog($dialog);
          } else {
            $dialog.trigger('click');
            $task.addClass(taskSelected);
          }
        }

        that.scrollCurrent($task);
      }

      return false;
    });
  };

  Taskbar.prototype.TOOLS = function () {
    return {
      scrollCurrent: function scrollCurrent() {
        var iW = this.tasksW(this.getTasks());

        if (iW > this.getTaskBarW()) {
          var $tools = this;
          var lTask = $taskList.find('> li:last-child');
          var left = this.getTaskBarW() - lTask.position().left - lTask.outerWidth(true);
          $taskList.animate({
            left: left
          }, 200, function () {
            $tools.ctrlScrollBtn();
          });
        } else {
          this.ctrlScrollBtn();
        }
      },
      getTaskBarW: function getTaskBarW() {
        return $taskBox.width() - ($prevBtn.is(':hidden') ? $prevBtn.width() + 2 : 0) - ($nextBtn.is(':hidden') ? $nextBtn.width() + 2 : 0);
      },
      scrollTask: function scrollTask($task) {
        var $tools = this;
        var left;

        if ($task.position().left + this.getLeft() + $task.outerWidth() > this.getBarWidth()) {
          left = this.getTaskBarW() - $task.position().left - $task.outerWidth(true) - 2;
          $taskList.animate({
            left: left
          }, 200, function () {
            $tools.ctrlScrollBtn();
          });
        } else if ($task.position().left + this.getLeft() < 0) {
          left = this.getLeft() - ($task.position().left + this.getLeft());
          $taskList.animate({
            left: left
          }, 200, function () {
            $tools.ctrlScrollBtn();
          });
        }
      },
      ctrlScrollBtn: function ctrlScrollBtn() {
        var iW = this.tasksW(this.getTasks());

        if (this.getTaskBarW() > iW) {
          $taskBox.removeClass(taskMargin);
          $nextBtn.hide();
          $prevBtn.hide();
          if (this.getTasks().eq(0).length) this.scrollTask(this.getTasks().eq(0));
        } else {
          $taskBox.addClass(taskMargin);
          $nextBtn.show().removeClass(taskDisabled);
          $prevBtn.show().removeClass(taskDisabled);
          if (this.getLeft() >= 0) $prevBtn.addClass(taskDisabled);
          if (this.getLeft() <= this.getTaskBarW() - iW) $nextBtn.addClass(taskDisabled);
        }
      },
      getLeft: function getLeft() {
        return $taskList.position().left;
      },
      visibleStart: function visibleStart() {
        var iLeft = this.getLeft();
        var jTasks = this.getTasks();

        for (var i = 0; i < jTasks.length; i++) {
          if (jTasks.eq(i).position().left + jTasks.eq(i).outerWidth(true) + iLeft >= 0) return jTasks.eq(i);
        }

        return jTasks.eq(0);
      },
      visibleEnd: function visibleEnd() {
        var iLeft = this.getLeft();
        var jTasks = this.getTasks();

        for (var i = 0; i < jTasks.length; i++) {
          if (jTasks.eq(i).position().left + jTasks.eq(i).outerWidth(true) + iLeft > this.getBarWidth()) return jTasks.eq(i);
        }

        return jTasks.eq(jTasks.length - 1);
      },
      getTasks: function getTasks() {
        return $taskList.find('> li');
      },
      tasksW: function tasksW(jTasks) {
        var iW = 0;
        jTasks.each(function () {
          iW += $(this).outerWidth(true);
        });
        return iW;
      },
      getBarWidth: function getBarWidth() {
        return $taskBar.innerWidth();
      },
      getCurrent: function getCurrent() {
        return $taskList.find('li.' + taskSelected);
      }
    };
  };

  Taskbar.prototype.contextmenu = function ($obj) {
    var that = this;
    $obj.contextmenu({
      id: 'dialogCM',
      bindings: {
        reload: function reload(t) {
          t.dialog('refresh', that.options.id);
        },
        closeCurrent: function closeCurrent(t, m) {
          var $obj = t.isTag('li') ? t : that.tools.getCurrent();
          $obj.find('.close').trigger('click');
        },
        closeOther: function closeOther(t, m) {
          var $tasks = $taskList.find('> li').not(t);
          $tasks.each(function (i) {
            $(this).find('.close').trigger('click');
          });
        },
        closeAll: function closeAll(t, m) {
          var $tasks = that.tools.getTasks();
          $tasks.each(function (i) {
            $(this).find('.close').trigger('click');
          });
        }
      },
      ctrSub: function ctrSub(t, m) {
        var mCur = m.find('[rel="closeCurrent"]');
        var mOther = m.find('[rel="closeOther"]');

        if (!that.tools.getCurrent().length) {
          mCur.addClass(taskDisabled);
          mOther.addClass(taskDisabled);
        } else {
          if (that.tools.getTasks().length === 1) {
            mOther.addClass(taskDisabled);
          }
        }
      }
    });
  };

  Taskbar.prototype.closeDialog = function (task) {
    var $task = typeof task === 'string' ? this.getTask(task) : task;
    if (!$task || !$task.length) return;
    $task.remove();

    if (this.tools.getTasks().length === 0) {
      this.hide();
    }

    this.tools.scrollCurrent();
    this.$element.removeData('bjui.taskbar');
  };

  Taskbar.prototype.minimize = function (dialog) {
    var that = this;
    var $dialog = typeof dialog === 'string' ? $('body').data('dialog') : dialog;
    var $task = this.getTask($dialog.data('options').id);
    $resizable.css({
      top: $dialog.css('top'),
      left: $dialog.css('left'),
      height: $dialog.css('height'),
      width: $dialog.css('width')
    }).show().animate({
      top: $(window).height() - 60,
      left: $task.position().left,
      width: $task.outerWidth(),
      height: $task.outerHeight()
    }, 250, function () {
      $(this).hide();
      that.inactive($task);
    });
  };
  /**
   * @param $dialog {Object} id or dialog
   */


  Taskbar.prototype.restoreDialog = function ($dialog) {
    var $task = this.getTask($dialog.data('options').id);
    $resizable.css({
      top: $(window).height() - 60,
      left: $task.position().left,
      height: $task.outerHeight(),
      width: $task.outerWidth()
    }).show().animate({
      top: $dialog.css('top'),
      left: $dialog.css('left'),
      width: $dialog.css('width'),
      height: $dialog.css('height')
    }, 250, function () {
      $(this).hide();
      $dialog.show();
    });
    this.switchTask($task);
  };
  /**
   * @param task {Object} id
   */


  Taskbar.prototype.inactive = function (task) {
    var $task = typeof task === 'string' ? this.getTask(task) : task;
    $task.removeClass(taskSelected);
  };

  Taskbar.prototype.scrollLeft = function () {
    var $task = this.tools.visibleStart();
    this.tools.scrollTask($task);
  };

  Taskbar.prototype.scrollRight = function () {
    var $task = this.tools.visibleEnd();
    this.tools.scrollTask($task);
  };

  Taskbar.prototype.scrollCurrent = function ($task) {
    this.tools.scrollTask($task);
  };
  /**
   * @param task {Object} id or $task
   */


  Taskbar.prototype.switchTask = function (task) {
    this.tools.getCurrent().removeClass(taskSelected);
    var $task = typeof task === 'string' ? this.getTask(task) : task;
    $task.addClass(taskSelected);
  };

  Taskbar.prototype.getTask = function (id) {
    return $taskList.find('#' + id);
  };

  Taskbar.prototype.changeTitle = function (id, title) {
    var $task = this.getTask(id);
    if ($task && title) $task.find('.title').html(title);
  };

  Taskbar.prototype.show = function () {
    if ($taskBar.is(':hidden')) $taskBar.show().animate({
      bottom: 0
    }, 500);
  };

  Taskbar.prototype.hide = function () {
    if ($taskBar.is(':visible')) $taskBar.animate({
      bottom: -50
    }, 500, function () {
      $taskBar.hide();
    });
  }; // TASKBAR PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, Taskbar.DEFAULTS, $this.data(), _typeof(option) === 'object' && option);
      var data = $this.data('bjui.taskbar');
      if (!data) $this.data('bjui.taskbar', data = new Taskbar(this, options));else if (data.options.id !== options.id) $this.data('bjui.taskbar', data = new Taskbar(this, options));

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      } else {
        data.init();
      }
    });
  }

  var old = $.fn.taskbar;
  $.fn.taskbar = Plugin;
  $.fn.taskbar.Constructor = Taskbar; // TASKBAR NO CONFLICT
  // =================

  $.fn.taskbar.noConflict = function () {
    $.fn.taskbar = old;
    return this;
  };
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-theme.js":
/*!******************************!*\
  !*** ./src/js/bjui-theme.js ***!
  \******************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-theme.js  v1.2
 * @author K'naan (xknaan@163.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-theme.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // THEME GLOBAL ELEMENTS
  // ======================

  var $themeLink, $themeLis;
  $(function () {
    var INIT_THEME = function INIT_THEME() {
      $themeLink = $('#bjui-link-theme');
      $themeLis = $('#bjui-themes');
    };

    INIT_THEME();
  }); // THEME CLASS DEFINITION
  // ======================

  var Theme = function Theme(element, options) {
    this.$element = $(element);
    this.options = options;
  };

  Theme.DEFAULTS = {
    theme: 'purple'
  };

  Theme.prototype.init = function () {
    if (!$themeLink.length) return;
    var themeHref = $themeLink.attr('href');
    themeHref = themeHref.substring(0, themeHref.lastIndexOf('/'));
    themeHref = themeHref.substring(0, themeHref.lastIndexOf('/'));
    themeHref += '/' + this.options.theme + '/core.css';
    $themeLink.attr('href', themeHref);
    var $themeA = this.$element.closest('ul').prev();
    var classA = $themeA.attr('class');
    classA = classA.replace(/(theme[\s][a-z]*)/g, '');
    $themeA.removeClass().addClass(classA).addClass('theme').addClass(this.options.theme);
    $themeLis.find('li').removeClass('active');
    this.$element.parent().addClass('active');
    this.cookie();
  };

  Theme.prototype.setTheme = function (themeName) {
    $themeLis.find('a.theme_' + themeName).trigger('click');
  };

  Theme.prototype.cookie = function () {
    var theme = this.options.theme;
    if ($.cookie) $.cookie('bjui_theme', theme, {
      path: '',
      expires: 30
    });
  }; // THEME PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;
    return this.each(function () {
      var $this = $(this);
      var options = $.extend({}, Theme.DEFAULTS, $this.data(), _typeof(option) === 'object' && option);
      var data = $this.data('bjui.theme');
      if (!data) $this.data('bjui.theme', data = new Theme(this, options));

      if (typeof property === 'string' && $.isFunction(data[property])) {
        [].shift.apply(args);
        if (!args) data[property]();else data[property].apply(data, args);
      } else {
        data.init();
      }
    });
  }

  var old = $.fn.theme;
  $.fn.theme = Plugin;
  $.fn.theme.Constructor = Theme; // THEME NO CONFLICT
  // =================

  $.fn.theme.noConflict = function () {
    $.fn.theme = old;
    return this;
  }; // THEME DATA-API
  // ==============


  $(document).on('click.bjui.theme.data-api', '[data-toggle="theme"]', function (e) {
    Plugin.call($(this));
    e.preventDefault();
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-upload.js":
/*!*******************************!*\
  !*** ./src/js/bjui-upload.js ***!
  \*******************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-upload.js  v1.2
 * @author K'naan (xknaan@163.com)
 * -- Modified from Huploadify 2.0 (author:吕大豹)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-upload.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict'; // UPLOAD CLASS DEFINITION
  // ======================

  var Upload = function Upload(element, options) {
    this.$element = $(element);
    this.options = options;
    this.tools = this.TOOLS();
  };

  Upload.DEFAULTS = {
    fileTypeExts: '*.jpg;*.png',
    // 允许上传的文件类型，格式'*.jpg;*.doc'
    uploader: '',
    // 文件提交的地址
    auto: false,
    // 是否开启自动上传
    method: 'POST',
    // 发送请求的方式，get或post
    multi: false,
    // 是否允许选择多个文件
    formData: {},
    // 发送给服务端的参数，格式：{key1:value1,key2:value2}
    fileObjName: 'file',
    // 在后端接受文件的参数名称，如PHP中的$_FILES['file']
    fileSizeLimit: 204800,
    // 允许上传的文件大小，单位KB
    previewImg: true,
    // 是否预览上传图片
    previewLoadimg: null,
    // 预览图片前的载入图标
    dragDrop: false,
    // 是否允许拖动上传
    showUploadedPercent: true,
    // 是否实时显示上传的百分比，如20%
    showUploadedSize: true,
    // 是否实时显示已上传的文件大小，如1M/2M
    buttonText: '选择上传文件',
    // 上传按钮上的文字
    removeTimeout: 1e3,
    // 上传完成后进度条的消失时间
    itemTemplate: FRAG.uploadTemp,
    // 上传队列显示的模板
    breakPoints: false,
    // 是否开启断点续传
    fileSplitSize: 1024 * 1024,
    // 断点续传的文件块大小，单位Byte，默认1M
    onUploadBefore: null,
    // 上传开始前的动作, 返回true则开始上传，否则结束上传
    onUploadStart: null,
    // 上传开始时的动作
    onUploadSuccess: null,
    // 上传成功的动作
    onUploadComplete: null,
    // 上传完成的动作
    onUploadError: null,
    // 上传失败的动作, 这里的失败指的是httpCode != 200，请勿与框架ajax回调code混淆
    onInit: null,
    // 初始化时的动作
    onCancel: null,
    // 删除掉某个文件后的回调函数，可传入参数file
    onSelect: null // 选取文件回调

  };
  Upload.MIMETYPES = {
    zip: ['application/x-zip-compressed'],
    jpg: ['image/jpeg'],
    png: ['image/png'],
    gif: ['image/gif'],
    swf: ['application/x-shockwave-flash'],
    doc: ['application/msword'],
    xls: ['application/vnd.ms-excel'],
    docx: ['application/vnd.openxmlformats-officedocument.wordprocessingml.document'],
    xlsx: ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],
    ppt: ['application/vnd.ms-powerpoint'],
    pptx: ['application/vnd.openxmlformats-officedocument.presentationml.presentation'],
    mp3: ['audio/mpeg'],
    mp4: ['video/mp4'],
    pdf: ['application/pdf'],
    txt: ['text/plain'],
    xml: ['text/xml']
  };

  Upload.prototype.TOOLS = function () {
    var that = this;
    var options = this.options;
    var tools = {
      // 将文件的单位由bytes转换为KB或MB，若第二个参数指定为true，则永远转换为KB
      formatFileSize: function formatFileSize(size, byKB) {
        if (size > 1024 * 1024 && !byKB) {
          size = (Math.round(size * 100 / (1024 * 1024)) / 100).toString() + 'MB';
        } else {
          size = (Math.round(size * 100 / 1024) / 100).toString() + 'KB';
        }

        return size;
      },
      // 根据文件序号获取文件
      getFile: function getFile(index, files) {
        console.log(index);

        for (var i = 0; i < files.length; i++) {
          if (files[i].index === index) return files[i];
        }

        return false;
      },
      // 将输入的文件类型字符串转化为数组,原格式为*.jpg;*.png
      getFileTypes: function getFileTypes(str) {
        var result = [];
        var arr1 = str.split(';');

        for (var i = 0; i < arr1.length; i++) {
          result.push(arr1[i].split('.').pop());
        }

        return result;
      },
      // 根据后缀名获得文件的mime类型
      getMimetype: function getMimetype(name) {
        return Upload.MIMETYPES[name];
      },
      // 根据配置的字符串，获得上传组件accept的值
      getAcceptString: function getAcceptString(str) {
        var types = this.getFileTypes(str);
        var result = [];

        for (var i = 0; i < types.length; i++) {
          var mime = this.getMimetype(types[i]);
          if (mime) result.push(mime);else result.push('.' + types[i]);
        }

        return result.join(',');
      },
      // 过滤上传文件
      filter: function filter(files) {
        var arr = [];
        var typeArray = this.getFileTypes(options.fileTypeExts);

        if (typeArray.length > 0) {
          for (var i = 0; i < files.length; i++) {
            var thisFile = files[i];

            if (parseInt(this.formatFileSize(thisFile.size, true)) > options.fileSizeLimit) {
              that.$element.alertmsg('error', '文件"' + thisFile.name + '"大小超出限制！');
              continue;
            }

            if ($.inArray(thisFile.name.split('.').pop().toLowerCase(), typeArray) >= 0) {
              arr.push(thisFile);
            } else {
              that.$element.alertmsg('error', '文件"' + thisFile.name + '"类型不允许！');
            }
          }
        }

        return arr;
      },
      // 获取选择文件，file控件
      getFiles: function getFiles(e) {
        var files = e.target.files || e.dataTransfer.files; // 获取文件列表对象

        files = this.filter(files);

        for (var i = 0; i < files.length; i++) {
          files[i].id = files[i].lastModifiedDate.getTime() + '_' + files[i].size + '_' + (files[i].type || '').replace(/\W/g, '');
          this.renderQueueItem(files[i]);
          that.queueData.files++;
        }

        return files;
      },
      // 生成上传队列Dom
      renderQueueItem: function renderQueueItem(file) {
        var uploadedSize = 0;
        var $temp = $(options.itemTemplate.replace('{fileId}', file.id).replace('{fileName}', file.name).replace('#upConfirm#', BJUI.regional.upload.upConfirm).replace('#upPause#', BJUI.regional.upload.upPause).replace('#upCancel#', BJUI.regional.upload.upCancel).replace('{percent}', '0.00%').replace('{uploadedSize}', '0KB').replace('{fileSize}', this.formatFileSize(file.size))); // 如果是自动上传，去掉上传按钮

        if (options.auto) {
          $temp.find('> .info > .up_confirm').remove();
        }

        $temp.data('upfile', file);
        that.$uploadFileList.append($temp); // 如果断点续传

        if (options.breakPoints) {
          uploadedSize = this.getUploadedSize(file.id);
          if (uploadedSize > file.size) uploadedSize = file.size;
        }

        this.showProgress(file.id, uploadedSize, file.size); // 判断是否预览图片

        if (options.previewImg && file.type.indexOf('image') !== -1) {
          var $prevbox = $temp.find('> .preview > .img');
          if (options.previewLoadimg) $prevbox.html('<img src="' + options.previewLoadimg + '" height="114">');
          this.previewImg(file, $prevbox);
        } else {
          $temp.find('> .preview').remove();
        } // 判断是否显示已上传文件大小


        if (options.showUploadedSize) {
          var $fileSize = $temp.find('> .filesize');
          $fileSize.find('> .uploadedsize').html(this.formatFileSize(uploadedSize));
          $fileSize.find('> .filesize').html(this.formatFileSize(file.size));
        } else {
          $temp.find('> .filesize').remove();
        } // 判断是否显示上传百分比


        if (options.showUploadedPercent) {
          $temp.find('> .percent').html((uploadedSize / file.size * 100).toFixed(2) + '%');
        } else {
          $temp.find('> .percent').remove();
        }

        options.onSelect && options.onSelect(file); // 判断是否是自动上传

        if (options.auto) that.fileUpload(file, uploadedSize);
        $temp.on('click.bjui.upload.confirm', '.up_confirm', function (e) {
          var $this = $(this);
          var $queue = $this.closest('.item');
          $this.hide().next().show();
          that.fileUpload($queue.data('upfile'), uploadedSize);
        });
        $temp.on('click.bjui.upload.cancel', '.up_cancel', this.removeQueueItem);
      },
      successQueueItem: function successQueueItem(file, xhr) {
        tools.showProgress(file.id, file.size, file.size);
        options.onUploadSuccess && options.onUploadSuccess.toFunc().call(that, file, xhr.responseText, that.$element); // 在指定的间隔时间后删掉进度条

        setTimeout(function () {
          that.$element.find('#' + file.id).fadeOut('normal', function () {
            $(this).remove();
            var filelen = that.$element.find('> .queue > .item:visible').length;

            if (filelen === 0) {
              that.$element.find('> .queue').hide();
              that.$file.val('');
            }
          });
        }, options.removeTimeout);
      },
      removeQueueItem: function removeQueueItem(e, xhr) {
        if (xhr) xhr.abort();
        $(this).closest('.item').fadeOut('normal', function () {
          $(this).remove();
          var filelen = that.$element.find('> .queue > .item:visible').length;
          if (filelen === 0) that.$element.find('> .queue').hide();
        });
        e.preventDefault();
      },
      // 预览上传图片
      previewImg: function previewImg(file, $obj) {
        if (file && $obj.length) {
          var reader = new FileReader();

          reader.onload = function (e) {
            $obj.html('<img src="' + e.target.result + '">');
          };

          reader.readAsDataURL(file);
        }
      },
      // 上传进度条
      showProgress: function showProgress(fileId, uploadedSize, fileSize) {
        var initWidth = uploadedSize / fileSize * 100 + '%'; // var initFileSize = that.tools.formatFileSize(uploadedSize)
        // var initUppercent = (uploadedSize / fileSize * 100).toFixed(2) + '%'

        that.$element.find('#' + fileId + ' > .progress > .bar').css('width', initWidth);
      },
      // 断点续传：获取已上传的文件片断大小
      getUploadedSize: function getUploadedSize(fileId) {
        return localStorage.getItem(fileId) * 1;
      },
      // 断点续传：保存已上传的文件片断大小
      saveUploadedSize: function saveUploadedSize(fileId, value) {
        localStorage.setItem(fileId, value);
      },
      // 发送文件块函数
      sendBlob: function sendBlob(url, xhr, file, formdata) {
        var fd = new FormData();
        xhr.open(options.method, url, true);
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest'); // xhr.setRequestHeader('X_Requested_With', location.href.split('/')[5].replace(/[^a-z]+/g, '$'))

        fd.append(options.fileObjName, file);

        if (formdata) {
          for (var key in formdata) {
            if (formdata.hasOwnProperty(key)) {
              fd.append(key, formdata[key]);
            }
          }
        }

        xhr.send(fd);
      }
    };
    return tools;
  };

  Upload.prototype.init = function () {
    var that = this;
    var $element = this.$element;
    var options = this.options;

    if (!options.uploader) {
      BJUI.debug('Upload Plugin: The options uploader is undefined!');
      return;
    } else {
      options.uploader = decodeURI(options.uploader).replacePlh($element.closest('.unitBox'));

      if (!options.uploader.isFinishedTm()) {
        $element.alertmsg('error', options.warn || FRAG.alertPlhMsg.replace('#plhmsg#', BJUI.regional.plhmsg));
        BJUI.debug('Upload Plugin: The options uploader is incorrect: ' + options.uploader);
        return;
      }

      options.uploader = encodeURI(options.uploader);
    }

    if ($element.hasClass('bjui-upload')) return;
    var $uploadFrag = $(FRAG.uploadFrag.replaceAll('#multi#', options.multi ? 'multiple' : '').replaceAll('#accept#', that.tools.getAcceptString(options.fileTypeExts)).replaceAll('#btnTxt#', (options.icon ? '<i class="fa fa-' + options.icon + '">&nbsp;&nbsp;' : '') + options.buttonText));
    $element.addClass('bjui-upload').append($uploadFrag);
    this.$file = $element.find('> .bjui-upload-select-file');
    this.$uploadFileList = $element.find('> .queue');
    this.queueData = {
      files: 0,
      success: 0,
      error: 0
    }; // do select files

    $element.on('change.bjui.upload', '.bjui-upload-select-file', function (e) {
      that.fileSelect(e);
    }).on('click.bjui.upload', '.bjui-upload-select', function (e) {
      that.$file.trigger('click');
    });
    options.onInit && options.onInit(); // 如果允许拖动上传

    if (options.dragDrop) {
      /* 拖拽元素在目标元素头上移动的时候 */
      $element[0].ondragover = function (ev) {
        ev.preventDefault();
        return true;
      };

      $element[0].ondrop = function (e) {
        that.fileSelect(e);
        e.stopPropagation();
        e.preventDefault();
      };
    }
  };

  Upload.prototype.fileSelect = function (e) {
    this.$uploadFileList.show();
    this.tools.getFiles(e);
  };

  Upload.prototype.fileUpload = function (file, uploadedSize) {
    var that = this;
    var $element = that.$element;
    var options = that.options;
    var tools = that.tools;
    var xhr = false;
    var originalFile = file;

    if (options.onUploadComplete) {
      if (typeof options.onUploadComplete === 'string') {
        options.onUploadComplete = options.onUploadComplete.toFunc();
      }
    }

    var next = true;

    if (options.onUploadBefore) {
      if (typeof options.onUploadBefore === 'string') {
        options.onUploadBefore = options.onUploadBefore.toFunc();
      }

      next = options.onUploadBefore(options.formData || {}, this.$file);

      if (next !== true) {
        options.formData = next;
      }
    }

    if (!next) {
      $element.find('#' + originalFile.id + ' > .info > .up_cancel').trigger('click.bjui.upload.cancel');
      options.onUploadComplete && options.onUploadComplete(originalFile, xhr.responseText, this.$file);
      return;
    } // 校正进度条和上传比例的误差


    xhr = new XMLHttpRequest();

    if (options.breakPoints) {
      // 对文件进行切割，并保留原来的信息
      file = originalFile.slice(uploadedSize, uploadedSize + options.fileSplitSize);
    }

    if (xhr.upload) {
      // 上传进度
      xhr.upload.onprogress = function (e) {
        that.onProgress(file, e.loaded, originalFile.size);
      }; // 上传回调


      xhr.onreadystatechange = function (e) {
        if (xhr.readyState !== 4) {
          return;
        }

        if (xhr.status === 200) {
          var upOver = false;

          if (options.breakPoints) {
            // 更新已上传文件大小，保存到本地
            uploadedSize += options.fileSplitSize;
            tools.saveUploadedSize(originalFile.id, uploadedSize); // 继续上传其他片段

            if (uploadedSize < originalFile.size) {
              file = originalFile.slice(uploadedSize, uploadedSize + options.fileSplitSize); // 上传文件

              tools.sendBlob(options.uploader, xhr, file, options.formData);
            } else {
              upOver = true;
            }
          } else {
            upOver = true;
          }

          if (upOver) {
            that.queueData.success++;
            tools.successQueueItem(originalFile, xhr);
            options.onUploadComplete && options.onUploadComplete(originalFile, xhr.responseText, that.$file);
          }
        } else {
          that.queueData.error++; // 错误回调

          options.onUploadError && options.onUploadError(originalFile, xhr.responseText);
        } // 队列完成回调


        if (options.onQueueComplete) {
          if (that.queueData.files === that.queueData.success + that.queueData.error) {
            options.onQueueComplete(that.queueData);
          }
        }
      };

      options.onUploadStart && options.onUploadStart(); // 开始上传

      options.formData.fileName = originalFile.name;
      options.formData.lastModifiedDate = originalFile.lastModifiedDate.getTime();
      tools.sendBlob(options.uploader, xhr, file, options.formData);
    } // 暂停事件


    $element.find('#' + originalFile.id + ' > .info > .up_pause').on('click.bjui.upload.pause', function (e) {
      xhr.abort();
      $(this).hide().prev().show();
    }); // 取消事件

    $element.find('#' + originalFile.id + ' > .info > .up_cancel').off('click.bjui.upload.cancel').on('click.bjui.upload.cancel', $.proxy(function (e) {
      this.tools.removeQueueItem(e, xhr);
    }, this));
  };

  Upload.prototype.onProgress = function (file, loaded, total) {
    var that = this;
    var options = that.options;
    var $progress = that.$element.find('#' + file.id + ' .progress');
    var thisLoaded = loaded; // 根据上一次触发progress时上传的大小，得到本次的增量

    var lastLoaded = $progress.attr('lastLoaded') || 0;
    loaded -= parseInt(lastLoaded);
    if (loaded > file.size) loaded = file.size;
    that.$progressBar = $progress.children('.bar');
    var oldWidth = options.breakPoints ? parseFloat(that.$progressBar.get(0).style.width || 0) : 0;
    var percent = (loaded / total * 100 + oldWidth).toFixed(2);
    var percentText = percent > 100 ? '100%' : percent + '%'; // 校正四舍五入的计算误差

    if (options.showUploadedSize) {
      var $filesize = $progress.nextAll('.filesize');
      $filesize.find('> .uploadedsize').text(that.tools.formatFileSize(loaded));
    }

    if (options.showUploadedPercent) {
      $progress.nextAll('.up_percent').text(percentText);
    }

    that.$progressBar.css('width', percentText); // 记录本次触发progress时已上传的大小，用来计算下次需增加的数量

    if (thisLoaded < options.fileSplitSize) {
      $progress.attr('lastLoaded', thisLoaded);
    } else {
      $progress.removeAttr('lastLoaded');
    }
  };

  Upload.prototype.destroy = function () {}; // UPLOAD PLUGIN DEFINITION
  // =======================


  function Plugin(option) {
    var args = arguments;
    var property = option;

    if (window.FileReader) {
      return this.each(function () {
        var $this = $(this);
        var options = $.extend({}, Upload.DEFAULTS, $this.data(), _typeof(option) === 'object' && option);
        var data = $this.data('bjui.upload');
        if (!data) $this.data('bjui.upload', data = new Upload(this, options));

        if (typeof property === 'string' && $.isFunction(data[property])) {
          [].shift.apply(args);
          if (!args) data[property]();else data[property].apply(data, args);
        } else {
          data.init();
        }
      });
    } else {
      // for IE8-9
      this.each(function () {
        if (!$.fn.uploadify) return;
        var options = {
          swf: BJUI.PLUGINPATH + 'uploadify/scripts/uploadify.swf',
          fileTypeExts: '*.jpg;*.png',
          id: 'fileInput',
          fileObjName: 'file',
          fileSizeLimit: 204800,
          buttonText: '选择上传文件',
          auto: false,
          multi: false,
          height: 24
        };
        var $element = $(this);
        var op = $element.data();
        $element.addClass('bjui-upload');
        if (!op.id) op.id = $element.attr('id');
        $.extend(options, op);

        if (!options.uploader) {
          BJUI.debug('Upload Plugin: The options uploader is undefined!');
          return;
        } else {
          options.uploader = decodeURI(options.uploader).replacePlh($element.closest('.unitBox'));

          if (!options.uploader.isFinishedTm()) {
            $element.alertmsg('error', options.warn || FRAG.alertPlhMsg.replace('#plhmsg#', BJUI.regional.plhmsg));
            BJUI.debug('Upload Plugin: The options uploader is incorrect: ' + options.uploader);
            return;
          }

          options.uploader = encodeURI(options.uploader);
        }

        if (options.id === 'fileInput') options.id = options.id + new Date().getTime();
        var $file = $('<input type="file" name="' + options.name + '" id="' + options.id + '">');

        if (options.onInit && typeof options.onInit === 'string') {
          options.onInit = options.onInit.toFunc();
        }

        if (options.onCancel && typeof options.onCancel === 'string') {
          options.onCancel = options.onCancel.toFunc();
        }

        if (options.onSelect && typeof options.onSelect === 'string') {
          options.onSelect = options.onSelect.toFunc();
        }

        if (options.onUploadSuccess && typeof options.onUploadSuccess === 'string') {
          options.onUploadSuccess = options.onUploadSuccess.toFunc();
        }

        if (options.onUploadComplete && typeof options.onUploadComplete === 'string') {
          options.onUploadComplete = options.onUploadComplete.toFunc();
        }

        if (options.onUploadError && typeof options.onUploadError === 'string') {
          options.onUploadError = options.onUploadError.toFunc();
        }

        if (options.onUploadBefore && typeof options.onUploadBefore === 'string') {
          options.onUploadBefore = options.onUploadBefore.toFunc();
        }

        $file.appendTo($element);

        if (!options.auto) {
          var $upBtn = $('<button class="btn btn-orange" data-icon="cloud-upload">开始上传</button>');
          $upBtn.hide().insertAfter($element).click(function () {
            $file.uploadify('upload', '*');
            $(this).hide();
          });

          options.onSelect = function () {
            $upBtn.show();
          };
        }

        $file.uploadify(options);
      });
    }
  }

  var old = $.fn.upload;
  $.fn.upload = Plugin;
  $.fn.upload.Constructor = Upload; // UPLOAD NO CONFLICT
  // =================

  $.fn.upload.noConflict = function () {
    $.fn.upload = old;
    return this;
  }; // UPLOAD DATA-API
  // ==============


  $(document).on(BJUI.eventType.initUI, function (e) {
    var $this = $(e.target).find('[data-toggle="upload"]');
    if (!$this.length) return;
    Plugin.call($this);
  });
}(jQuery);

/***/ }),

/***/ "./src/js/bjui-util.date.js":
/*!**********************************!*\
  !*** ./src/js/bjui-util.date.js ***!
  \**********************************/
/***/ (() => {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * B-JUI  v1.2 (http://b-jui.com)
 * Git@OSC (http://git.oschina.net/xknaan/B-JUI)
 * Copyright 2014 K'naan (xknaan@163.com).
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 */

/* ========================================================================
 * B-JUI: bjui-util.date.js  v1.2
 * @author K'naan (xknaan@163.com)
 * -- Modified from dwz.util.date.js (author:ZhangHuihua@msn.com)
 * http://git.oschina.net/xknaan/B-JUI/blob/master/BJUI/js/bjui-util.date.js
 * ========================================================================
 * Copyright 2014 K'naan.
 * Licensed under Apache (http://www.apache.org/licenses/LICENSE-2.0)
 * ======================================================================== */
+function ($) {
  'use strict';

  var MONTH_NAMES = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  var DAY_NAMES = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  /**
   * @return {string}
   */

  function LZ(x) {
    return (x < 0 || x > 9 ? '' : '0') + x;
  }
  /**
   * formatDate (date_object, format)
   * Returns a date in the output format specified.
   * The format string uses the same abbreviations as in parseDate()
   * @param {Object} date
   * @param {Object} format
   */


  function formatDate(date, format) {
    format = format + '';
    var result = '';
    var i_format = 0;
    var c = '';
    var token = '';
    var y = date.getYear() + '';
    var M = date.getMonth() + 1;
    var d = date.getDate();
    var E = date.getDay();
    var H = date.getHours();
    var m = date.getMinutes();
    var s = date.getSeconds(); // Convert real date parts into formatted versions

    var value = {};

    if (y.length < 4) {
      y = '' + (y - 0 + 1900);
    }

    value['y'] = '' + y;
    value['yyyy'] = y;
    value['yy'] = y.substring(2, 4);
    value['M'] = M;
    value['MM'] = LZ(M);
    value['MMM'] = MONTH_NAMES[M - 1];
    value['NNN'] = MONTH_NAMES[M + 11];
    value['d'] = d;
    value['dd'] = LZ(d);
    value['E'] = DAY_NAMES[E + 7];
    value['EE'] = DAY_NAMES[E];
    value['H'] = H;
    value['HH'] = LZ(H);

    if (H === 0) {
      value['h'] = 12;
    } else if (H > 12) {
      value['h'] = H - 12;
    } else {
      value['h'] = H;
    }

    value['hh'] = LZ(value['h']);

    if (H > 11) {
      value['K'] = H - 12;
    } else {
      value['K'] = H;
    }

    value['k'] = H + 1;
    value['KK'] = LZ(value['K']);
    value['kk'] = LZ(value['k']);

    if (H > 11) {
      value['a'] = 'PM';
    } else {
      value['a'] = 'AM';
    }

    value['m'] = m;
    value['mm'] = LZ(m);
    value['s'] = s;
    value['ss'] = LZ(s);

    while (i_format < format.length) {
      c = format.charAt(i_format);
      token = '';

      while (format.charAt(i_format) === c && i_format < format.length) {
        token += format.charAt(i_format++);
      }

      if (value[token] != null) {
        result += value[token];
      } else {
        result += token;
      }
    }

    return result;
  }

  function _isInteger(val) {
    return new RegExp(/^\d+$/).test(val);
  }

  function _getInt(str, i, minlength, maxlength) {
    for (var x = maxlength; x >= minlength; x--) {
      var token = str.substring(i, i + x);

      if (token.length < minlength) {
        return null;
      }

      if (_isInteger(token)) {
        return token;
      }
    }

    return null;
  }
  /**
   * parseDate( date_string , format_string )
   *
   * This function takes a date string and a format string. It matches
   * If the date string matches the format string, it returns the date.
   * If it does not match, it returns 0.
   * @param {Object} val
   * @param {Object} format
   */


  function parseDate(val, format) {
    val = val + '';
    format = format + '';
    var i;
    var i_val = 0;
    var i_format = 0;
    var c = '';
    var token = '';
    var x, y;
    var now = new Date(1900, 0, 1);
    var year = now.getYear();
    var month = now.getMonth() + 1;
    var date = 1;
    var hh = now.getHours();
    var mm = now.getMinutes();
    var ss = now.getSeconds();
    var ampm = '';

    while (i_format < format.length) {
      // Get next token from format string
      c = format.charAt(i_format);
      token = '';

      while (format.charAt(i_format) === c && i_format < format.length) {
        token += format.charAt(i_format++);
      } // Extract contents of value based on format token


      if (token === 'yyyy' || token === 'yy' || token === 'y') {
        if (token === 'yyyy') {
          x = 4;
          y = 4;
        }

        if (token === 'yy') {
          x = 2;
          y = 2;
        }

        if (token === 'y') {
          x = 2;
          y = 4;
        }

        year = _getInt(val, i_val, x, y);

        if (year === null) {
          return 0;
        }

        i_val += year.length;

        if (year.length === 2) {
          if (year > 70) {
            year = 1900 + (year - 0);
          } else {
            year = 2e3 + (year - 0);
          }
        }
      } else if (token === 'MMM' || token === 'NNN') {
        month = 0;

        for (i = 0; i < MONTH_NAMES.length; i++) {
          var month_name = MONTH_NAMES[i];

          if (val.substring(i_val, i_val + month_name.length).toLowerCase() === month_name.toLowerCase()) {
            if (token === 'MMM' || token === 'NNN' && i > 11) {
              month = i + 1;

              if (month > 12) {
                month -= 12;
              }

              i_val += month_name.length;
              break;
            }
          }
        }

        if (month < 1 || month > 12) {
          return 0;
        }
      } else if (token === 'EE' || token === 'E') {
        for (i = 0; i < DAY_NAMES.length; i++) {
          var day_name = DAY_NAMES[i];

          if (val.substring(i_val, i_val + day_name.length).toLowerCase() === day_name.toLowerCase()) {
            i_val += day_name.length;
            break;
          }
        }
      } else if (token === 'MM' || token === 'M') {
        month = _getInt(val, i_val, token.length, 2);

        if (month === null || month < 1 || month > 12) {
          return 0;
        }

        i_val += month.length;
      } else if (token === 'dd' || token === 'd') {
        date = _getInt(val, i_val, token.length, 2);

        if (date === null || date < 1 || date > 31) {
          return 0;
        }

        i_val += date.length;
      } else if (token === 'hh' || token === 'h') {
        hh = _getInt(val, i_val, token.length, 2);

        if (hh === null || hh < 1 || hh > 12) {
          return 0;
        }

        i_val += hh.length;
      } else if (token === 'HH' || token === 'H') {
        hh = _getInt(val, i_val, token.length, 2);

        if (hh === null || hh < 0 || hh > 23) {
          return 0;
        }

        i_val += hh.length;
      } else if (token === 'KK' || token === 'K') {
        hh = _getInt(val, i_val, token.length, 2);

        if (hh === null || hh < 0 || hh > 11) {
          return 0;
        }

        i_val += hh.length;
      } else if (token === 'kk' || token === 'k') {
        hh = _getInt(val, i_val, token.length, 2);

        if (hh === null || hh < 1 || hh > 24) {
          return 0;
        }

        i_val += hh.length;
        hh--;
      } else if (token === 'mm' || token === 'm') {
        mm = _getInt(val, i_val, token.length, 2);

        if (mm === null || mm < 0 || mm > 59) {
          return 0;
        }

        i_val += mm.length;
      } else if (token === 'ss' || token === 's') {
        ss = _getInt(val, i_val, token.length, 2);

        if (ss === null || ss < 0 || ss > 59) {
          return 0;
        }

        i_val += ss.length;
      } else if (token === 'a') {
        if (val.substring(i_val, i_val + 2).toLowerCase() === 'am') {
          ampm = 'AM';
        } else if (val.substring(i_val, i_val + 2).toLowerCase() === 'pm') {
          ampm = 'PM';
        } else {
          return 0;
        }

        i_val += 2;
      } else {
        if (val.substring(i_val, i_val + token.length) !== token) {
          return 0;
        } else {
          i_val += token.length;
        }
      }
    } // If there are any trailing characters left in the value, it doesn't match


    if (i_val !== val.length) {
      return 0;
    } // Is date valid for month?


    if (month === 2) {
      // Check for leap year
      if (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0) {
        // leap year
        if (date > 29) {
          return 0;
        }
      } else {
        if (date > 28) {
          return 0;
        }
      }
    }

    if (month === 4 || month === 6 || month === 9 || month === 11) {
      if (date > 30) {
        return 0;
      }
    } // Correct hours value


    if (hh < 12 && ampm === 'PM') {
      hh = hh + 12;
    } else if (hh > 11 && ampm === 'AM') {
      hh -= 12;
    }

    return new Date(year, month - 1, date, hh, mm, ss);
  }

  Date.prototype.formatDate = function (dateFmt) {
    return formatDate(this, dateFmt);
  };

  String.prototype.parseDate = function (dateFmt) {
    if (this.length < dateFmt.length) {
      dateFmt = dateFmt.slice(0, this.length);
    }

    return parseDate(this, dateFmt);
  };
  /**
   * replaceTmEval('{1+2}-{2-1}')
   */


  function replaceTmEval(data) {
    return data.replace(RegExp('({[A-Za-z0-9_+-]*})', 'g'), function ($1) {
      return eval('(' + $1.replace(/[{}]+/g, '') + ')');
    });
  }
  /**
   * dateFmt:%y-%M-%d
   * %y-%M-{%d+1}
   * ex: new Date().formatDateTm('%y-%M-{%d-1}')
   *     new Date().formatDateTm('2012-1')
   */


  Date.prototype.formatDateTm = function (dateFmt) {
    var y = this.getFullYear();
    var m = this.getMonth() + 1;
    var d = this.getDate();
    var sDate = dateFmt.replaceAll('%y', y).replaceAll('%M', m).replaceAll('%d', d);
    sDate = replaceTmEval(sDate);
    var _y = 1900;
    var _m = 0;
    var _d = 1;
    var aDate = sDate.split('-');
    if (aDate.length > 0) _y = aDate[0];
    if (aDate.length > 1) _m = aDate[1] - 1;
    if (aDate.length > 2) _d = aDate[2];
    return new Date(_y, _m, _d).formatDate('yyyy-MM-dd');
  };
  /**
   * 时间格式化
   * 示例： Date.parseTime(new Date(), '{y}-{m}-{d} {h}:{i}:{s}')
   * @param time Date对象 或 时间戳， 默认当前时间
   * @param format 返回格式 默认：{y}-{m}-{d} {h}:{i}:{s}
   * @returns {void | string}
   */


  Date.parseTime = function (time, format) {
    time = time || new Date();
    format = format || '{y}-{m}-{d} {h}:{i}:{s}';
    var date;

    if (_typeof(time) === 'object') {
      date = time;
    } else {
      if (('' + time).length === 10) time = parseInt(time) * 1000;
      date = new Date(time);
    }

    var formatObj = {
      y: date.getFullYear(),
      m: date.getMonth() + 1,
      d: date.getDate(),
      h: date.getHours(),
      i: date.getMinutes(),
      s: date.getSeconds(),
      a: date.getDay()
    };
    return format.replace(/{([ymdhis])+}/g, function (result, key) {
      var value = formatObj[key];

      if (result.length > 0 && value < 10) {
        value = '0' + value;
      }

      return value || 0;
    });
  };
  /**
   * 设置0点
   * @returns {Date}
   */


  Date.prototype.startTime = function () {
    this.setHours(0);
    this.setMinutes(0);
    this.setSeconds(0);
    this.setMilliseconds(0);
    return this;
  };
  /**
   * @returns {Date}
   */


  Date.prototype.endTime = function () {
    this.setHours(23);
    this.setMinutes(59);
    this.setSeconds(59);
    this.setMilliseconds(999);
    return this;
  };
  /**
   * 返回当天时间- 00:00:00|23:59:59
   * @param type {String} start|end
   * @returns {Date}
   */


  Date.today = function (type) {
    type = type || 'start';

    if (type === 'start') {
      return new Date().startTime();
    } else {
      return new Date().endTime();
    }
  };
}(jQuery);

/***/ }),

/***/ "./src/js/jquery.cookie.js":
/*!*********************************!*\
  !*** ./src/js/jquery.cookie.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-cookie */ "./node_modules/js-cookie/dist/js.cookie.mjs");

/**
 * Cookie plugin
 * jQuery Cookie封装
 *
 */

jQuery.cookie = function (name, value, options) {
  if (typeof value !== 'undefined') {
    // set cookie
    options = options || {};

    if (value === null) {
      // remove cookie
      return js_cookie__WEBPACK_IMPORTED_MODULE_0__["default"].remove(name, options);
    }

    return js_cookie__WEBPACK_IMPORTED_MODULE_0__["default"].set(name, value, options);
  } else {
    // get cookie
    return js_cookie__WEBPACK_IMPORTED_MODULE_0__["default"].get(name);
  }
};

/***/ }),

/***/ "./src/css/index.scss":
/*!****************************!*\
  !*** ./src/css/index.scss ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/js-cookie/dist/js.cookie.mjs":
/*!***************************************************!*\
  !*** ./node_modules/js-cookie/dist/js.cookie.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/*! js-cookie v3.0.1 | MIT */
/* eslint-disable no-var */
function assign (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      target[key] = source[key];
    }
  }
  return target
}
/* eslint-enable no-var */

/* eslint-disable no-var */
var defaultConverter = {
  read: function (value) {
    if (value[0] === '"') {
      value = value.slice(1, -1);
    }
    return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent)
  },
  write: function (value) {
    return encodeURIComponent(value).replace(
      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
      decodeURIComponent
    )
  }
};
/* eslint-enable no-var */

/* eslint-disable no-var */

function init (converter, defaultAttributes) {
  function set (key, value, attributes) {
    if (typeof document === 'undefined') {
      return
    }

    attributes = assign({}, defaultAttributes, attributes);

    if (typeof attributes.expires === 'number') {
      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
    }
    if (attributes.expires) {
      attributes.expires = attributes.expires.toUTCString();
    }

    key = encodeURIComponent(key)
      .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)
      .replace(/[()]/g, escape);

    var stringifiedAttributes = '';
    for (var attributeName in attributes) {
      if (!attributes[attributeName]) {
        continue
      }

      stringifiedAttributes += '; ' + attributeName;

      if (attributes[attributeName] === true) {
        continue
      }

      // Considers RFC 6265 section 5.2:
      // ...
      // 3.  If the remaining unparsed-attributes contains a %x3B (";")
      //     character:
      // Consume the characters of the unparsed-attributes up to,
      // not including, the first %x3B (";") character.
      // ...
      stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
    }

    return (document.cookie =
      key + '=' + converter.write(value, key) + stringifiedAttributes)
  }

  function get (key) {
    if (typeof document === 'undefined' || (arguments.length && !key)) {
      return
    }

    // To prevent the for loop in the first place assign an empty array
    // in case there are no cookies at all.
    var cookies = document.cookie ? document.cookie.split('; ') : [];
    var jar = {};
    for (var i = 0; i < cookies.length; i++) {
      var parts = cookies[i].split('=');
      var value = parts.slice(1).join('=');

      try {
        var foundKey = decodeURIComponent(parts[0]);
        jar[foundKey] = converter.read(value, foundKey);

        if (key === foundKey) {
          break
        }
      } catch (e) {}
    }

    return key ? jar[key] : jar
  }

  return Object.create(
    {
      set: set,
      get: get,
      remove: function (key, attributes) {
        set(
          key,
          '',
          assign({}, attributes, {
            expires: -1
          })
        );
      },
      withAttributes: function (attributes) {
        return init(this.converter, assign({}, this.attributes, attributes))
      },
      withConverter: function (converter) {
        return init(assign({}, this.converter, converter), this.attributes)
      }
    },
    {
      attributes: { value: Object.freeze(defaultAttributes) },
      converter: { value: Object.freeze(converter) }
    }
  )
}

var api = init(defaultConverter, { path: '/' });
/* eslint-enable no-var */

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (api);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _css_index_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css/index.scss */ "./src/css/index.scss");
/* harmony import */ var _bjui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bjui */ "./src/bjui.js");


})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,